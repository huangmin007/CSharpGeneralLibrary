<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SpaceCGLibrary</name>
    </assembly>
    <members>
        <member name="T:SpaceCG.Examples.ExampleAttribute">
            <summary>
            这是一个示例
            </summary>
        </member>
        <member name="T:SpaceCG.WindowsAPI.Kernel32.SystemTimeClass">
            <summary>
            系统时间类
            </summary>
        </member>
        <member name="M:SpaceCG.WindowsAPI.Kernel32.SystemTimeClass.op_Implicit(System.UInt16)~SpaceCG.WindowsAPI.Kernel32.SystemTimeClass">
            <summary>
            隐式转换类型 publi static implicit operator Construct()
            </summary>
            <param name="year"></param>
        </member>
        <member name="M:SpaceCG.WindowsAPI.Kernel32.SystemTimeClass.op_Implicit(SpaceCG.WindowsAPI.Kernel32.SystemTimeStruct)~SpaceCG.WindowsAPI.Kernel32.SystemTimeClass">
            <summary>
            隐式转换类型
            </summary>
            <param name="st"></param>
        </member>
        <member name="T:SpaceCG.WindowsAPI.Kernel32.SystemTimeStruct">
            <summary>
            系统时间结构
            </summary>
        </member>
        <member name="M:SpaceCG.WindowsAPI.Kernel32.SystemTimeStruct.op_Implicit(SpaceCG.WindowsAPI.Kernel32.SystemTimeClass)~SpaceCG.WindowsAPI.Kernel32.SystemTimeStruct">
            <summary>
            隐式转换类型
            </summary>
            <param name="st"></param>
        </member>
        <member name="T:SpaceCG.WindowsAPI.Kernel32.Kernel32">
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            Kernel32.dll 常用/实用 函数
            <para>Marshal.GetLastWin32Error(), new WindowInteropHelper(Window).Handle</para>
            <para>参考：C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0 </para>
            </summary>
        </member>
        <member name="M:SpaceCG.WindowsAPI.Kernel32.Kernel32.GetSystemTime(SpaceCG.WindowsAPI.Kernel32.SystemTimeClass)">
            <summary>
            获取系统时间
            <para>这只是一个示例，传参类型为 Class 引用</para>
            <para> <see cref="T:SpaceCG.WindowsAPI.Kernel32.SystemTimeClass"/> 与 <see cref="T:SpaceCG.WindowsAPI.Kernel32.SystemTimeStruct"/> 隐式转换 </para>
            </summary>
            <param name="systemTime"></param>
        </member>
        <member name="M:SpaceCG.WindowsAPI.Kernel32.Kernel32.GetSystemTime(SpaceCG.WindowsAPI.Kernel32.SystemTimeStruct@)">
            <summary>
            获取系统时间
            <para>这只是一个示例，传参类型为 Struct 按值传，引用传需加 ref </para>
            <para> <see cref="T:SpaceCG.WindowsAPI.Kernel32.SystemTimeClass"/> 与 <see cref="T:SpaceCG.WindowsAPI.Kernel32.SystemTimeStruct"/> 隐式转换 </para>
            </summary>
            <param name="systemTime"></param>
        </member>
        <member name="F:SpaceCG.WindowsAPI.Kernel32.Kernel32.MAX_PATH">
            <summary>
            文件路径的最大字符
            </summary>
        </member>
        <member name="M:SpaceCG.WindowsAPI.Kernel32.Kernel32.CreateFile(System.String,System.UInt32,System.UInt32,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
            <summary>
            创建或打开文件或 I/O 设备。最常用的 I/O 设备如下：文件，文件流，目录，物理磁盘，卷，控制台缓冲区，磁带机，通信资源，邮筒和管道。该函数返回一个句柄，根据文件或设备以及指定的标志和属性，该句柄可用于访问各种类型的 I/O 的文件或设备。
            <para>要将此操作作为事务处理操作执行，从而产生可用于事务处理 I/O 的句柄，请使用 <see cref="!:CreateFileTransacted"/> 函数。</para>
            <para><see cref="M:SpaceCG.WindowsAPI.Kernel32.Kernel32.CreateFile(System.String,System.UInt32,System.UInt32,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)"/> 最初是专门为文件交互而开发的，但此后已进行了扩展和增强，以包括 Windows 开发人员可用的大多数其他类型的 I/O 设备和机制。</para>
            <para>使用 <see cref="M:SpaceCG.WindowsAPI.Kernel32.Kernel32.CreateFile(System.String,System.UInt32,System.UInt32,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)"/> 返回的对象句柄完成应用程序后 ，请使用 <see cref="M:SpaceCG.WindowsAPI.Kernel32.Kernel32.CloseHandle(System.IntPtr)"/> 函数关闭该句柄。这不仅释放了系统资源，而且还对共享文件或设备以及将数据提交到磁盘等事物产生更大的影响。</para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/fileapi/nf-fileapi-createfilea </para>
            </summary>
            <param name="lpFileName">[LPCSTR] 要创建或打开的文件或设备的名称。您可以在此名称中使用正斜杠（/）或反斜杠（）。</param>
            <param name="dwDesiredAccess">所请求的对文件或设备的访问，可以概括为读，写，两者均为零或都不为零
                <para>如果此参数为零，即使将拒绝 <see cref="F:SpaceCG.WindowsAPI.Kernel32.AccessRights.GENERIC_READ"/> 访问，应用程序也可以查询某些元数据，例如文件，目录或设备属性，而无需访问该文件或设备。</para>
            </param>
            <param name="dwShareMode">文件或设备的请求共享模式，可以读取，写入，两者，删除，全部或全部不共享。对属性或扩展属性的访问请求不受此标志的影响。
                <para>如果此参数为零，并且 <see cref="M:SpaceCG.WindowsAPI.Kernel32.Kernel32.CreateFile(System.String,System.UInt32,System.UInt32,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)"/> 成功，则在关闭文件或设备的句柄之前，无法共享文件或设备，也无法再次打开该文件或设备。</para>
            </param>
            <param name="lpSecurityAttributes">指向 <see cref="T:SpaceCG.WindowsAPI.Kernel32.SECURITY_ATTRIBUTES"/> 结构的指针，该结构包含两个单独但相关的数据成员：一个可选的安全描述符，以及一个布尔值，该值确定子进程是否可以继承返回的句柄。此参数可以为 NULL。
                <para>如果此参数为 NULL，则 <see cref="M:SpaceCG.WindowsAPI.Kernel32.Kernel32.CreateFile(System.String,System.UInt32,System.UInt32,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)"/> 返回的句柄 不能被应用程序可能创建的任何子进程继承，并且与返回的句柄关联的文件或设备将获得默认的安全描述符。</para>
            </param>
            <param name="dwCreationDisposition">对存在或不存在的文件或设备执行的操作。对于文件以外的设备，此参数通常设置为 <see cref="F:SpaceCG.WindowsAPI.Kernel32.CreationDisposition.OPEN_EXISTING"/>。</param>
            <param name="dwFlagsAndAttributes">文件或设备属性和标志，<see cref="F:SpaceCG.WindowsAPI.Kernel32.FileAttributes.FILE_ATTRIBUTE_NORMAL"/> 是文件的最常见默认值。此参数可以包括可用文件属性（FILE_ATTRIBUTE_*）的任意组合。所有其他文件属性将覆盖 <see cref="F:SpaceCG.WindowsAPI.Kernel32.FileAttributes.FILE_ATTRIBUTE_NORMAL"/>。
                <para>此参数还可以包含标志的组合（FILE_FLAG_），用于控制文件或设备的缓存行为，访问模式和其他特殊用途的标志。这些与任何 FILE_ATTRIBUTE_ 值组合。</para>
                <para>通过指定 SECURITY_SQOS_PRESENT 标志，此参数还可以包含安全服务质量（SQOS）信息 。在属性和标志表之后的表中提供了其他与 SQOS 相关的标志信息。</para>
                <para>可以是 <see cref="T:SpaceCG.WindowsAPI.Kernel32.FileAttributes"/> 或 <see cref="T:SpaceCG.WindowsAPI.Kernel32.FileFlags"/> 或 <see cref="T:SpaceCG.WindowsAPI.Kernel32.FileSecurity"/> 的值或是组合 </para>
            </param>
            <param name="hTemplateFile">具有 <see cref="F:SpaceCG.WindowsAPI.Kernel32.AccessRights.GENERIC_READ"/> 访问权限的模板文件的有效句柄。模板文件为正在创建的文件提供文件属性和扩展属性。
                <para>此参数可以为 NULL。打开现有文件时，<see cref="M:SpaceCG.WindowsAPI.Kernel32.Kernel32.CreateFile(System.String,System.UInt32,System.UInt32,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)"/> 会忽略此参数。当打开一个新的加密文件时，该文件会从其父目录继承任意访问控制列表。</para>
            </param>
            <returns>如果函数成功，则返回值是指定文件，设备，命名管道或邮件插槽的打开句柄。
                <para>如果函数失败，则返回值为 INVALID_HANDLE_VALUE。要获取扩展的错误信息，请调用 <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/> 或 <see cref="M:System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error"/>。</para>
            </returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.Kernel32.Kernel32.CreateFile(System.String,SpaceCG.WindowsAPI.Kernel32.AccessRights,SpaceCG.WindowsAPI.Kernel32.ShareMode,System.IntPtr,SpaceCG.WindowsAPI.Kernel32.CreationDisposition,System.UInt32,System.IntPtr)">
            <summary>
            创建或打开文件或 I/O 设备。最常用的 I/O 设备如下：文件，文件流，目录，物理磁盘，卷，控制台缓冲区，磁带机，通信资源，邮筒和管道。该函数返回一个句柄，根据文件或设备以及指定的标志和属性，该句柄可用于访问各种类型的 I/O 的文件或设备。
            <para>要将此操作作为事务处理操作执行，从而产生可用于事务处理 I/O 的句柄，请使用 <see cref="!:CreateFileTransacted"/> 函数。</para>
            <para><see cref="M:SpaceCG.WindowsAPI.Kernel32.Kernel32.CreateFile(System.String,System.UInt32,System.UInt32,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)"/> 最初是专门为文件交互而开发的，但此后已进行了扩展和增强，以包括 Windows 开发人员可用的大多数其他类型的 I/O 设备和机制。</para>
            <para>使用 <see cref="M:SpaceCG.WindowsAPI.Kernel32.Kernel32.CreateFile(System.String,System.UInt32,System.UInt32,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)"/> 返回的对象句柄完成应用程序后 ，请使用 <see cref="M:SpaceCG.WindowsAPI.Kernel32.Kernel32.CloseHandle(System.IntPtr)"/> 函数关闭该句柄。这不仅释放了系统资源，而且还对共享文件或设备以及将数据提交到磁盘等事物产生更大的影响。</para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/fileapi/nf-fileapi-createfilea </para>
            </summary>
            <param name="lpFileName">[LPCSTR] 要创建或打开的文件或设备的名称。您可以在此名称中使用正斜杠（/）或反斜杠（）。</param>
            <param name="dwDesiredAccess">所请求的对文件或设备的访问，可以概括为读，写，两者均为零或都不为零
                <para>如果此参数为零，即使将拒绝 <see cref="F:SpaceCG.WindowsAPI.Kernel32.AccessRights.GENERIC_READ"/> 访问，应用程序也可以查询某些元数据，例如文件，目录或设备属性，而无需访问该文件或设备。</para>
            </param>
            <param name="dwShareMode">文件或设备的请求共享模式，可以读取，写入，两者，删除，全部或全部不共享。对属性或扩展属性的访问请求不受此标志的影响。
                <para>如果此参数为零，并且 <see cref="M:SpaceCG.WindowsAPI.Kernel32.Kernel32.CreateFile(System.String,System.UInt32,System.UInt32,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)"/> 成功，则在关闭文件或设备的句柄之前，无法共享文件或设备，也无法再次打开该文件或设备。</para>
            </param>
            <param name="lpSecurityAttributes">指向 <see cref="T:SpaceCG.WindowsAPI.Kernel32.SECURITY_ATTRIBUTES"/> 结构的指针，该结构包含两个单独但相关的数据成员：一个可选的安全描述符，以及一个布尔值，该值确定子进程是否可以继承返回的句柄。此参数可以为 NULL。
                <para>如果此参数为 NULL，则 <see cref="M:SpaceCG.WindowsAPI.Kernel32.Kernel32.CreateFile(System.String,System.UInt32,System.UInt32,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)"/> 返回的句柄 不能被应用程序可能创建的任何子进程继承，并且与返回的句柄关联的文件或设备将获得默认的安全描述符。</para>
            </param>
            <param name="dwCreationDisposition">对存在或不存在的文件或设备执行的操作。对于文件以外的设备，此参数通常设置为 <see cref="F:SpaceCG.WindowsAPI.Kernel32.CreationDisposition.OPEN_EXISTING"/>。</param>
            <param name="dwFlagsAndAttributes">文件或设备属性和标志，<see cref="F:SpaceCG.WindowsAPI.Kernel32.FileAttributes.FILE_ATTRIBUTE_NORMAL"/> 是文件的最常见默认值。此参数可以包括可用文件属性（FILE_ATTRIBUTE_*）的任意组合。所有其他文件属性将覆盖 <see cref="F:SpaceCG.WindowsAPI.Kernel32.FileAttributes.FILE_ATTRIBUTE_NORMAL"/>。
                <para>此参数还可以包含标志的组合（FILE_FLAG_），用于控制文件或设备的缓存行为，访问模式和其他特殊用途的标志。这些与任何 FILE_ATTRIBUTE_ 值组合。</para>
                <para>通过指定 SECURITY_SQOS_PRESENT 标志，此参数还可以包含安全服务质量（SQOS）信息 。在属性和标志表之后的表中提供了其他与 SQOS 相关的标志信息。</para>
                <para>可以是 <see cref="T:SpaceCG.WindowsAPI.Kernel32.FileAttributes"/> 或 <see cref="T:SpaceCG.WindowsAPI.Kernel32.FileFlags"/> 或 <see cref="T:SpaceCG.WindowsAPI.Kernel32.FileSecurity"/> 的值或是组合 </para>
            </param>
            <param name="hTemplateFile">具有 <see cref="F:SpaceCG.WindowsAPI.Kernel32.AccessRights.GENERIC_READ"/> 访问权限的模板文件的有效句柄。模板文件为正在创建的文件提供文件属性和扩展属性。
                <para>此参数可以为 NULL。打开现有文件时，<see cref="M:SpaceCG.WindowsAPI.Kernel32.Kernel32.CreateFile(System.String,System.UInt32,System.UInt32,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)"/> 会忽略此参数。当打开一个新的加密文件时，该文件会从其父目录继承任意访问控制列表。</para>
            </param>
            <returns>如果函数成功，则返回值是指定文件，设备，命名管道或邮件插槽的打开句柄。
                <para>如果函数失败，则返回值为 INVALID_HANDLE_VALUE。要获取扩展的错误信息，请调用 <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/> 或 <see cref="M:System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error"/>。</para>
            </returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.Kernel32.Kernel32.CreateFile(System.String,SpaceCG.WindowsAPI.Kernel32.AccessRights,SpaceCG.WindowsAPI.Kernel32.ShareMode,SpaceCG.WindowsAPI.Kernel32.SECURITY_ATTRIBUTES@,SpaceCG.WindowsAPI.Kernel32.CreationDisposition,System.UInt32,System.IntPtr)">
            <summary>
            创建或打开文件或 I/O 设备。最常用的 I/O 设备如下：文件，文件流，目录，物理磁盘，卷，控制台缓冲区，磁带机，通信资源，邮筒和管道。该函数返回一个句柄，根据文件或设备以及指定的标志和属性，该句柄可用于访问各种类型的 I/O 的文件或设备。
            <para>要将此操作作为事务处理操作执行，从而产生可用于事务处理 I/O 的句柄，请使用 <see cref="!:CreateFileTransacted"/> 函数。</para>
            <para><see cref="M:SpaceCG.WindowsAPI.Kernel32.Kernel32.CreateFile(System.String,System.UInt32,System.UInt32,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)"/> 最初是专门为文件交互而开发的，但此后已进行了扩展和增强，以包括 Windows 开发人员可用的大多数其他类型的 I/O 设备和机制。</para>
            <para>使用 <see cref="M:SpaceCG.WindowsAPI.Kernel32.Kernel32.CreateFile(System.String,System.UInt32,System.UInt32,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)"/> 返回的对象句柄完成应用程序后 ，请使用 <see cref="M:SpaceCG.WindowsAPI.Kernel32.Kernel32.CloseHandle(System.IntPtr)"/> 函数关闭该句柄。这不仅释放了系统资源，而且还对共享文件或设备以及将数据提交到磁盘等事物产生更大的影响。</para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/fileapi/nf-fileapi-createfilea </para>
            </summary>
            <param name="lpFileName">[LPCSTR] 要创建或打开的文件或设备的名称。您可以在此名称中使用正斜杠（/）或反斜杠（）。</param>
            <param name="dwDesiredAccess">所请求的对文件或设备的访问，可以概括为读，写，两者均为零或都不为零
                <para>如果此参数为零，即使将拒绝 <see cref="F:SpaceCG.WindowsAPI.Kernel32.AccessRights.GENERIC_READ"/> 访问，应用程序也可以查询某些元数据，例如文件，目录或设备属性，而无需访问该文件或设备。</para>
            </param>
            <param name="dwShareMode">文件或设备的请求共享模式，可以读取，写入，两者，删除，全部或全部不共享。对属性或扩展属性的访问请求不受此标志的影响。
                <para>如果此参数为零，并且 <see cref="M:SpaceCG.WindowsAPI.Kernel32.Kernel32.CreateFile(System.String,System.UInt32,System.UInt32,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)"/> 成功，则在关闭文件或设备的句柄之前，无法共享文件或设备，也无法再次打开该文件或设备。</para>
            </param>
            <param name="lpSecurityAttributes">指向 <see cref="T:SpaceCG.WindowsAPI.Kernel32.SECURITY_ATTRIBUTES"/> 结构的指针，该结构包含两个单独但相关的数据成员：一个可选的安全描述符，以及一个布尔值，该值确定子进程是否可以继承返回的句柄。此参数可以为 NULL。
                <para>如果此参数为 NULL，则 <see cref="M:SpaceCG.WindowsAPI.Kernel32.Kernel32.CreateFile(System.String,System.UInt32,System.UInt32,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)"/> 返回的句柄 不能被应用程序可能创建的任何子进程继承，并且与返回的句柄关联的文件或设备将获得默认的安全描述符。</para>
            </param>
            <param name="dwCreationDisposition">对存在或不存在的文件或设备执行的操作。对于文件以外的设备，此参数通常设置为 <see cref="F:SpaceCG.WindowsAPI.Kernel32.CreationDisposition.OPEN_EXISTING"/>。</param>
            <param name="dwFlagsAndAttributes">文件或设备属性和标志，<see cref="F:SpaceCG.WindowsAPI.Kernel32.FileAttributes.FILE_ATTRIBUTE_NORMAL"/> 是文件的最常见默认值。此参数可以包括可用文件属性（FILE_ATTRIBUTE_*）的任意组合。所有其他文件属性将覆盖 <see cref="F:SpaceCG.WindowsAPI.Kernel32.FileAttributes.FILE_ATTRIBUTE_NORMAL"/>。
                <para>此参数还可以包含标志的组合（FILE_FLAG_），用于控制文件或设备的缓存行为，访问模式和其他特殊用途的标志。这些与任何 FILE_ATTRIBUTE_ 值组合。</para>
                <para>通过指定 SECURITY_SQOS_PRESENT 标志，此参数还可以包含安全服务质量（SQOS）信息 。在属性和标志表之后的表中提供了其他与 SQOS 相关的标志信息。</para>
                <para>可以是 <see cref="T:SpaceCG.WindowsAPI.Kernel32.FileAttributes"/> 或 <see cref="T:SpaceCG.WindowsAPI.Kernel32.FileFlags"/> 或 <see cref="T:SpaceCG.WindowsAPI.Kernel32.FileSecurity"/> 的值或是组合 </para>
            </param>
            <param name="hTemplateFile">具有 <see cref="F:SpaceCG.WindowsAPI.Kernel32.AccessRights.GENERIC_READ"/> 访问权限的模板文件的有效句柄。模板文件为正在创建的文件提供文件属性和扩展属性。
                <para>此参数可以为 NULL。打开现有文件时，<see cref="M:SpaceCG.WindowsAPI.Kernel32.Kernel32.CreateFile(System.String,System.UInt32,System.UInt32,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)"/> 会忽略此参数。当打开一个新的加密文件时，该文件会从其父目录继承任意访问控制列表。</para>
            </param>
            <returns>如果函数成功，则返回值是指定文件，设备，命名管道或邮件插槽的打开句柄。
                <para>如果函数失败，则返回值为 INVALID_HANDLE_VALUE。要获取扩展的错误信息，请调用 <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/> 或 <see cref="M:System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error"/>。</para>
            </returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.Kernel32.Kernel32.ReadFile(System.IntPtr,System.Byte[],System.UInt32,System.UInt32@,System.IntPtr)">
            <summary>
            从指定的文件或输入/输出（I/O）设备读取数据。如果设备支持，则在文件指针指定的位置进行读取。 此功能设计用于同步和异步操作。有关专门为异步操作设计的类似功能，请参见 <see cref="!:ReadFileEx"/>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/fileapi/nf-fileapi-readfile </para>
            </summary>
            <param name="hFile">设备的句柄（例如，文件，文件流，物理磁盘，卷，控制台缓冲区，磁带驱动器，套接字，通信资源，邮槽或管道）。该参数必须已经具有读取权限创建。</param>
            <param name="lpBuffer">指向缓冲区的指针，该缓冲区接收从文件或设备读取的数据。该缓冲区必须在读取操作期间保持有效。在读取操作完成之前，调用者不得使用此缓冲区。</param>
            <param name="nNumberOfBytesToRead">要读取的最大字节数。</param>
            <param name="lpNumberOfBytesRead">指向变量的指针，该变量接收使用同步 hFile 参数时读取的字节数。在执行任何工作或错误检查之前，ReadFile 将此值设置为零。如果这是异步操作，请对该参数使用 NULL 以避免潜在的错误结果。仅当 lpOverlapped 参数不为 NULL 时，此参数才能为 NULL。</param>
            <param name="lpOverlapped">如果 hFILE 参数是使用 <see cref="F:SpaceCG.WindowsAPI.Kernel32.FileFlags.FILE_FLAG_OVERLAPPED"/> 打开的， 则需要指向 <see cref="!:OVERLAPPED"/> 结构的指针，否则可以为 NULL。
                <para>如果使用 <see cref="F:SpaceCG.WindowsAPI.Kernel32.FileFlags.FILE_FLAG_OVERLAPPED"/> 打开 hFile，则 lpOverlapped 参数必须指向有效且唯一的 <see cref="!:OVERLAPPED"/> 结构，否则该函数可能会错误地报告读取操作已完成。</para>
                <para>对于支持字节偏移量的 hFile，如果使用此参数，则必须指定一个字节偏移量，从该位置开始从文件或设备读取。通过设置 <see cref="!:OVERLAPPED"/> 结构的 Offset 和 OffsetHigh 成员 来指定此偏移量 。对于不支持字节偏移量的 hFile，将忽略 Offset 和 OffsetHigh。</para>
            </param>
            <returns>如果函数成功，则返回值为非零（TRUE）。如果函数失败或异步完成，则返回值为零（FALSE）。若要获取扩展的错误信息，请调用 <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/> 或 <see cref="M:System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error"/> 函数。</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.Kernel32.Kernel32.CloseHandle(System.IntPtr)">
            <summary>
            关闭打开的对象句柄。
            <para>如果应用程序在调试器下运行，则该函数将收到无效的句柄值或伪句柄值，否则将引发异常。如果您两次关闭一个句柄，或者在 <see cref="!:FindFirstFile"/> 函数返回的句柄上 调用 CloseHandle 而不是调用 FindClose 函数，则会发生这种情况。</para>
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/api/handleapi/nf-handleapi-closehandle </para>
            </summary>
            <param name="hObject">打开对象的有效句柄。</param>
            <returns>如果函数成功，则返回值为非零。如果函数失败，则返回值为零。要获取扩展的错误信息，请调用 <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/> 或 <see cref="M:System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error"/>。</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.Kernel32.Kernel32.DeleteFile(System.String)">
            <summary>
            删除现有文件。
            <para>若要将此操作作为事务处理操作执行，请使用 <see cref="!:DeleteFileTransacted"/> 函数。</para>
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-deletefile </para>
            </summary>
            <param name="lpFileName">要删除的文件名。在此函数的 ANSI 版本中，名称限制为 <see cref="F:SpaceCG.WindowsAPI.Kernel32.Kernel32.MAX_PATH"/> 个字符。若要将此限制扩展为 32,767 个宽字符，请调用该函数的 Unicode 版本并在名称前加上 "\?" 到路径。</param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.Kernel32.Kernel32.FormatMessage(SpaceCG.WindowsAPI.Kernel32.FmFlags,System.IntPtr,System.UInt32,System.UInt32,System.String@,System.UInt32,System.IntPtr)">
            <summary>
            格式化消息字符串。该功能需要消息定义作为输入。消息定义可以来自传递给函数的缓冲区。它可以来自已加载模块中的消息表资源。或者调用者可以要求函数在系统的消息表资源中搜索消息定义。
            <para>该函数根据消息标识符和语言标识符在消息表资源中找到消息定义。该函数将格式化的消息文本复制到输出缓冲区，如果需要，则处理所有嵌入的插入序列。</para>
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-formatmessage </para>
            </summary>
            <param name="dwFlags">格式设置选项以及如何解释lpSource参数。dwFlags的低位字节指定函数如何处理输出缓冲区中的换行符。低位字节还可以指定格式化输出行的最大宽度。
                <para>如果低位字节是 <see cref="F:SpaceCG.WindowsAPI.Kernel32.FmFlags.FORMAT_MESSAGE_MAX_WIDTH_MASK"/> 以外的非零值 ，则它指定输出行中的最大字符数。该函数将忽略消息定义文本中的常规换行符。该函数从不在换行符之间分割由空格分隔的字符串。该函数将消息定义文本中的硬编码换行符存储到输出缓冲区中。硬编码的换行符使用 ％n 转义序列编码。</para>
            </param>
            <param name="lpSource">消息定义的位置。此参数的类型取决于 dwFlags 参数中的设置。如果在 dwFlags 中均未设置以下这些标志，则将忽略 lpSource
                <para><see cref="F:SpaceCG.WindowsAPI.Kernel32.FmFlags.FORMAT_MESSAGE_FROM_HMODULE"/>  0x00000800  包含要搜索的消息表的模块的句柄。</para>
                <para><see cref="F:SpaceCG.WindowsAPI.Kernel32.FmFlags.FORMAT_MESSAGE_FROM_STRING"/>  0x00000400  指向由无格式消息文本组成的字符串的指针。将对其进行扫描以查找插入内容并进行相应的格式化。</para>
            </param>
            <param name="dwMessageId">所请求消息的消息标识符。如果 dwFlags 包含 <see cref="F:SpaceCG.WindowsAPI.Kernel32.FmFlags.FORMAT_MESSAGE_FROM_STRING"/>，则忽略此参数 。</param>
            <param name="dwLanguageId">请求的消息的语言标识符。如果 dwFlags 包含 <see cref="F:SpaceCG.WindowsAPI.Kernel32.FmFlags.FORMAT_MESSAGE_FROM_STRING"/>，则忽略此参数。(0 表示自动选择)</param>
            <param name="lpBuffer">[LPTSTR] 指向缓冲区的指针，该缓冲区接收以空终止的字符串，该字符串指定格式化的消息。该缓冲区不能大于 64K 字节。
                <para></para>如果 dwFlags 包含 <see cref="F:SpaceCG.WindowsAPI.Kernel32.FmFlags.FORMAT_MESSAGE_ALLOCATE_BUFFER"/>，则该函数使用 <see cref="!:LocalAlloc"/> 函数分配缓冲区，并将指向缓冲区的指针放在 lpBuffer 中指定的地址处。(否则自已分配空间。)</param>
            <param name="nSize">如果未设置 <see cref="F:SpaceCG.WindowsAPI.Kernel32.FmFlags.FORMAT_MESSAGE_ALLOCATE_BUFFER"/> 标志，则此参数以 TCHARs 指定输出缓冲区的大小。如果 设置了 <see cref="F:SpaceCG.WindowsAPI.Kernel32.FmFlags.FORMAT_MESSAGE_ALLOCATE_BUFFER"/>，则此参数指定分配给输出缓冲区的最小 TCHAR 数 。
                <para>输出缓冲区不能大于64K字节。</para>
            </param>
            <param name="Arguments">值数组，用作格式化消息中的插入值。格式字符串中的 %1 表示 Arguments数组中的第一个值；%2表示第二个参数；等等。
                <para>每个值的解释取决于与消息定义中的插入关联的格式信息。默认值是将每个值都视为指向以空字符结尾的字符串的指针。</para>
                <para>默认情况下，Arguments 参数的类型为 va_list*，这是一种语言和实现特定的数据类型，用于描述可变数量的参数。从函数返回时，va_list 参数的状态未定义。要再次使用 va_list，请使用 va_end 销毁变量参数列表指针，然后使用 va_start 对其进行初始化 。</para>
                <para>如果您没有类型为 va_list* 的指针 ，则指定 <see cref="F:SpaceCG.WindowsAPI.Kernel32.FmFlags.FORMAT_MESSAGE_ARGUMENT_ARRAY"/> 标志并将指针传递给 DWORD_PTR 值数组；这些值被输入到格式化为插入值的消息中。每个插入在数组中必须有一个对应的元素。</para>
            </param>
            <returns>如果函数成功，则返回值是存储在输出缓冲区中的 TCHAR 数量，不包括终止的空字符。
                <para>如果函数失败，则返回值为零。要获取扩展的错误信息，请调用 <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/> 或 <see cref="M:System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error"/>。</para>
            </returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.Kernel32.Kernel32.FormatMessage(SpaceCG.WindowsAPI.Kernel32.FmFlags,System.IntPtr,System.UInt32,System.UInt32,System.Text.StringBuilder,System.UInt32,System.IntPtr)">
            <summary>
            格式化消息字符串。该功能需要消息定义作为输入。消息定义可以来自传递给函数的缓冲区。它可以来自已加载模块中的消息表资源。或者调用者可以要求函数在系统的消息表资源中搜索消息定义。
            <para>该函数根据消息标识符和语言标识符在消息表资源中找到消息定义。该函数将格式化的消息文本复制到输出缓冲区，如果需要，则处理所有嵌入的插入序列。</para>
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-formatmessage </para>
            </summary>
            <param name="dwFlags">格式设置选项以及如何解释lpSource参数。dwFlags的低位字节指定函数如何处理输出缓冲区中的换行符。低位字节还可以指定格式化输出行的最大宽度。
                <para>如果低位字节是 <see cref="F:SpaceCG.WindowsAPI.Kernel32.FmFlags.FORMAT_MESSAGE_MAX_WIDTH_MASK"/> 以外的非零值 ，则它指定输出行中的最大字符数。该函数将忽略消息定义文本中的常规换行符。该函数从不在换行符之间分割由空格分隔的字符串。该函数将消息定义文本中的硬编码换行符存储到输出缓冲区中。硬编码的换行符使用 ％n 转义序列编码。</para>
            </param>
            <param name="lpSource">消息定义的位置。此参数的类型取决于 dwFlags 参数中的设置。如果在 dwFlags 中均未设置以下这些标志，则将忽略 lpSource
                <para><see cref="F:SpaceCG.WindowsAPI.Kernel32.FmFlags.FORMAT_MESSAGE_FROM_HMODULE"/>  0x00000800  包含要搜索的消息表的模块的句柄。</para>
                <para><see cref="F:SpaceCG.WindowsAPI.Kernel32.FmFlags.FORMAT_MESSAGE_FROM_STRING"/>  0x00000400  指向由无格式消息文本组成的字符串的指针。将对其进行扫描以查找插入内容并进行相应的格式化。</para>
            </param>
            <param name="dwMessageId">所请求消息的消息标识符。如果 dwFlags 包含 <see cref="F:SpaceCG.WindowsAPI.Kernel32.FmFlags.FORMAT_MESSAGE_FROM_STRING"/>，则忽略此参数 。</param>
            <param name="dwLanguageId">请求的消息的语言标识符。如果 dwFlags 包含 <see cref="F:SpaceCG.WindowsAPI.Kernel32.FmFlags.FORMAT_MESSAGE_FROM_STRING"/>，则忽略此参数。(0 表示自动选择)</param>
            <param name="lpBuffer">[LPTSTR] 指向缓冲区的指针，该缓冲区接收以空终止的字符串，该字符串指定格式化的消息。该缓冲区不能大于 64K 字节。
                <para></para>如果 dwFlags 包含 <see cref="F:SpaceCG.WindowsAPI.Kernel32.FmFlags.FORMAT_MESSAGE_ALLOCATE_BUFFER"/>，则该函数使用 <see cref="!:LocalAlloc"/> 函数分配缓冲区，并将指向缓冲区的指针放在 lpBuffer 中指定的地址处。(否则自已分配空间。)</param>
            <param name="nSize">如果未设置 <see cref="F:SpaceCG.WindowsAPI.Kernel32.FmFlags.FORMAT_MESSAGE_ALLOCATE_BUFFER"/> 标志，则此参数以 TCHARs 指定输出缓冲区的大小。如果 设置了 <see cref="F:SpaceCG.WindowsAPI.Kernel32.FmFlags.FORMAT_MESSAGE_ALLOCATE_BUFFER"/>，则此参数指定分配给输出缓冲区的最小 TCHAR 数 。
                <para>输出缓冲区不能大于64K字节。</para>
            </param>
            <param name="Arguments">值数组，用作格式化消息中的插入值。格式字符串中的 %1 表示 Arguments数组中的第一个值；%2表示第二个参数；等等。
                <para>每个值的解释取决于与消息定义中的插入关联的格式信息。默认值是将每个值都视为指向以空字符结尾的字符串的指针。</para>
                <para>默认情况下，Arguments 参数的类型为 va_list*，这是一种语言和实现特定的数据类型，用于描述可变数量的参数。从函数返回时，va_list 参数的状态未定义。要再次使用 va_list，请使用 va_end 销毁变量参数列表指针，然后使用 va_start 对其进行初始化 。</para>
                <para>如果您没有类型为 va_list* 的指针 ，则指定 <see cref="F:SpaceCG.WindowsAPI.Kernel32.FmFlags.FORMAT_MESSAGE_ARGUMENT_ARRAY"/> 标志并将指针传递给 DWORD_PTR 值数组；这些值被输入到格式化为插入值的消息中。每个插入在数组中必须有一个对应的元素。</para>
            </param>
            <returns>如果函数成功，则返回值是存储在输出缓冲区中的 TCHAR 数量，不包括终止的空字符。
                <para>如果函数失败，则返回值为零。要获取扩展的错误信息，请调用 <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/> 或 <see cref="M:System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error"/>。</para>
            </returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.Kernel32.Kernel32.FormatMessage(System.Int32,System.Int64@,System.UInt32,System.UInt32,System.Text.StringBuilder,System.UInt32,System.ArgIterator)">
            <summary>
            格式化消息字符串。该功能需要消息定义作为输入。消息定义可以来自传递给函数的缓冲区。它可以来自已加载模块中的消息表资源。或者调用者可以要求函数在系统的消息表资源中搜索消息定义。
            <para>该函数根据消息标识符和语言标识符在消息表资源中找到消息定义。该函数将格式化的消息文本复制到输出缓冲区，如果需要，则处理所有嵌入的插入序列。</para>
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-formatmessage </para>
            </summary>
            <param name="dwFlags">格式设置选项以及如何解释lpSource参数。dwFlags的低位字节指定函数如何处理输出缓冲区中的换行符。低位字节还可以指定格式化输出行的最大宽度。
                <para>如果低位字节是 <see cref="F:SpaceCG.WindowsAPI.Kernel32.FmFlags.FORMAT_MESSAGE_MAX_WIDTH_MASK"/> 以外的非零值 ，则它指定输出行中的最大字符数。该函数将忽略消息定义文本中的常规换行符。该函数从不在换行符之间分割由空格分隔的字符串。该函数将消息定义文本中的硬编码换行符存储到输出缓冲区中。硬编码的换行符使用 ％n 转义序列编码。</para>
            </param>
            <param name="lpSource">消息定义的位置。此参数的类型取决于 dwFlags 参数中的设置。如果在 dwFlags 中均未设置以下这些标志，则将忽略 lpSource
                <para><see cref="F:SpaceCG.WindowsAPI.Kernel32.FmFlags.FORMAT_MESSAGE_FROM_HMODULE"/>  0x00000800  包含要搜索的消息表的模块的句柄。</para>
                <para><see cref="F:SpaceCG.WindowsAPI.Kernel32.FmFlags.FORMAT_MESSAGE_FROM_STRING"/>  0x00000400  指向由无格式消息文本组成的字符串的指针。将对其进行扫描以查找插入内容并进行相应的格式化。</para>
            </param>
            <param name="dwMessageId">所请求消息的消息标识符。如果 dwFlags 包含 <see cref="F:SpaceCG.WindowsAPI.Kernel32.FmFlags.FORMAT_MESSAGE_FROM_STRING"/>，则忽略此参数 。</param>
            <param name="dwLanguageId">请求的消息的语言标识符。如果 dwFlags 包含 <see cref="F:SpaceCG.WindowsAPI.Kernel32.FmFlags.FORMAT_MESSAGE_FROM_STRING"/>，则忽略此参数。(0 表示自动选择)</param>
            <param name="lpBuffer">[LPTSTR] 指向缓冲区的指针，该缓冲区接收以空终止的字符串，该字符串指定格式化的消息。该缓冲区不能大于 64K 字节。
                <para></para>如果 dwFlags 包含 <see cref="F:SpaceCG.WindowsAPI.Kernel32.FmFlags.FORMAT_MESSAGE_ALLOCATE_BUFFER"/>，则该函数使用 <see cref="!:LocalAlloc"/> 函数分配缓冲区，并将指向缓冲区的指针放在 lpBuffer 中指定的地址处。(否则自已分配空间。)</param>
            <param name="nSize">如果未设置 <see cref="F:SpaceCG.WindowsAPI.Kernel32.FmFlags.FORMAT_MESSAGE_ALLOCATE_BUFFER"/> 标志，则此参数以 TCHARs 指定输出缓冲区的大小。如果 设置了 <see cref="F:SpaceCG.WindowsAPI.Kernel32.FmFlags.FORMAT_MESSAGE_ALLOCATE_BUFFER"/>，则此参数指定分配给输出缓冲区的最小 TCHAR 数 。
                <para>输出缓冲区不能大于64K字节。</para>
            </param>
            <param name="Arguments">值数组，用作格式化消息中的插入值。格式字符串中的 %1 表示 Arguments数组中的第一个值；%2表示第二个参数；等等。
                <para>每个值的解释取决于与消息定义中的插入关联的格式信息。默认值是将每个值都视为指向以空字符结尾的字符串的指针。</para>
                <para>默认情况下，Arguments 参数的类型为 va_list*，这是一种语言和实现特定的数据类型，用于描述可变数量的参数。从函数返回时，va_list 参数的状态未定义。要再次使用 va_list，请使用 va_end 销毁变量参数列表指针，然后使用 va_start 对其进行初始化 。</para>
                <para>如果您没有类型为 va_list* 的指针 ，则指定 <see cref="F:SpaceCG.WindowsAPI.Kernel32.FmFlags.FORMAT_MESSAGE_ARGUMENT_ARRAY"/> 标志并将指针传递给 DWORD_PTR 值数组；这些值被输入到格式化为插入值的消息中。每个插入在数组中必须有一个对应的元素。</para>
            </param>
            <returns>如果函数成功，则返回值是存储在输出缓冲区中的 TCHAR 数量，不包括终止的空字符。
                <para>如果函数失败，则返回值为零。要获取扩展的错误信息，请调用 <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/> 或 <see cref="M:System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error"/>。</para>
            </returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.Kernel32.Kernel32.LoadLibrary(System.String)">
            <summary>
            将指定的模块加载到调用进程的地址空间中。指定的模块可能会导致其他模块被加载。
            <para>有关其他加载选项，请使用 LoadLibraryEx 函数。</para>
            <para>若要启用或禁用 DLL 加载期间加载程序显示的错误消息，请使用 SetErrorMode 函数。</para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/libloaderapi/nf-libloaderapi-loadlibrarya </para>
            </summary>
            <param name="lpLibFileName">[LPCSTR] 模块的名称。这可以是库模块（.dll文件）或可执行模块（.exe文件）。指定的名称是模块的文件名，并且与模块模块定义（.def）文件中的 LIBRARY 关键字指定的库模块本身中存储的名称无关。
                <para>如果字符串指定完整路径，则该函数仅在该路径中搜索模块。如果字符串指定相对路径或不带路径的模块名称，则该函数使用标准搜索策略查找模块；有关更多信息，请参见备注。</para>
                <para>如果该功能找不到模块，则该功能将失败。指定路径时，请确保使用反斜杠（\），而不使用正斜杠（/）。有关路径的更多信息，请参见 命名文件或目录。</para>
                <para>如果字符串指定没有路径的模块名称，并且省略了文件扩展名，则该函数会将默认库扩展名.dll附加到模块名。为防止函数将.dll附加到模块名称，请在模块名称字符串中包含尾随字符（。）。</para>
            </param>
            <returns>如果函数成功，则返回值是模块的句柄。如果函数失败，则返回值为 NULL。要获取扩展的错误信息，请调用 GetLastError。</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.Kernel32.Kernel32.FreeLibrary(System.IntPtr)">
            <summary>
            释放已加载的动态链接库（DLL）模块，并在必要时减少其引用计数。当引用计数达到零时，将从调用进程的地址空间中卸载模块，并且该句柄不再有效。
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/libloaderapi/nf-libloaderapi-freelibrary </para>
            </summary>
            <param name="hLibModule">加载的库模块的句柄。在 调用 LoadLibrary，LoadLibraryEx，GetModuleHandle 或 GetModuleHandleEx 函数返回该句柄。</param>
            <returns>如果函数成功，则返回值为非零。如果函数失败，则返回值为零。若要获取扩展的错误信息，请调用 GetLastError 函数。</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.Kernel32.Kernel32.GetProcAddress(System.IntPtr,System.String)">
            <summary>
            从指定的动态链接库（DLL）检索导出的函数或变量的地址。
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/libloaderapi/nf-libloaderapi-getprocaddress </para>
            </summary>
            <param name="hModule">包含函数或变量的 DLL 模块的句柄。在调用LoadLibrary，LoadLibraryEx，LoadPackagedLibrary，或 GetModuleHandle 函数返回该句柄。</param>
            <param name="lpProcName">[LPCSTR] 函数或变量名称，或函数的序数值。如果此参数是序数值，则必须使用低位字；高阶字必须为零。</param>
            <returns>如果函数成功，则返回值是导出的函数或变量的地址。如果函数失败，则返回值为NULL。要获取扩展的错误信息，请调用 GetLastError。</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.Kernel32.Kernel32.GetCurrentThreadId">
            <summary>
            检索调用线程的线程标识符。
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-getcurrentthreadid </para>
            </summary>
            <returns>返回值是调用线程的线程标识符。</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.Kernel32.Kernel32.GetModuleHandle(System.String)">
            <summary>
            检索指定模块的模块句柄。该模块必须已由调用进程加载。
            <para>返回的句柄不是全局的或可继承的。它不能被其他进程复制或使用。</para>
            <para>如果 lpModuleName 不包含路径，并且有多个加载的模块具有相同的基本名称和扩展名，则您无法预测将返回哪个模块句柄。要变通解决此问题，您可以指定路径，使用并行程序集或使用 GetModuleHandleEx 来指定内存位置而不是 DLL 名称。</para>
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/api/libloaderapi/nf-libloaderapi-getmodulehandlea </para>
            </summary>
            <param name="lpModuleName">[LPCSTR] 加载的模块的名称（.dll或.exe文件）。如果省略文件扩展名，则会附加默认库扩展名.dll。</param>
            <returns>如果函数成功，则返回值是指定模块的句柄。如果函数失败，则返回值为NULL。要获取扩展的错误信息，请调用 GetLastError。</returns>
        </member>
        <member name="T:SpaceCG.WindowsAPI.Kernel32.Kernel32Extension">
            <summary>
            WindowsAPI Kernel32库，扩展常用/通用，功能/函数，扩展示例，以及使用方式ad
            </summary>
            <summary>
            WindowsAPI Kernel32库，扩展常用/通用，功能/函数，扩展示例，以及使用方式ad
            </summary>
            <summary>
            WindowsAPI Kernel32库，扩展常用/通用，功能/函数，扩展示例，以及使用方式ad
            </summary>
            <summary>
            WindowsAPI Kernel32 库，扩展常用/通用，功能/函数，扩展示例，以及使用方式
            </summary>
        </member>
        <member name="M:SpaceCG.WindowsAPI.Kernel32.Kernel32Extension.GetSysErrroMessage(System.UInt32)">
            <summary>
            获取系统错误信息的描述
            <para>see <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/></para>
            <para>封装 <see cref="M:SpaceCG.WindowsAPI.Kernel32.Kernel32.FormatMessage(SpaceCG.WindowsAPI.Kernel32.FmFlags,System.IntPtr,System.UInt32,System.UInt32,System.String@,System.UInt32,System.IntPtr)"/></para>
            </summary>
            <param name="errorCode">系统错误码</param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.Kernel32.Kernel32Extension.GetSysErrroMessage(System.String)">
            <summary>
            获取系统错误信息的描述
            <para>see <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/></para>
            </summary>
            <param name="sysFunctionName">系统函数名称，Window API 函数名称</param>
            <returns></returns>
        </member>
        <member name="T:SpaceCG.WindowsAPI.Kernel32.AccessRights">
            <summary>
            访问权限，安全对象使用访问掩码格式，其中四个高位指定通用访问权限。每种可保护对象的类型都将这些位映射到一组其标准和特定于对象的访问权限。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.Kernel32.AccessRights.FILE_READ_DATA">
            <summary>
            [文件访问权限常量] 对于文件对象，有权读取相应的文件数据。对于目录对象，有权读取相应的目录数据。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.Kernel32.AccessRights.FILE_LIST_DIRECTORY">
            <summary>
            [文件访问权限常量] 对于目录，有权列出目录的内容。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.Kernel32.AccessRights.FILE_WRITE_DATA">
            <summary>
            [文件访问权限常量] 对于文件对象，具有将数据写入文件的权利。对于目录对象，有权在目录（<see cref="F:SpaceCG.WindowsAPI.Kernel32.AccessRights.FILE_ADD_FILE"/>）中创建文件。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.Kernel32.AccessRights.FILE_ADD_FILE">
            <summary>
            [文件访问权限常量] 对于目录，有权在目录中创建文件。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.Kernel32.AccessRights.FILE_APPEND_DATA">
            <summary>
            [文件访问权限常量] 对于文件对象，有权将数据附加到文件。（对于本地文件，如果在没有 <see cref="F:SpaceCG.WindowsAPI.Kernel32.AccessRights.FILE_WRITE_DATA"/> 的情况下指定了此标志，则写操作将不会覆盖现有数据。）对于目录对象，有权创建子目录（<see cref="F:SpaceCG.WindowsAPI.Kernel32.AccessRights.FILE_ADD_SUBDIRECTORY"/>）。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.Kernel32.AccessRights.FILE_ADD_SUBDIRECTORY">
            <summary>
            [文件访问权限常量] 对于目录，有权创建子目录。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.Kernel32.AccessRights.FILE_CREATE_PIPE_INSTANCE">
            <summary>
            [文件访问权限常量] 对于命名管道，有权创建管道。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.Kernel32.AccessRights.FILE_READ_EA">
            <summary>
            [文件访问权限常量] 读取扩展文件属性的权利。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.Kernel32.AccessRights.FILE_WRITE_EA">
            <summary>
            [文件访问权限常量] 写入扩展文件属性的权利。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.Kernel32.AccessRights.FILE_EXECUTE">
            <summary>
            [文件访问权限常量] 对于本机代码文件，有权执行该文件。授予脚本的访问权限可能导致脚本可执行，具体取决于脚本解释器。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.Kernel32.AccessRights.FILE_TRAVERSE">
            <summary>
            [文件访问权限常量] 对于目录，具有遍历目录的权利。默认情况下，为用户分配 <see cref="!:BYPASS_TRAVERSE_CHECKING"/> 特权，该特权将忽略 <see cref="F:SpaceCG.WindowsAPI.Kernel32.AccessRights.FILE_TRAVERSE"/> 访问权限。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.Kernel32.AccessRights.FILE_DELETE_CHILD">
            <summary>
            [文件访问权限常量] 对于目录，有权删除目录及其包含的所有文件，包括只读文件。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.Kernel32.AccessRights.FILE_READ_ATTRIBUTES">
            <summary>
            [文件访问权限常量] 读取文件属性的权利。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.Kernel32.AccessRights.FILE_WRITE_ATTRIBUTES">
            <summary>
            [文件访问权限常量] 写入文件属性的权利。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.Kernel32.AccessRights.FILE_ALL_ACCESS">
            <summary>
            [文件访问权限常量] 文件的所有可能的访问权限。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.Kernel32.AccessRights.FILE_GENERIC_READ">
            <summary>
            [一般访问权限] 
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.Kernel32.AccessRights.FILE_GENERIC_WRITE">
            <summary>
            [一般访问权限]
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.Kernel32.AccessRights.FILE_GENERIC_EXECUTE">
            <summary>
            [一般访问权限]
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.Kernel32.AccessRights.DELETE">
            <summary>
            [标准访问权限] 删除对象的权利。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.Kernel32.AccessRights.READ_CONTROL">
            <summary>
            [标准访问权限] 有权读取对象的安全描述符中的信息，但不包括系统访问控制列表（SACL）中的信息。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.Kernel32.AccessRights.WRITE_DAC">
            <summary>
            [标准访问权限] 修改对象的安全描述符中的任意访问控制列表（DACL）的权限。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.Kernel32.AccessRights.WRITE_OWNER">
            <summary>
            [标准访问权限] 在对象的安全描述符中更改所有者的权利。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.Kernel32.AccessRights.SYNCHRONIZE">
            <summary>
            [标准访问权限] 使用对象进行同步的权利。这使线程可以等待，直到对象处于信号状态。某些对象类型不支持此访问权限。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.Kernel32.AccessRights.STANDARD_RIGHTS_REQUIRED">
            <summary>
            [标准访问权限] 合并 <see cref="F:SpaceCG.WindowsAPI.Kernel32.AccessRights.DELETE"/>，<see cref="F:SpaceCG.WindowsAPI.Kernel32.AccessRights.READ_CONTROL"/>，<see cref="F:SpaceCG.WindowsAPI.Kernel32.AccessRights.WRITE_DAC"/> 和 <see cref="F:SpaceCG.WindowsAPI.Kernel32.AccessRights.WRITE_OWNER"/> 访问。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.Kernel32.AccessRights.STANDARD_RIGHTS_READ">
            <summary>
            [标准访问权限] 当前定义为等于 <see cref="F:SpaceCG.WindowsAPI.Kernel32.AccessRights.READ_CONTROL"/>。它是读取文件或目录对象的安全描述符中的信息的权利。这不包括 SACL 中的信息。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.Kernel32.AccessRights.STANDARD_RIGHTS_WRITE">
            <summary>
            [标准访问权限] 当前定义为等于 <see cref="F:SpaceCG.WindowsAPI.Kernel32.AccessRights.READ_CONTROL"/>。与 <see cref="F:SpaceCG.WindowsAPI.Kernel32.AccessRights.STANDARD_RIGHTS_READ"/> 相同。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.Kernel32.AccessRights.STANDARD_RIGHTS_EXECUTE">
            <summary>
            [标准访问权限] 当前定义为等于 <see cref="F:SpaceCG.WindowsAPI.Kernel32.AccessRights.READ_CONTROL"/>。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.Kernel32.AccessRights.STANDARD_RIGHTS_ALL">
            <summary>
            [标准访问权限] 合并 <see cref="F:SpaceCG.WindowsAPI.Kernel32.AccessRights.DELETE"/>，<see cref="F:SpaceCG.WindowsAPI.Kernel32.AccessRights.READ_CONTROL"/>，<see cref="F:SpaceCG.WindowsAPI.Kernel32.AccessRights.WRITE_DAC"/>，<see cref="F:SpaceCG.WindowsAPI.Kernel32.AccessRights.WRITE_OWNER"/> 和 <see cref="F:SpaceCG.WindowsAPI.Kernel32.AccessRights.SYNCHRONIZE"/> 访问。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.Kernel32.AccessRights.SPECIFIC_RIGHTS_ALL">
            <summary>
            
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.Kernel32.AccessRights.ACCESS_SYSTEM_SECURITY">
            <summary>
            AccessSystemAcl access type
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.Kernel32.AccessRights.MAXIMUM_ALLOWED">
            <summary>
            MaximumAllowed access type
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.Kernel32.AccessRights.GENERIC_ALL">
            <summary>
            [通用访问权限] 所有可能的访问权限
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.Kernel32.AccessRights.GENERIC_EXECUTE">
            <summary>
            [通用访问权限] 执行访问 
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.Kernel32.AccessRights.GENERIC_WRITE">
            <summary>
            [通用访问权限] 写访问
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.Kernel32.AccessRights.GENERIC_READ">
            <summary>
            [通用访问权限] 读取权限 
            </summary>
        </member>
        <member name="T:SpaceCG.WindowsAPI.Kernel32.ShareMode">
            <summary>
            <see cref="M:SpaceCG.WindowsAPI.Kernel32.Kernel32.CreateFile(System.String,System.UInt32,System.UInt32,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)"/> 参数 dwShareMode
            <para>参考： https://docs.microsoft.com/zh-cn/windows/win32/api/fileapi/nf-fileapi-createfilea </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.Kernel32.ShareMode.FILE_SHARE_DEFAULT">
            <summary>
            阻止其他进程在请求删除，读取或写入访问时打开文件或设备。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.Kernel32.ShareMode.FILE_SHARE_READ">
            <summary>
            在文件或设备上启用后续打开操作，以请求读取访问权限。否则，其他进程如果请求读取访问权限，则无法打开文件或设备。如果未指定此标志，但是已打开文件或设备以进行读取访问，则该功能将失败。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.Kernel32.ShareMode.FILE_SHARE_WRITE">
            <summary>
            在文件或设备上启用后续打开操作以请求写访问权限。否则，其他进程如果请求写访问权，则无法打开文件或设备。如果未指定此标志，但已打开文件或设备以进行写访问，或者具有具有写访问权限的文件映射，则该功能将失败。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.Kernel32.ShareMode.FILE_SHARE_DELETE">
            <summary>
            在文件或设备上启用后续打开操作以请求删除访问。否则，如果其他进程请求删除访问，则它们将无法打开文件或设备。如果未指定此标志，但是已打开文件或设备以进行删除访问，则该功能将失败。
            <para>注意:删除访问权限允许删除和重命名操作。</para>
            </summary>
        </member>
        <member name="T:SpaceCG.WindowsAPI.Kernel32.CreationDisposition">
            <summary>
            <see cref="M:SpaceCG.WindowsAPI.Kernel32.Kernel32.CreateFile(System.String,System.UInt32,System.UInt32,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)"/> 函数参数 dwCreationDisposition 的值之一
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.Kernel32.CreationDisposition.CREATE_NEW">
            <summary>
            仅在尚不存在时创建一个新文件。如果指定的文件存在，则函数失败，并且上一个错误代码设置为 ERROR_FILE_EXISTS（80）。
            <para>如果指定的文件不存在，并且是可写位置的有效路径，则会创建一个新文件。</para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.Kernel32.CreationDisposition.CREATE_ALWAYS">
            <summary>
            始终创建一个新文件。如果指定的文件存在并且可写，则该函数将覆盖该文件，该函数将成功，并且上一个错误代码设置为 ERROR_ALREADY_EXISTS（183）。
            <para>如果指定的文件不存在并且是有效路径，则创建一个新文件，该函数成功，并且最后一个错误代码设置为零。</para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.Kernel32.CreationDisposition.OPEN_EXISTING">
            <summary>
            仅打开文件或设备（如果存在）。如果指定的文件或设备不存在，该功能将失败，并且上一个错误代码将设置为 ERROR_FILE_NOT_FOUND（2）。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.Kernel32.CreationDisposition.OPEN_ALWAYS">
            <summary>
            始终打开文件。如果指定的文件存在，则函数成功，并且最后一个错误代码设置为 ERROR_ALREADY_EXISTS（183）。
            <para>如果指定的文件不存在，并且是可写位置的有效路径，则该函数将创建一个文件，并且上一个错误代码将设置为零。</para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.Kernel32.CreationDisposition.TRUNCATE_EXISTING">
            <summary>
            打开文件并将其截断，以使其大小为零字节（仅存在时）。如果指定的文件不存在，该函数将失败，并且上一个错误代码将设置为 ERROR_FILE_NOT_FOUND（2）。
            <para>调用进程必须使用 dwDesiredAccess 参数的一部分设置 GENERIC_WRITE 位来打开文件。</para>
            </summary>
        </member>
        <member name="T:SpaceCG.WindowsAPI.Kernel32.FileAttributes">
            <summary>
            文件属性标志。此参数可以是一个或多个值，可以使用按位或运算符组合。
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/fileapi/nf-fileapi-setfileattributesa </para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/fileapi/nf-fileapi-createfilea </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.Kernel32.FileAttributes.FILE_ATTRIBUTE_READONLY">
            <summary>
            该文件是只读的。应用程序可以读取文件，但不能写入或删除文件。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.Kernel32.FileAttributes.FILE_ATTRIBUTE_HIDDEN">
            <summary>
            该文件被隐藏。不要将其包括在普通目录列表中。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.Kernel32.FileAttributes.FILE_ATTRIBUTE_SYSTEM">
            <summary>
            该文件是操作系统的一部分或仅由操作系统使用。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.Kernel32.FileAttributes.FILE_ATTRIBUTE_ARCHIVE">
            <summary>
            该文件应被存档。应用程序使用此属性将文件标记为备份或删除。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.Kernel32.FileAttributes.FILE_ATTRIBUTE_NORMAL">
            <summary>
            该文件未设置其他属性。仅当单独使用时，此属性才有效。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.Kernel32.FileAttributes.FILE_ATTRIBUTE_TEMPORARY">
            <summary>
            该文件正在用于临时存储。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.Kernel32.FileAttributes.FILE_ATTRIBUTE_OFFLINE">
            <summary>
            文件的数据不是立即可用的。此属性指示文件数据已物理移动到脱机存储中。分层存储管理软件 Remote Storage 使用此属性。应用程序不应随意更改此属性。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.Kernel32.FileAttributes.FILE_ATTRIBUTE_ENCRYPTED">
            <summary>
            文件或目录已加密。对于文件，这意味着文件中的所有数据都已加密。对于目录，这意味着加密是新创建的文件和子目录的默认设置。有关更多信息，请参见文件加密。如果还指定了 <see cref="F:SpaceCG.WindowsAPI.Kernel32.FileAttributes.FILE_ATTRIBUTE_SYSTEM"/>，则此标志无效。
            <para>Windows的Home，Home Premium，Starter或ARM版本不支持此标志。</para>
            </summary>
        </member>
        <member name="T:SpaceCG.WindowsAPI.Kernel32.FileFlags">
            <summary>
            文件标志
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/fileapi/nf-fileapi-createfilea </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.Kernel32.FileFlags.FILE_FLAG_OPEN_NO_RECALL">
            <summary>
            已请求文件数据，但应继续将其放在远程存储中。不应将其传输回本地存储。该标志供远程存储系统使用。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.Kernel32.FileFlags.FILE_FLAG_OPEN_REPARSE_POINT">
            <summary>
            正常的重定点处理将不会发生；<see cref="M:SpaceCG.WindowsAPI.Kernel32.Kernel32.CreateFile(System.String,System.UInt32,System.UInt32,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)"/> 将尝试打开重新解析点。打开文件后，无论控制重解析点的筛选器是否可运行，都将返回文件句柄。该标志不能与 <see cref="F:SpaceCG.WindowsAPI.Kernel32.CreationDisposition.CREATE_ALWAYS"/> 标志一起使用。如果文件不是重新分析点，则忽略此标志。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.Kernel32.FileFlags.FILE_FLAG_SESSION_AWARE">
            <summary>
            打开文件或设备时具有会话意识。如果未指定此标志，则按会话 0 运行的进程无法打开按会话的设备（例如使用 RemoteFX USB 重定向的设备）。此标志对不在会话0中的调用者无效。仅在以下情况下支持此标志 Windows 的服务器版本。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.Kernel32.FileFlags.FILE_FLAG_POSIX_SEMANTICS">
            <summary>
            访问将根据 POSIX 规则进行。对于支持该命名的文件系统，这包括允许多个文件的名称（大小写不同）。使用此选项时请格外小心，因为为 MS-DOS 或 16位 Windows 编写的应用程序可能无法访问使用此标志创建的文件。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.Kernel32.FileFlags.FILE_FLAG_BACKUP_SEMANTICS">
            <summary>
            正在为备份或还原操作打开或创建文件。当进程具有 SE_BACKUP_NAME 和 SE_RESTORE_NAME 特权时，系统将确保调用进程覆盖文件安全检查。有关更多信息，请参见 更改令牌中的特权。您必须设置此标志以获得目录的句柄。可以将目录句柄而不是文件句柄传递给某些函数。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.Kernel32.FileFlags.FILE_FLAG_DELETE_ON_CLOSE">
            <summary>
            关闭所有句柄（包括指定的句柄以及任何其他打开或重复的句柄）后，将立即删除该文件。如果文件已有打开的句柄，则调用将失败，除非使用 <see cref="F:SpaceCG.WindowsAPI.Kernel32.ShareMode.FILE_SHARE_DELETE"/> 共享模式全部打开了它们 。除非指定了 <see cref="F:SpaceCG.WindowsAPI.Kernel32.ShareMode.FILE_SHARE_DELETE"/>  共享模式，否则随后对文件的打开请求将失败。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.Kernel32.FileFlags.FILE_FLAG_SEQUENTIAL_SCAN">
            <summary>
            访问的目的是从头到尾都是顺序的。系统可以以此为提示来优化文件缓存。如果将使用后读（即反向扫描），则不应使用此标志。如果文件系统不支持缓存的 I/O 和 <see cref="F:SpaceCG.WindowsAPI.Kernel32.FileFlags.FILE_FLAG_NO_BUFFERING"/> ，则此标志无效 。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.Kernel32.FileFlags.FILE_FLAG_RANDOM_ACCESS">
            <summary>
            访问意图是随机的。系统可以以此为提示来优化文件缓存。如果文件系统不支持缓存的 I/O 和 <see cref="F:SpaceCG.WindowsAPI.Kernel32.FileFlags.FILE_FLAG_NO_BUFFERING"/>，则此标志无效 。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.Kernel32.FileFlags.FILE_FLAG_NO_BUFFERING">
            <summary>
            文件或设备正在打开，没有用于数据读写的系统缓存。该标志不影响硬盘缓存或内存映射文件。对于使用 <see cref="F:SpaceCG.WindowsAPI.Kernel32.FileFlags.FILE_FLAG_NO_BUFFERING"/> 标志使用 CreateFile 打开的文件成功进行操作有严格的要求 ，有关详细信息，请参阅 文件缓冲。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.Kernel32.FileFlags.FILE_FLAG_OVERLAPPED">
            <summary>
            正在为异步 I/O 打开或创建文件或设备。当在此句柄上完成后续 I/O 操作时，在 OVERLAPPED 结构中指定的事件 将被设置为信号状态。如果指定了此标志，则该文件可用于同时进行读写操作。如果未指定此标志，则即使读取和写入功能的调用指定了 OVERLAPPED 结构， I/O 操作也会被序列化。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.Kernel32.FileFlags.FILE_FLAG_WRITE_THROUGH">
            <summary>
            写操作将不会通过任何中间缓存，而将直接进入磁盘。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.Kernel32.FileSecurity.SECURITY_ANONYMOUS">
            <summary>
            在匿名模拟级别上模拟客户端。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.Kernel32.FileSecurity.SECURITY_IDENTIFICATION">
            <summary>
            在“身份”模拟级别上模拟客户端。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.Kernel32.FileSecurity.SECURITY_DELEGATION">
            <summary>
            在委托模拟级别上模拟客户。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.Kernel32.FileSecurity.SECURITY_CONTEXT_TRACKING">
            <summary>
            安全跟踪模式是动态的。如果未指定此标志，则安全跟踪模式为静态。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.Kernel32.FileSecurity.SECURITY_EFFECTIVE_ONLY">
            <summary>
            服务器仅可使用客户端安全上下文的已启用方面。如果未指定此标志，则客户端安全上下文的所有方面均可用。这使客户端可以限制服务器在模拟客户端时可以使用的组和特权。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.Kernel32.FileSecurity.SECURITY_IMPERSONATION">
            <summary>
            在模拟级别模拟客户。如果未与 <see cref="!:SECURITY_SQOS_PRESENT"/> 标志一起指定其他标志，则这是默认行为。
            </summary>
        </member>
        <member name="T:SpaceCG.WindowsAPI.Kernel32.SECURITY_ATTRIBUTES">
            <summary>
            包含安全描述符的对象，并指定通过指定该结构中检索所述手柄是否是继承。此结构为由各种功能（例如 <see cref="M:SpaceCG.WindowsAPI.Kernel32.Kernel32.CreateFile(System.String,System.UInt32,System.UInt32,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)"/>，<see cref="!:Kernel32.CreatePipe"/>，<see cref="!:Kernel32.CreateProcess"/>，<see cref="!:Kernel32.RegCreateKeyEx"/> 或 <see cref="!:Kernel32.RegSaveKeyEx"/>) 创建的对象提供安全设置。
            <para>SECURITY_ATTRIBUTES, *PSECURITY_ATTRIBUTES, *LPSECURITY_ATTRIBUTES</para>
            <para>参考：https://docs.microsoft.com/zh-cn/previous-versions/windows/desktop/legacy/aa379560(v=vs.85) </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.Kernel32.SECURITY_ATTRIBUTES.nLength">
            <summary>
            此结构的大小（以字节为单位）。将此值设置为 <see cref="F:SpaceCG.WindowsAPI.Kernel32.SECURITY_ATTRIBUTES.Size"/> 结构的大小。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.Kernel32.SECURITY_ATTRIBUTES.lpSecurityDescriptor">
            <summary>
            指向 <see cref="T:SpaceCG.WindowsAPI.Kernel32.SECURITY_DESCRIPTOR"/> 结构的指针，该结构控制对对象的访问。如果此成员的值为 NULL，则为对象分配与调用过程的访问令牌关联的默认安全描述符。
            <para>这与通过分配 NULL 自由访问控制列表（DACL）向所有人授予访问权限不同。默认情况下，进程的访问令牌中的默认 DACL 只允许访问该访问令牌所代表的用户。</para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.Kernel32.SECURITY_ATTRIBUTES.bInheritHandle">
            <summary>
            一个布尔值，它指定在创建新进程时是否继承返回的句柄。如果此成员为 TRUE，则新进程将继承该句柄。
            </summary>
        </member>
        <member name="M:SpaceCG.WindowsAPI.Kernel32.SECURITY_ATTRIBUTES.Create">
            <summary>
            Create new SECURITY_ATTRIBUTES
            </summary>
            <returns></returns>
        </member>
        <member name="F:SpaceCG.WindowsAPI.Kernel32.SECURITY_ATTRIBUTES.Size">
            <summary>
            <see cref="T:SpaceCG.WindowsAPI.Kernel32.SECURITY_ATTRIBUTES"/> 结构体大小，以字节为单位
            </summary>
        </member>
        <member name="M:SpaceCG.WindowsAPI.Kernel32.SECURITY_ATTRIBUTES.ToString">
            <summary>
            @ToString()
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpaceCG.WindowsAPI.Kernel32.ACL">
            <summary>
            
            </summary>
        </member>
        <member name="T:SpaceCG.WindowsAPI.Kernel32.SECURITY_DESCRIPTOR">
            <summary>
            包含与对象相关联的安全信息。应用程序使用此结构来设置和查询对象的安全状态。(SECURITY_DESCRIPTOR, *PISECURITY_DESCRIPTOR)
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winnt/ns-winnt-security_descriptor?redirectedfrom=MSDN </para>
            </summary>
        </member>
        <member name="T:SpaceCG.WindowsAPI.Kernel32.FmFlags">
            <summary>
            <see cref="M:SpaceCG.WindowsAPI.Kernel32.Kernel32.FormatMessage(SpaceCG.WindowsAPI.Kernel32.FmFlags,System.IntPtr,System.UInt32,System.UInt32,System.String@,System.UInt32,System.IntPtr)"/> 函数参数 dwFlags 一个或多个值。
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-formatmessage </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.Kernel32.FmFlags.FORMAT_MESSAGE_NONE">
            <summary>
            没有输出线宽限制。该函数将消息定义文本中的换行符存储到输出缓冲区中。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.Kernel32.FmFlags.FORMAT_MESSAGE_ALLOCATE_BUFFER">
            <summary>
            该函数分配一个足以容纳格式化消息的缓冲区，并在 lpBuffer 指定的地址处放置一个指向已分配缓冲区的指针 的 lpBuffer 参数是一个指向 LPTSTR ; 您必须将指针强制转换为 LPTSTR。所述 n 大小 参数指定的最小数目 TCHARS 分配用于输出消息缓冲器。 
            <para>当不再需要缓冲区时，调用者应使用 <see cref="!:Kernel32.LocalFree"/> 函数释放缓冲区。如果格式化消息的长度超过 128K 字节，则 <see cref="M:SpaceCG.WindowsAPI.Kernel32.Kernel32.FormatMessage(SpaceCG.WindowsAPI.Kernel32.FmFlags,System.IntPtr,System.UInt32,System.UInt32,System.String@,System.UInt32,System.IntPtr)"/> 将失败，随后对 <see cref="!:Kernel32.GetLastError"/> 的调用 将返回 ERROR_MORE_DATA。</para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.Kernel32.FmFlags.FORMAT_MESSAGE_IGNORE_INSERTS">
            <summary>
            消息定义中的插入序列将被忽略，并原样传递到输出缓冲区。该标志对于获取消息以供以后格式化很有用。如果设置了此标志，则 Arguments 参数将被忽略。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.Kernel32.FmFlags.FORMAT_MESSAGE_FROM_STRING">
            <summary>
            所述 lpSource 参数是一个指向包含一个消息定义一个空终止字符串。消息定义可以包含插入序列，就像消息表资源中的消息文本可能一样。该标志不能与 <see cref="F:SpaceCG.WindowsAPI.Kernel32.FmFlags.FORMAT_MESSAGE_FROM_HMODULE"/> 或 <see cref="F:SpaceCG.WindowsAPI.Kernel32.FmFlags.FORMAT_MESSAGE_FROM_SYSTEM"/> 一起使用 。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.Kernel32.FmFlags.FORMAT_MESSAGE_FROM_HMODULE">
            <summary>
            所述 lpSource 参数是包含该消息表资源（多个），以搜寻模块句柄。如果此 lpSource 句柄为 NULL，则将搜索当前进程的应用程序映像文件。该标志不能与 <see cref="F:SpaceCG.WindowsAPI.Kernel32.FmFlags.FORMAT_MESSAGE_FROM_STRING"/> 一起使用 。
            <para>如果模块没有消息表资源，则该函数将失败，并显示 <see cref="!:ERROR_RESOURCE_TYPE_NOT_FOUND"/>。</para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.Kernel32.FmFlags.FORMAT_MESSAGE_FROM_SYSTEM">
            <summary>
            该功能应在系统消息表资源中搜索所请求的消息。如果使用 <see cref="F:SpaceCG.WindowsAPI.Kernel32.FmFlags.FORMAT_MESSAGE_FROM_HMODULE"/> 指定了此标志，则如果在 lpSource 指定的模块中找不到消息，该函数将搜索系统消息表。该标志不能与 <see cref="F:SpaceCG.WindowsAPI.Kernel32.FmFlags.FORMAT_MESSAGE_FROM_STRING"/> 一起使用。
            <para>如果指定了此标志，则应用程序可以传递 <see cref="!:Kernel32.GetLastError"/> 函数的结果 以检索系统定义的错误的消息文本。</para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.Kernel32.FmFlags.FORMAT_MESSAGE_ARGUMENT_ARRAY">
            <summary>
            的参数参数不是 va_list 的 结构，但它是一个指针，它指向表示参数值的数组。
            <para>该标志不能与 64 位整数值一起使用。如果使用的是64位整数，则必须使用 va_list 结构。</para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.Kernel32.FmFlags.FORMAT_MESSAGE_MAX_WIDTH_MASK">
            <summary>
            该函数将忽略消息定义文本中的常规换行符。该函数将消息定义文本中的硬编码换行符存储到输出缓冲区中。该函数不会产生新的换行符。
            </summary>
        </member>
        <member name="T:SpaceCG.WindowsAPI.WindowAPI">
            <summary>
            DLL 库功能/主题
            </summary>
        </member>
        <member name="T:SpaceCG.WindowsAPI.WindowAPIExtension">
            <summary>
            xxx 库，扩展常用/通用，功能/函数，扩展示例，以及使用方式
            </summary>
        </member>
        <member name="T:SpaceCG.WindowsAPI.User32.FlashFlags">
            <summary>
            <see cref="F:SpaceCG.WindowsAPI.User32.FLASHINFO.dwFlags"/> 字段的值之一或值组合
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.FlashFlags.FLASHW_STOP">
            <summary>
            停止闪烁。系统将窗口还原到其原始状态。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.FlashFlags.FLASHW_CAPTION">
            <summary>
            刷新窗口标题。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.FlashFlags.FLASHW_TRAY">
            <summary>
            刷新任务栏按钮。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.FlashFlags.FLASHW_ALL">
            <summary>
            同时闪烁窗口标题和任务栏按钮。这等效于设置 <see cref="F:SpaceCG.WindowsAPI.User32.FlashFlags.FLASHW_CAPTION"/> | <see cref="F:SpaceCG.WindowsAPI.User32.FlashFlags.FLASHW_TRAY"/> 标志。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.FlashFlags.FLASHW_TIMER">
            <summary>
            连续闪烁，直到设置了 <see cref="F:SpaceCG.WindowsAPI.User32.FlashFlags.FLASHW_STOP"/> 标志。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.FlashFlags.FLASHW_TIMERNOFG">
            <summary>
            持续闪烁直到窗口到达前台。
            </summary>
        </member>
        <member name="T:SpaceCG.WindowsAPI.User32.AwFlags">
            <summary>
            <see cref="M:SpaceCG.WindowsAPI.User32.User32.AnimateWindow(System.IntPtr,System.UInt32,SpaceCG.WindowsAPI.User32.AwFlags)"/> 函数参数 dwFlags 的值之一或值组合
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-animatewindow </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.AwFlags.AW_HOR_POSITIVE">
            <summary>
            从左到右对窗口进行动画处理。此标志可与滚动或幻灯片动画一起使用。与 <see cref="F:SpaceCG.WindowsAPI.User32.AwFlags.AW_CENTER"/> 或 <see cref="F:SpaceCG.WindowsAPI.User32.AwFlags.AW_BLEND"/> 一起使用时将被忽略。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.AwFlags.AW_HOR_NEGATIVE">
            <summary>
            从右到左对窗口进行动画处理。此标志可与滚动或幻灯片动画一起使用。与 <see cref="F:SpaceCG.WindowsAPI.User32.AwFlags.AW_CENTER"/> 或 <see cref="F:SpaceCG.WindowsAPI.User32.AwFlags.AW_BLEND"/> 一起使用时将被忽略。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.AwFlags.AW_VER_POSITIVE">
            <summary>
            从上到下对窗口进行动画处理。此标志可与滚动或幻灯片动画一起使用。与 <see cref="F:SpaceCG.WindowsAPI.User32.AwFlags.AW_CENTER"/> 或 <see cref="F:SpaceCG.WindowsAPI.User32.AwFlags.AW_BLEND"/> 一起使用时将被忽略。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.AwFlags.AW_VER_NEGATIVE">
            <summary>
            从底部到顶部对窗口进行动画处理。此标志可与滚动或幻灯片动画一起使用。与 <see cref="F:SpaceCG.WindowsAPI.User32.AwFlags.AW_CENTER"/> 或 <see cref="F:SpaceCG.WindowsAPI.User32.AwFlags.AW_BLEND"/> 一起使用时将被忽略。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.AwFlags.AW_CENTER">
            <summary>
            如果使用 <see cref="F:SpaceCG.WindowsAPI.User32.AwFlags.AW_HIDE"/>，则使窗口看起来向内折叠；如果不使用 <see cref="F:SpaceCG.WindowsAPI.User32.AwFlags.AW_HIDE"/>，则使窗口向外折叠。各种方向标记无效。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.AwFlags.AW_HIDE">
            <summary>
            隐藏窗口。默认情况下，显示窗口。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.AwFlags.AW_ACTIVATE">
            <summary>
            激活窗口。不要将此值与 <see cref="F:SpaceCG.WindowsAPI.User32.AwFlags.AW_HIDE"/> 一起使用。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.AwFlags.AW_SLIDE">
            <summary>
            使用幻灯片动画。默认情况下，使用滚动动画。与 <see cref="F:SpaceCG.WindowsAPI.User32.AwFlags.AW_CENTER"/> 一起使用时，将忽略此标志。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.AwFlags.AW_BLEND">
            <summary>
            使用淡入淡出效果。仅当 hwnd 是顶级窗口时，才可以使用此标志。
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:SpaceCG.WindowsAPI.User32.FLASHINFO" -->
        <member name="F:SpaceCG.WindowsAPI.User32.FLASHINFO.cbSize">
            <summary>
            结构的大小，以字节为单位。
            <para>等于 (uint)Marshal.SizeOf(typeof(FLASHWINFO)); </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.FLASHINFO.hWnd">
            <summary>
            要刷新的窗口的句柄。该窗口可以打开或最小化。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.FLASHINFO.dwFlags">
            <summary>
            闪光灯状态
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.FLASHINFO.uCount">
            <summary>
            刷新窗口的次数。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.FLASHINFO.dwTimeout">
            <summary>
            刷新窗口的速率，以毫秒为单位。如果 dwTimeout 为零，则该函数使用默认的光标闪烁速率。
            </summary>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.FLASHINFO.#ctor(System.IntPtr)">
            <summary>
            FLASHWINFO 结构体
            </summary>
            <param name="hwnd">要刷新的窗口的句柄。该窗口可以打开或最小化。</param>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.FLASHINFO.Size">
            <summary>
            <see cref="!:FLASHWINFO"/> 结构体大字，以字节为单位。
            </summary>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.FLASHINFO.ToString">
            <inheritdoc />
        </member>
        <member name="T:SpaceCG.WindowsAPI.User32.User32">
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            user32.dll 常用/实用 函数
            <para>注意：<see cref="T:System.IntPtr"/> 类型数据，在 32 位软件上是占 4 个字节，在 64 位软件上是占 8 个字节</para>
            <para><see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/> 或 <see cref="M:System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error"/>;  new WindowInteropHelper(Window).Handle; <see cref="M:System.Windows.Input.KeyInterop.KeyFromVirtualKey(System.Int32)"/></para>
            <para>#ifdef UNICODE #define Function FunctionA #else #define Function FunctionW #endif</para>
            <para>如果窗口类是使用 ANSI 版本的 RegisterClass（RegisterClassA）注册的，则窗口的字符集是 ANSI。如果窗口类是使用 Unicode 版本的 RegisterClass（RegisterClassW）注册的，则窗口的字符集为 Unicode。</para>
            <para>LPCTSTR，LPWSTR, PTSTR, LPTSTR，L表示long指针，P表示这是一个指针，T表示 _T宏 这个宏用来表示你的字符是否使用 UNICODE, 如果你的程序定义了 UNICODE 或者其他相关的宏，那么这个字符或者字符串将被作为 UNICODE 字符串，否则就是标准的 ANSI 字符串。C表示是一个常量const。STR表示这个变量是一个字符串。例如：LPTSTR == ref string;</para>
            <para>参考： https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/  头文件目录：C:/Program Files (x86)/Windows Kits/10/Include/10.0.18362.0/um </para>
            <para>本机互操作性：https://docs.microsoft.com/zh-cn/dotnet/standard/native-interop/ </para>
            </summary>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.FlashWindow(System.IntPtr,System.Boolean)">
            <summary>
            闪烁指定的窗口一次。它不会更改窗口的活动状态。
            <para>若要将窗口刷新指定的次数，请使用 <see cref="M:SpaceCG.WindowsAPI.User32.User32.FlashWindowEx(SpaceCG.WindowsAPI.User32.FLASHINFO@)"/> 函数。</para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-flashwindow </para>
            </summary>
            <param name="hWnd">要刷新的窗口的句柄。窗口可以打开或最小化。</param>
            <param name="bInvert">如果此参数为 TRUE，则窗口从一种状态闪烁到另一种状态。如果为 FALSE，则窗口将返回其原始状态（活动或不活动）。
            <para>当最小化应用程序且此参数为 TRUE 时，任务栏窗口按钮将闪烁活动/不活动。如果为 FALSE，则任务栏窗口按钮将不活动地闪烁，这意味着它不会更改颜色。它会闪烁，就像正在重绘一样，但不会向用户提供视觉上的反转提示。</para>
            </param>
            <returns>返回值指定在调用FlashWindow函数之前窗口的状态 。如果在调用之前将窗口标题绘制为活动窗口，则返回值为非零。否则，返回值为零。</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.FlashWindowEx(SpaceCG.WindowsAPI.User32.FLASHINFO@)">
            <summary>
            闪烁指定的窗口。它不会更改窗口的活动状态。
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-flashwindowex </para>
            </summary>
            <param name="pfwi">[PFLASHWINFO] 指向 <see cref="T:SpaceCG.WindowsAPI.User32.FLASHINFO"/> 结构的指针</param>
            <returns>返回值指定在调用 <see cref="M:SpaceCG.WindowsAPI.User32.User32.FlashWindowEx(SpaceCG.WindowsAPI.User32.FLASHINFO@)"/> 函数之前窗口的状态 。如果在调用之前将窗口标题绘制为活动窗口，则返回值为非零。否则，返回值为零。</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.AnimateWindow(System.IntPtr,System.UInt32,SpaceCG.WindowsAPI.User32.AwFlags)">
            <summary>
            在显示或隐藏窗口时使您产生特殊效果。动画有四种类型：滚动，滑动，折叠或展开以及 alpha 混合淡入。
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-animatewindow </para>
            </summary>
            <param name="hWnd">窗口动画的句柄。调用线程必须拥有此窗口。</param>
            <param name="dwTime">播放动画所需的时间（以毫秒为单位）。通常，动画播放需要200毫秒。</param>
            <param name="dwFlags">动画的类型 <see cref="T:SpaceCG.WindowsAPI.User32.AwFlags"/></param>
            <returns>如果函数成功，则返回值为非零。如果函数失败，则返回值为零。获取扩展的错误信息，请调用 <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/> 或 <see cref="M:System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error"/> 函数。</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.ShutdownBlockReasonCreate(System.IntPtr,System.String)">
            <summary>
            表示无法关闭系统，并设置启动系统关闭后要显示给用户的原因字符串。
            <para>只能从创建由 hWnd 参数指定的窗口的线程中调用此函数。否则，函数将失败，最后的错误代码是 ERROR_ACCESS_DENIED。</para>
            <para>应用程序在开始无法中断的操作（例如刻录 CD 或 DVD）时应调用此函数。操作完成后，请调用 <see cref="M:SpaceCG.WindowsAPI.User32.User32.ShutdownBlockReasonDestroy(System.IntPtr)"/> 函数以指示可以关闭系统。</para>
            <para>由于用户通常在系统关闭时很着急，因此他们可能只花几秒钟的时间查看系统显示的关闭原因。因此，重要的是您的原因字符串必须简短明了。例如，“正在进行CD刻录。” 优于“此应用程序阻止系统关闭，因为正在进行CD刻录。请勿关闭。”</para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-shutdownblockreasoncreate </para>
            </summary>
            <param name="hWnd">应用程序主窗口的句柄。</param>
            <param name="pwszReason">[LPCWSTR] 应用程序必须阻止系统关闭的原因。该字符串将在显示 MAX_STR_BLOCKREASON 个字符后被截断。</param>
            <returns>如果调用成功，则返回值为非零。如果调用失败，则返回值为零。要获取扩展的错误信息，请调用 <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/> 或 <see cref="M:System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error"/>。</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.ShutdownBlockReasonDestroy(System.IntPtr)">
            <summary>
            表示可以关闭系统并释放原因字符串。
            <para>只能从创建由hWnd参数指定的窗口的线程中调用此函数。否则，函数将失败，最后的错误代码是 ERROR_ACCESS_DENIED。</para>
            <para>如果先前已通过 <see cref="M:SpaceCG.WindowsAPI.User32.User32.ShutdownBlockReasonCreate(System.IntPtr,System.String)"/> 函数阻止了系统关闭，则此函数将释放原因字符串。否则，此功能为无操作。</para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-shutdownblockreasondestroy </para>
            </summary>
            <param name="hWnd">应用程序主窗口的句柄。</param>
            <returns>如果调用成功，则返回值为非零。如果调用失败，则返回值为零。要获取扩展的错误信息，请调用 <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/> 或 <see cref="M:System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error"/>。</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.GetDpiForSystem">
            <summary>
            返回系统 DPI。
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-getdpiforsystem </para>
            </summary>
            <returns>返回 DPI 值</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.GetDpiForWindow(System.IntPtr)">
            <summary>
            返回关联窗口的每英寸点数（dpi）值。
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-getdpiforwindow </para>
            </summary>
            <param name="hWnd"></param>
            <returns>窗口的 DPI 取决于窗口的 DPI_AWARENESS。无效的 hwnd 值将导致返回值为0。</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.GetCursor">
            <summary>
            检索当前光标的句柄。
            <para>要获取有关全局游标的信息，即使它不是当前线程所有，也可以使用 <see cref="M:SpaceCG.WindowsAPI.User32.User32.GetCursorInfo(SpaceCG.WindowsAPI.User32.CURSORINFO@)"/> </para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-getcursor </para>
            </summary>
            <returns>返回值 (HCURSOR) 是当前游标的句柄。如果没有游标，则返回值为 NULL。</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.GetCursorInfo(SpaceCG.WindowsAPI.User32.CURSORINFO@)">
            <summary>
            检索有关全局游标的信息。
            <para>CURSORINFO pci = new CURSORINFO(){ cbSize = Marshal.SizeOf(typeof(CURSORINFO)) };</para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-getcursorinfo </para>
            </summary>
            <param name="pci">[PCURSORINFO] 指向接收信息的 <see cref="T:SpaceCG.WindowsAPI.User32.CURSORINFO"/> 结构的指针。请注意，在调用此函数之前，必须将 cbSize 成员设置为 sizeof(CURSORINFO)。</param>
            <returns>如果函数成功，则返回值为非零。如果函数失败，则返回值为零。要获取扩展的错误信息，请调用 <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/> 或 <see cref="M:System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error"/>。</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.GetCursorPos(SpaceCG.WindowsAPI.POINT@)">
            <summary>
            检索鼠标光标在屏幕坐标中的位置。
            <para>光标位置始终在屏幕坐标中指定，并且不受包含光标的窗口的映射模式的影响。调用过程必须对窗口站具有 WINSTA_READATTRIBUTES 访问权限。</para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-getcursorpos </para>
            </summary>
            <param name="lpPoint">[LPPOINT]指向 <see cref="T:SpaceCG.WindowsAPI.POINT"/> 结构的指针，该结构接收光标的屏幕坐标。</param>
            <returns>如果成功返回非零，否则返回零。要获取扩展的错误信息，请调用 <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/> 或 <see cref="M:System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error"/>。</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.GetKeyboardState(System.Byte[])">
            <summary>
            将虚拟键的状态复制到指定的缓冲区。
            <para>要检索单个键的状态信息，请使用 <see cref="M:SpaceCG.WindowsAPI.User32.User32.GetKeyState(System.Int32)"/> 函数。若要检索单个键的当前状态，而不管是否已从消息队列中检索到相应的键盘消息，请使用 <see cref="M:SpaceCG.WindowsAPI.User32.User32.GetAsyncKeyState(System.Int32)"/> 函数。</para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-getkeyboardstate </para>
            </summary>
            <param name="lpKeyState">[PBYTE]接收每个虚拟密钥的状态数据的256字节数组。
            <para>函数返回时，lpKeyState 参数指向的数组的每个成员都 包含虚拟键的状态数据。</para>
            <para>如果高位为1，则按键按下；否则为0。否则，它会上升。如果键是切换键（例如CAPS LOCK），则切换键时低位为1；如果取消切换，则低位为0。对于非拨动键，低位无意义。</para>
            <para>切换键在打开时被称为切换键。切换键时，键盘上的切换键指示灯（如果有）将亮起；如果不切换键，则指示灯将熄灭。</para>
            </param>
            <returns>如果函数成功，则返回值为非零。如果函数失败，则返回值为零。要获取扩展的错误信息，请调用 <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/> 或 <see cref="M:System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error"/>。</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.GetKeyState(System.Int32)">
            <summary>
            检索指定虚拟键的状态。状态指定按键是向上，向下还是切换（打开，关闭-每次按下按键时交替显示）。
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-getkeystate </para>
            </summary>
            <param name="nVirtKey">虚拟键 <see cref="T:SpaceCG.WindowsAPI.User32.VirtualKeyCode"/>。如果所需的虚拟键是字母或数字（A到Z，a到z或0到9）， 则必须将 nVirtKey 设置为该字符的 ASCII 值。对于其他密钥，它必须是虚拟密钥代码。</param>
            <returns>返回值指定指定虚拟键的状态，如下所示：
            <para>如果高位为1，则按键按下；否则为0。否则，它会上升。</para>
            <para>如果低位为1，则切换键。如果打开了一个键（例如 CAPS LOCK 键），则会对其进行切换。如果低位为0，则此键处于关闭状态且不切换。切换键时，键盘上的切换键指示灯（如果有）将亮起，而当取消切换键时，其指示灯将熄灭。</para>
            </returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.GetKeyState(SpaceCG.WindowsAPI.User32.VirtualKeyCode)">
            <summary>
            检索指定虚拟键的状态。状态指定按键是向上，向下还是切换（打开，关闭-每次按下按键时交替显示）。
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-getkeystate </para>
            </summary>
            <param name="nVirtKey">虚拟键 <see cref="T:SpaceCG.WindowsAPI.User32.VirtualKeyCode"/>。如果所需的虚拟键是字母或数字（A到Z，a到z或0到9）， 则必须将 nVirtKey 设置为该字符的 ASCII 值。对于其他密钥，它必须是虚拟密钥代码。</param>
            <returns>返回值指定指定虚拟键的状态，如下所示：
            <para>如果高位为1，则按键按下；否则为0。否则，它会上升。</para>
            <para>如果低位为1，则切换键。如果打开了一个键（例如 CAPS LOCK 键），则会对其进行切换。如果低位为0，则此键处于关闭状态且不切换。切换键时，键盘上的切换键指示灯（如果有）将亮起，而当取消切换键时，其指示灯将熄灭。</para>
            </returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.GetAsyncKeyState(System.Int32)">
            <summary>
            确定在调用函数时按键是向上还是向下，以及在先前调用 <see cref="M:SpaceCG.WindowsAPI.User32.User32.GetAsyncKeyState(System.Int32)"/> 之后是否按下了该键。
            <para>该 <see cref="M:SpaceCG.WindowsAPI.User32.User32.GetAsyncKeyState(System.Int32)"/> 功能可与鼠标按钮。但是，它检查物理鼠标按钮的状态，而不是检查物理按钮映射到的逻辑鼠标按钮的状态。</para>
            <para>例如，调用 <see cref="M:SpaceCG.WindowsAPI.User32.User32.GetAsyncKeyState(System.Int32)"/>(VK_LBUTTON) 始终返回物理鼠标左键的状态，而不管它是映射到逻辑鼠标左键还是逻辑右键。您可以通过调用确定系统当前的物理鼠标按钮到逻辑鼠标按钮的映射 <see cref="!:GetSystemMetrics"/>(SM_SWAPBUTTON)。</para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-getasynckeystate </para>
            </summary>
            <param name="vKey">虚拟密钥代码 <see cref="T:SpaceCG.WindowsAPI.User32.VirtualKeyCode"/>，您可以使用左和右区分常数来指定某些键</param>
            <returns>如果函数成功，则返回值指定自上次调用 <see cref="M:SpaceCG.WindowsAPI.User32.User32.GetAsyncKeyState(System.Int32)"/> 以来是否按下了该键，以及该键当前处于向上还是向下。
            <para>如果设置了最高有效位，则该键处于按下状态；如果设置了最低有效位，则在上一次调用 <see cref="M:SpaceCG.WindowsAPI.User32.User32.GetAsyncKeyState(System.Int32)"/> 之后按下了该键。但是，您不应该依赖于此最后的行为。</para>
            <para>在以下情况下，返回值为零：</para>
            <para>1.当前桌面不是活动桌面</para>
            <para>2.前台线程属于另一个进程，并且桌面不允许挂钩或日志记录。</para>
            </returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.GetAsyncKeyState(SpaceCG.WindowsAPI.User32.VirtualKeyCode)">
            <summary>
            确定在调用函数时按键是向上还是向下，以及在先前调用 <see cref="M:SpaceCG.WindowsAPI.User32.User32.GetAsyncKeyState(System.Int32)"/> 之后是否按下了该键。
            <para>该 <see cref="M:SpaceCG.WindowsAPI.User32.User32.GetAsyncKeyState(System.Int32)"/> 功能可与鼠标按钮。但是，它检查物理鼠标按钮的状态，而不是检查物理按钮映射到的逻辑鼠标按钮的状态。</para>
            <para>例如，调用 <see cref="M:SpaceCG.WindowsAPI.User32.User32.GetAsyncKeyState(System.Int32)"/>(VK_LBUTTON) 始终返回物理鼠标左键的状态，而不管它是映射到逻辑鼠标左键还是逻辑右键。您可以通过调用确定系统当前的物理鼠标按钮到逻辑鼠标按钮的映射 <see cref="!:GetSystemMetrics"/>(SM_SWAPBUTTON)。</para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-getasynckeystate </para>
            </summary>
            <param name="vKey">虚拟密钥代码 <see cref="T:SpaceCG.WindowsAPI.User32.VirtualKeyCode"/>，您可以使用左和右区分常数来指定某些键</param>
            <returns>如果函数成功，则返回值指定自上次调用 <see cref="M:SpaceCG.WindowsAPI.User32.User32.GetAsyncKeyState(System.Int32)"/> 以来是否按下了该键，以及该键当前处于向上还是向下。
            <para>如果设置了最高有效位，则该键处于按下状态；如果设置了最低有效位，则在上一次调用 <see cref="M:SpaceCG.WindowsAPI.User32.User32.GetAsyncKeyState(System.Int32)"/> 之后按下了该键。但是，您不应该依赖于此最后的行为。</para>
            <para>在以下情况下，返回值为零：</para>
            <para>1.当前桌面不是活动桌面</para>
            <para>2.前台线程属于另一个进程，并且桌面不允许挂钩或日志记录。</para>
            </returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.ToAscii(SpaceCG.WindowsAPI.User32.VirtualKeyCode,System.UInt32,System.Byte[],System.Byte[],System.UInt32)">
            <summary>
            将指定的虚拟键代码和键盘状态转换为相应的一个或多个字符。该功能使用输入语言和键盘布局手柄识别的物理键盘布局来翻译代码。
            <para>提供给 ToAscii 函数的参数可能不足以转换虚拟键代码，因为先前的死键存储在键盘布局中。</para>
            <para>通常，ToAscii 基于虚拟键代码执行转换。但是，在某些情况下，uScanCode 参数的第 15 位 可用于区分按键和释放按键。扫描代码用于翻译 ALT + 数字键组合。</para>
            <para>尽管 NUM LOCK 是会影响键盘行为的切换键，但是 ToAscii 会忽略 lpKeyState（VK_NUMLOCK）的切换设置（低位）， 因为 仅 uVirtKey 参数足以将光标移动键（VK_HOME，VK_INSERT等）与数字键（VK_DECIMAL，VK_NUMPAD0 - VK_NUMPAD9）。</para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-toascii </para>
            </summary>
            <param name="uVirtKey">要转换的虚拟密钥代码 <see cref="T:SpaceCG.WindowsAPI.User32.VirtualKeyCode"/></param>
            <param name="uScanCode">要转换的密钥的硬件扫描代码。如果按下键（未按下），则此值的高位被设置。</param>
            <param name="lpbKeyState">[const BYTE *] 指向包含当前键盘状态的 256 字节数组的指针。数组中的每个元素（字节）都包含一个键的状态。如果设置了字节的高位，则按键被按下（按下）。低位（如果已设置）指示按键已打开。在此功能中，仅 CAPS LOCK 键的切换位相关。NUM LOCK 和 SCROLL LOCK 键的切换状态将被忽略。</param>
            <param name="lpChar">接收翻译后的一个或多个字符的缓冲区。</param>
            <param name="uFlags">如果菜单处于活动状态，则此参数必须为1，否则为0。</param>
            <returns>如果指定的键是死键，则返回值为负。否则，它是以下值之一。
            <para>0.指定的虚拟键没有针对键盘当前状态的转换。</para>
            <para>1.一个字符被复制到缓冲区。</para>
            <para>2.两个字符被复制到缓冲区。当无法将存储在键盘布局中的死键字符（重音符或变音符）与指定的虚拟键组成单个字符时，通常会发生这种情况。</para>
            </returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.MapVirtualKey(System.UInt32,SpaceCG.WindowsAPI.User32.MapVKType)">
            <summary>
            将虚拟键代码转换（映射）为扫描代码或字符值，或将扫描代码转换为虚拟键代码。
            <para>要指定用于翻译指定代码的键盘布局的句柄，请使用 <see cref="!:MapVirtualKeyEx"/> 函数。</para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-mapvirtualkeya </para>
            </summary>
            <param name="uCode"><see cref="T:SpaceCG.WindowsAPI.User32.VirtualKeyCode"/> 或扫描代码。如何解释此值取决于 uMapType 参数的值。</param>
            <param name="uMapType">参数的值取决于 uCode 参数的值 <see cref="T:SpaceCG.WindowsAPI.User32.MapVKType"/></param>
            <returns>返回值可以是扫描代码，虚拟键代码或字符值，具体取决于 uCode 和 uMapType 的值。如果没有转换，则返回值为零。</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.GetInputState">
            <summary>
            确定在调用线程的消息队列中是否有鼠标按钮或键盘消息。
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-getinputstate </para>
            </summary>
            <returns>如果队列包含一个或多个新的鼠标按钮或键盘消息，则返回值为非零。如果队列中没有新的鼠标按钮或键盘消息，则返回值为零。</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.SetWindowsHookEx(SpaceCG.WindowsAPI.User32.HookType,SpaceCG.WindowsAPI.User32.HookProc,System.IntPtr,System.UInt32)">
            <summary>
            将应用程序定义的挂钩过程安装到挂钩链中。您将安装一个挂钩过程来监视系统中的某些类型的事件。这些事件与特定线程或与调用线程在同一桌面上的所有线程相关联。
            <para>示例：当前APP:SetWindowsHookEx(idHook, HookProc, IntPtr.Zero, Kernel32.GetCurrentThreadId()); 全局:SetWindowsHookEx(idHook, HookProc, Process.GetCurrentProcess().MainModule.BaseAddress, 0);</para>
            <para>在终止之前，应用程序必须调用 <see cref="M:SpaceCG.WindowsAPI.User32.User32.UnhookWindowsHookEx(System.IntPtr)"/> 函数以释放与该挂钩关联的系统资源。</para>
            <para>调用 <see cref="M:SpaceCG.WindowsAPI.User32.User32.CallNextHookEx(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)"/> 函数链接到下一个挂钩过程是可选的，但强烈建议这样做；否则，其他已安装钩子的应用程序将不会收到钩子通知，因此可能会出现不正确的行为。除非绝对需要防止其他应用程序看到该通知，否则应调用 <see cref="M:SpaceCG.WindowsAPI.User32.User32.CallNextHookEx(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)"/>。</para>
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setwindowshookexa </para>
            <para>示例：https://docs.microsoft.com/zh-cn/windows/win32/winmsg/using-hooks </para>
            <para>更多钩子函数：https://docs.microsoft.com/zh-cn/windows/win32/winmsg/hook-functions </para>
            </summary>
            <param name="idHook">要安装的挂钩过程的类型 <see cref="T:SpaceCG.WindowsAPI.User32.HookType"/></param>
            <param name="lpfn">指向钩子过程的指针。如果 dwThreadId 参数为零或指定由其他进程创建的线程的标识符，则 lpfn 参数必须指向 DLL 中的挂钩过程。否则，lpfn 可以指向与当前进程关联的代码中的挂钩过程。</param>
            <param name="hInstance">DLL 的句柄，其中包含由 lpfn 参数指向的挂钩过程。所述 HMOD 参数必须设置为 NULL，如果 dwThreadId 参数指定由当前进程，并且如果钩子程序是与当前过程相关联的所述代码中创建的线程。</param>
            <param name="threadId">挂钩过程将与之关联的线程的标识符。对于桌面应用程序，如果此参数为零，则挂钩过程与与调用线程在同一桌面上运行的所有现有线程相关联。</param>
            <returns>如果函数成功，则返回值是挂钩过程的句柄。如果函数失败，则返回值为NULL。要获取扩展的错误信息，请调用 <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/> 或 <see cref="M:System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error"/>。</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.UnhookWindowsHookEx(System.IntPtr)">
            <summary>
            删除通过 <see cref="M:SpaceCG.WindowsAPI.User32.User32.SetWindowsHookEx(SpaceCG.WindowsAPI.User32.HookType,SpaceCG.WindowsAPI.User32.HookProc,System.IntPtr,System.UInt32)"/> 函数安装在挂钩链中的挂钩过程。
            <para>即使在 <see cref="M:SpaceCG.WindowsAPI.User32.User32.UnhookWindowsHookEx(System.IntPtr)"/> 返回之后，该挂钩过程也可以处于被另一个线程调用的状态。如果没有同时调用该挂钩过程，则在 <see cref="M:SpaceCG.WindowsAPI.User32.User32.UnhookWindowsHookEx(System.IntPtr)"/> 返回之前，立即删除该挂钩过程。</para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-unhookwindowshookex </para>
            <para>更多钩子函数：https://docs.microsoft.com/zh-cn/windows/win32/winmsg/hook-functions </para>
            </summary>
            <param name="hhk">钩子的手柄将被卸下。此参数是通过先前调用 <see cref="M:SpaceCG.WindowsAPI.User32.User32.SetWindowsHookEx(SpaceCG.WindowsAPI.User32.HookType,SpaceCG.WindowsAPI.User32.HookProc,System.IntPtr,System.UInt32)"/> 获得的挂钩句柄。</param>
            <returns>如果函数成功，则返回值为非零。如果函数失败，则返回值为零。要获取扩展的错误信息，请调用 <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/> 或 <see cref="M:System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error"/>。</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.CallNextHookEx(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            挂钩信息传递到当前挂钩链中的下一个挂钩过程。挂钩过程可以在处理挂钩信息之前或之后调用此函数。
            <para>对于特定的挂钩类型，挂钩程序是成链安装的。<see cref="M:SpaceCG.WindowsAPI.User32.User32.CallNextHookEx(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)"/> 调用链中的下一个钩子。</para>
            <para>调用 <see cref="M:SpaceCG.WindowsAPI.User32.User32.CallNextHookEx(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)"/> 是可选的，但强烈建议您使用；否则，其他已安装钩子的应用程序将不会收到钩子通知，因此可能会出现不正确的行为。除非绝对需要防止其他应用程序看到该通知，否则应调用 CallNextHookEx。</para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-callnexthookex </para>
            <para>更多钩子函数：https://docs.microsoft.com/zh-cn/windows/win32/winmsg/hook-functions </para>
            </summary>
            <param name="hhk">该参数被忽略。</param>
            <param name="nCode">挂钩代码传递给当前的挂钩过程。下一个挂钩过程将使用此代码来确定如何处理挂钩信息。</param>
            <param name="wParam">所述的 wParam 值传递到当前挂钩过程。此参数的含义取决于与当前挂钩链关联的挂钩的类型。</param>
            <param name="lParam">传递给当前挂钩过程的 lParam 值。此参数的含义取决于与当前挂钩链关联的挂钩的类型。</param>
            <returns>该值由链中的下一个挂钩过程返回。当前的挂钩过程还必须返回该值。返回值的含义取决于挂钩类型。有关更多信息，请参见各个挂钩过程的描述。</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.CallMsgFilter(SpaceCG.WindowsAPI.User32.MSG@,System.Int32)">
            <summary>
            将指定的消息和挂钩代码传递给与 <see cref="F:SpaceCG.WindowsAPI.User32.HookType.WH_SYSMSGFILTER"/> 和 <see cref="F:SpaceCG.WindowsAPI.User32.HookType.WH_MSGFILTER"/> 挂钩相关联的挂钩过程。 <see cref="F:SpaceCG.WindowsAPI.User32.HookType.WH_SYSMSGFILTER"/> 和 <see cref="F:SpaceCG.WindowsAPI.User32.HookType.WH_MSGFILTER"/> 挂钩过程是应用程序定义的回调函数，它检查并（可选）修改对话框，消息框，菜单或滚动条的消息。
            <para>系统调用 <see cref="M:SpaceCG.WindowsAPI.User32.User32.CallMsgFilter(SpaceCG.WindowsAPI.User32.MSG@,System.Int32)"/> 来使应用程序能够在对话框，消息框，菜单和滚动条的内部处理过程中，或者当用户通过按 ALT+TAB 组合键激活其他窗口时，检查和控制消息流。</para>
            <para>通过使用 <see cref="M:SpaceCG.WindowsAPI.User32.User32.SetWindowsHookEx(SpaceCG.WindowsAPI.User32.HookType,SpaceCG.WindowsAPI.User32.HookProc,System.IntPtr,System.UInt32)"/> 函数安装此挂钩过程。</para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-callmsgfiltera?redirectedfrom=MSDN </para>
            </summary>
            <param name="lpMsg">[LPMSG] 指向 <see cref="T:SpaceCG.WindowsAPI.User32.MSG"/> 结构的指针，该结构包含要传递给挂钩过程的消息。</param>
            <param name="nCode">挂钩过程用来确定如何处理消息的应用程序定义的代码。该代码的值不得与与 <see cref="F:SpaceCG.WindowsAPI.User32.HookType.WH_SYSMSGFILTER"/> 和 <see cref="F:SpaceCG.WindowsAPI.User32.HookType.WH_MSGFILTER"/> 挂钩关联的系统定义的挂钩代码（MSGF_ 和 HC_）具有相同的值。</param>
            <returns>如果应用程序应进一步处理该消息，则返回值为零。 如果应用程序不应该进一步处理该消息，则返回值为非零。</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.RegisterHotKey(System.IntPtr,System.Int32,SpaceCG.WindowsAPI.User32.RhkModifier,SpaceCG.WindowsAPI.User32.VirtualKeyCode)">
            <summary>
            定义系统范围的热键。
            <para>此功能无法将热键与另一个线程创建的窗口关联。如果为热键指定的击键已经被另一个热键注册，则 <see cref="M:SpaceCG.WindowsAPI.User32.User32.RegisterHotKey(System.IntPtr,System.Int32,SpaceCG.WindowsAPI.User32.RhkModifier,SpaceCG.WindowsAPI.User32.VirtualKeyCode)"/> 失败。</para>
            <para>如果已经存在具有相同 hWnd 和 id 参数的热键，则将其与新的热键一起维护。应用程序必须显式调用 <see cref="M:SpaceCG.WindowsAPI.User32.User32.UnregisterHotKey(System.IntPtr,System.Int32)"/> 来注销旧的热键。</para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-registerhotkey </para>
            </summary>
            <param name="hWnd">窗口的句柄，它将接收由热键生成的 <see cref="F:SpaceCG.WindowsAPI.User32.MessageType.WM_HOTKEY"/> 消息。如果此参数为 NULL，则将 <see cref="F:SpaceCG.WindowsAPI.User32.MessageType.WM_HOTKEY"/> 消息发布到调用线程的消息队列中，并且必须在消息循环中进行处理。</param>
            <param name="id">热键的标识符。如果 hWnd 参数为 NULL，则热键与当前线程关联，而不与特定窗口关联。如果已经存在具有相同 hWnd 和 id 参数的热键。</param>
            <param name="fsModifiers">必须将这些键与 uVirtKey 参数指定的键组合在一起 才能生成 <see cref="F:SpaceCG.WindowsAPI.User32.MessageType.WM_HOTKEY"/> 消息</param>
            <param name="vk">热键的虚拟键代码 <see cref="T:SpaceCG.WindowsAPI.User32.VirtualKeyCode"/></param>
            <returns>如果函数成功，则返回值为非零。如果函数失败，则返回值为零。要获取扩展的错误信息，请调用 <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/> 或 <see cref="M:System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error"/>。</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.UnregisterHotKey(System.IntPtr,System.Int32)">
            <summary>
            释放先前由调用线程注册的热键。
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-unregisterhotkey </para>
            </summary>
            <param name="hWnd">与要释放的热键关联的窗口的句柄。如果热键未与窗口关联，则此参数应为 NULL。</param>
            <param name="id">要释放的热键的标识符。</param>
            <returns>如果函数成功，则返回值为非零。如果函数失败，则返回值为零。要获取扩展的错误信息，请调用 <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/> 或 <see cref="M:System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error"/>。</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.SendInput(System.UInt32,SpaceCG.WindowsAPI.User32.INPUT[],System.Int32)">
            <summary>
            合成击键，鼠标动作和按钮单击。
            <para>第三方库：https://github.com/michaelnoonan/inputsimulator </para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-sendinput </para>
            </summary>
            <param name="cInputs">pInputs 数组中的结构数，应为 pInputs 数组长度。</param>
            <param name="pInputs">[LPINPUT] <seealso cref="T:SpaceCG.WindowsAPI.User32.INPUT"/> 结构的数组。每个结构代表一个要插入键盘或鼠标输入流的事件。</param>
            <param name="cbSize"><see cref="T:SpaceCG.WindowsAPI.User32.INPUT"/> 结构的大小（以字节为单位）。如果 cbSize 不是 <see cref="T:SpaceCG.WindowsAPI.User32.INPUT"/> 结构的大小，则该函数失败。 大小应为 Marshal.SizeOf(typeof(INPUT))</param>
            <returns>该函数返回成功插入键盘或鼠标输入流中的事件数。如果函数返回零，则输入已经被另一个线程阻塞。要获取扩展的错误信息，请调用 <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/> 或 <see cref="M:System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error"/>。
            <para>当 UIPI 阻止此功能时，该功能将失败。请注意，<see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/> 或 <see cref="M:System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error"/> 和返回值都不会指示失败是由 UIPI 阻塞引起的。</para>
            </returns>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.User32.MAX_TOUCH_COUNT">
            <summary>
            最大同时触摸常量数,Specifies the maximum number of simultaneous contacts.
            </summary>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.InitializeTouchInjection(System.UInt32,SpaceCG.WindowsAPI.User32.TouchFeedbackMode)">
            <summary>
            为调用的应用程序配置触摸注入上下文，并初始化该应用程序可以注入的最大同时 接触 数量。
            <para>注意：<see cref="M:SpaceCG.WindowsAPI.User32.User32.InitializeTouchInjection(System.UInt32,SpaceCG.WindowsAPI.User32.TouchFeedbackMode)"/> 必须在对 <see cref="M:SpaceCG.WindowsAPI.User32.User32.InjectTouchInput(System.UInt32,SpaceCG.WindowsAPI.User32.POINTER_TOUCH_INFO[])"/> 的任何调用之前。</para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-initializetouchinjection </para>
            </summary>
            <param name="maxCount">触摸触点的最大数量。
                <para>所述 maxCount 参数必须大于 0 且小于或等于 <see cref="F:SpaceCG.WindowsAPI.User32.User32.MAX_TOUCH_COUNT"/>(256) 已在 winuser.h 定义。</para>
            </param>
            <param name="dwMode">接触反馈模式 <see cref="T:SpaceCG.WindowsAPI.User32.TouchFeedbackMode"/>。该 dwMode 参数必须是 <see cref="F:SpaceCG.WindowsAPI.User32.TouchFeedbackMode.DEFAULT"/>，<see cref="F:SpaceCG.WindowsAPI.User32.TouchFeedbackMode.INDIRECT"/>，或 <see cref="F:SpaceCG.WindowsAPI.User32.TouchFeedbackMode.NONE"/>。</param>
            <returns>如果函数成功，则返回值为 TRUE。如果函数失败，则返回值为 FALSE。要获取扩展的错误信息，请调用 <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/> 或 <see cref="M:System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error"/>。</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.InjectTouchInput(System.UInt32,SpaceCG.WindowsAPI.User32.POINTER_TOUCH_INFO[])">
            <summary>
            模拟触摸输入。
            <para>注意：<see cref="M:SpaceCG.WindowsAPI.User32.User32.InitializeTouchInjection(System.UInt32,SpaceCG.WindowsAPI.User32.TouchFeedbackMode)"/> 必须在对 <see cref="M:SpaceCG.WindowsAPI.User32.User32.InjectTouchInput(System.UInt32,SpaceCG.WindowsAPI.User32.POINTER_TOUCH_INFO[])"/> 的任何调用之前。</para>
            <para>如果指定 <see cref="F:SpaceCG.WindowsAPI.User32.POINTER_INFO.performanceCount"/> 字段，则在实际注入时，时间戳将以 0.1 毫秒的分辨率转换为当前时间。如果自定义 <see cref="F:SpaceCG.WindowsAPI.User32.POINTER_INFO.performanceCount"/> 导致与上一次注入相同的.1毫秒窗口，则 API 将返回错误（ERROR_NOT_READY），并且不会注入数据。虽然不会立即因错误使注入无效，但下一次成功的注入必须具有 <see cref="F:SpaceCG.WindowsAPI.User32.POINTER_INFO.performanceCount"/> 值，该值与先前成功的注入之间至少相隔 0.1 毫秒。同样，如果使用该字段，则自定义 <see cref="F:SpaceCG.WindowsAPI.User32.POINTER_INFO.dwTime"/> 值必须至少相隔 1 毫秒。</para>
            <para>如果在注入参数中同时指定了 <see cref="F:SpaceCG.WindowsAPI.User32.POINTER_INFO.dwTime"/> 和 <see cref="F:SpaceCG.WindowsAPI.User32.POINTER_INFO.performanceCount"/>，则 <see cref="M:SpaceCG.WindowsAPI.User32.User32.InjectTouchInput(System.UInt32,SpaceCG.WindowsAPI.User32.POINTER_TOUCH_INFO[])"/> 失败，并显示错误代码（ERROR_INVALID_PARAMETER）。一旦注入应用程序以 <see cref="F:SpaceCG.WindowsAPI.User32.POINTER_INFO.dwTime"/> 或 <see cref="F:SpaceCG.WindowsAPI.User32.POINTER_INFO.performanceCount"/> 参数启动，则时间戳记字段必须正确填写。一旦注入序列开始，注入就无法将自定义时间戳字段从一个切换为另一个。</para>
            <para>如果未指定 <see cref="F:SpaceCG.WindowsAPI.User32.POINTER_INFO.dwTime"/> 或 <see cref="F:SpaceCG.WindowsAPI.User32.POINTER_INFO.performanceCount"/> 值，则 <see cref="M:SpaceCG.WindowsAPI.User32.User32.InjectTouchInput(System.UInt32,SpaceCG.WindowsAPI.User32.POINTER_TOUCH_INFO[])"/> 会根据 API 调用的时间分配时间戳。如果调用之间的间隔小于0.1毫秒，则 API 可能返回错误（ERROR_NOT_READY）。该错误不会立即使输入无效，但是注入应用程序需要再次重试同一帧以确保注入成功。</para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-injecttouchinput </para>
            </summary>
            <param name="count">contacts 中数组的大小；计数的最大值由 <see cref="M:SpaceCG.WindowsAPI.User32.User32.InitializeTouchInjection(System.UInt32,SpaceCG.WindowsAPI.User32.TouchFeedbackMode)"/> 函数的 maxCount 参数指定。</param>
            <param name="contacts">代表桌面上所有 contacts 的 <see cref="T:SpaceCG.WindowsAPI.User32.POINTER_TOUCH_INFO"/> 结构的数组。每个 contact 的屏幕坐标必须在桌面范围内。</param>
            <returns>如果函数成功，则返回值为非零。如果函数失败，则返回值为零。要获取扩展的错误信息，请调用 <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/> 或 <see cref="M:System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error"/>。</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.GetTouchInputInfo(System.IntPtr,System.UInt32,SpaceCG.WindowsAPI.User32.TOUCHINPUT[],System.Int32)">
            <summary>
            检索有关与特定触摸输入句柄关联的触摸输入的详细信息。
            <para>调用 <see cref="M:SpaceCG.WindowsAPI.User32.User32.CloseTouchInputHandle(System.IntPtr)"/> 不会空闲内存在一个调用中检索值相关联 <see cref="M:SpaceCG.WindowsAPI.User32.User32.GetTouchInputInfo(System.IntPtr,System.UInt32,SpaceCG.WindowsAPI.User32.TOUCHINPUT[],System.Int32)"/>。传递到 <see cref="M:SpaceCG.WindowsAPI.User32.User32.GetTouchInputInfo(System.IntPtr,System.UInt32,SpaceCG.WindowsAPI.User32.TOUCHINPUT[],System.Int32)"/> 的结构中的值 将一直有效，直到您删除它们为止。</para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-gettouchinputinfo </para>
            </summary>
            <param name="hTouchInput">在触摸消息的 lParam 中接收到的触摸输入手柄。如果此句柄无效，则函数失败，并显示 ERROR_INVALID_HANDLE。请注意，在成功调用 <see cref="M:SpaceCG.WindowsAPI.User32.User32.CloseTouchInputHandle(System.IntPtr)"/> 或将其传递给 <see cref="M:SpaceCG.WindowsAPI.User32.User32.DefWindowProc(System.IntPtr,SpaceCG.WindowsAPI.User32.MessageType,System.IntPtr,System.IntPtr)"/>，<see cref="M:SpaceCG.WindowsAPI.User32.User32.PostMessage(System.IntPtr,SpaceCG.WindowsAPI.User32.MessageType,System.IntPtr,System.IntPtr)"/>，<see cref="M:SpaceCG.WindowsAPI.User32.User32.SendMessage(System.IntPtr,SpaceCG.WindowsAPI.User32.MessageType,System.IntPtr,System.IntPtr)"/> 或其变体之一之后，该句柄无效。</param>
            <param name="cInputs">pInputs 数组中的结构数。理想地，这应该至少等于与消息 wParam 中指示的消息关联的接触点的数量。如果 cInputs 小于接触点的数量，则该函数仍将成功执行，并使用有关 cInputs 接触点的信息填充 pInputs 缓冲区。</param>
            <param name="pInputs">指向 <see cref="T:SpaceCG.WindowsAPI.User32.TOUCHINPUT"/> 结构数组的指针，以接收有关与指定触摸输入手柄关联的触摸点的信息。</param>
            <param name="cbSize">单个 <see cref="T:SpaceCG.WindowsAPI.User32.TOUCHINPUT"/> 结构的大小（以字节为单位, sizeof(<see cref="T:SpaceCG.WindowsAPI.User32.TOUCHINPUT"/>)）。如果 cbSize 不是单个 <see cref="T:SpaceCG.WindowsAPI.User32.TOUCHINPUT"/> 结构的大小，则该函数失败，并显示 ERROR_INVALID_PARAMETER。</param>
            <returns>如果函数成功，则返回值为非零。如果函数失败，则返回值为零。若要获取扩展的错误信息，请使用 <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/> 或 <see cref="M:System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error"/> 函数。</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.CloseTouchInputHandle(System.IntPtr)">
            <summary>
            关闭触摸输入句柄，释放与其关联的过程内存，并使该句柄无效。
            <para>调用 <see cref="M:SpaceCG.WindowsAPI.User32.User32.CloseTouchInputHandle(System.IntPtr)"/> 不会空闲内存在一个调用中检索值相关联 <see cref="M:SpaceCG.WindowsAPI.User32.User32.GetTouchInputInfo(System.IntPtr,System.UInt32,SpaceCG.WindowsAPI.User32.TOUCHINPUT[],System.Int32)"/>。传递到 <see cref="!:GetTouchInputInf"/> 的结构中的值 将一直有效，直到您删除它们为止。</para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-closetouchinputhandle </para>
            </summary>
            <param name="hTouchInput">在触摸消息的 lParam 中接收到的触摸输入手柄。如果此句柄无效，则函数失败，并显示 ERROR_INVALID_HANDLE。请注意，在成功调用 <see cref="M:SpaceCG.WindowsAPI.User32.User32.CloseTouchInputHandle(System.IntPtr)"/> 或将其传递给 <see cref="M:SpaceCG.WindowsAPI.User32.User32.DefWindowProc(System.IntPtr,SpaceCG.WindowsAPI.User32.MessageType,System.IntPtr,System.IntPtr)"/>，<see cref="M:SpaceCG.WindowsAPI.User32.User32.PostMessage(System.IntPtr,SpaceCG.WindowsAPI.User32.MessageType,System.IntPtr,System.IntPtr)"/>，<see cref="M:SpaceCG.WindowsAPI.User32.User32.SendMessage(System.IntPtr,SpaceCG.WindowsAPI.User32.MessageType,System.IntPtr,System.IntPtr)"/> 或其变体之一之后，该句柄无效。</param>
            <returns>如果函数成功，则返回值为非零。如果函数失败，则返回值为零。若要获取扩展的错误信息，请使用 <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/> 或 <see cref="M:System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error"/> 函数。</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.RegisterRawInputDevices(SpaceCG.WindowsAPI.User32.RAWINPUTDEVICE[],System.UInt32,System.UInt32)">
            <summary>
            注册提供原始输入数据的设备。
            <para>要接收 <see cref="F:SpaceCG.WindowsAPI.User32.MessageType.WM_INPUT"/> 消息，应用程序必须首先使用 <see cref="M:SpaceCG.WindowsAPI.User32.User32.RegisterRawInputDevices(SpaceCG.WindowsAPI.User32.RAWINPUTDEVICE[],System.UInt32,System.UInt32)"/> 注册原始输入设备。默认情况下，应用程序不接收原始输入。</para>
            <para>要接收 <see cref="F:SpaceCG.WindowsAPI.User32.MessageType.WM_INPUT_DEVICE_CHANGE"/> 消息，应用程序必须为 <see cref="T:SpaceCG.WindowsAPI.User32.RAWINPUTDEVICE"/> 结构的 usUsagePage 和 usUsage 字段指定的每个设备类指定 RIDEV_DEVNOTIFY 标志 。默认情况下，应用程序不会收到 有关原始输入设备到达和移除的 <see cref="F:SpaceCG.WindowsAPI.User32.MessageType.WM_INPUT_DEVICE_CHANGE"/> 通知。</para>
            <para>如果 <see cref="T:SpaceCG.WindowsAPI.User32.RAWINPUTDEVICE"/> 结构设置了 <see cref="F:SpaceCG.WindowsAPI.User32.RawInputFlags.RIDEV_REMOVE"/> 标志，并且 hwndTarget 参数未设置为 NULL，则参数验证将失败。</para>
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-registerrawinputdevices </para>
            </summary>
            <param name="pRawInputDevices"><see cref="T:SpaceCG.WindowsAPI.User32.RAWINPUTDEVICE"/> 结构的数组，代表提供原始输入的设备。</param>
            <param name="uiNumDevices"><see cref="T:SpaceCG.WindowsAPI.User32.RAWINPUTDEVICE"/> 结构由指向 pRawInputDevices。</param>
            <param name="cbSize"><see cref="T:SpaceCG.WindowsAPI.User32.RAWINPUTDEVICE"/> 结构的大小（以字节为单位）。</param>
            <returns>如果函数成功，则为 TRUE；否则为 false。否则为 FALSE。如果函数失败，请调用 <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/> 以获取更多信息。</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.GetRegisteredRawInputDevices(SpaceCG.WindowsAPI.User32.RAWINPUTDEVICE[],System.UInt32@,System.UInt32)">
            <summary>
            检索有关当前应用程序的原始输入设备的信息。
            <para>要从设备接收原始输入，应用程序必须使用 <see cref="M:SpaceCG.WindowsAPI.User32.User32.RegisterRawInputDevices(SpaceCG.WindowsAPI.User32.RAWINPUTDEVICE[],System.UInt32,System.UInt32)"/> 对其进行注册。</para>
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getregisteredrawinputdevices </para>
            </summary>
            <param name="pRawInputDevices">应用程序的 <see cref="T:SpaceCG.WindowsAPI.User32.RAWINPUTDEVICE"/> 结构的数组。</param>
            <param name="puiNumDevices"> pRawInputDevices 中的 <see cref="T:SpaceCG.WindowsAPI.User32.RAWINPUTDEVICE"/> 结构的数量。</param>
            <param name="cbSize"><see cref="T:SpaceCG.WindowsAPI.User32.RAWINPUTDEVICE"/> 结构的大小（以字节为单位）。</param>
            <returns>如果成功，该函数将返回一个非负数，即写入缓冲区的 <see cref="T:SpaceCG.WindowsAPI.User32.RAWINPUTDEVICE"/> 结构的数目。
                <para>如果 pRawInputDevices 缓冲区太小或为 NULL，则该函数将最后一个错误设置为 ERROR_INSUFFICIENT_BUFFER，返回 -1，并将 puiNumDevices 设置为所需的设备数。
                如果函数由于任何其他原因而失败，则返回 -1。有关更多详细信息，请调用 <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/>。</para>
            </returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.GetRegisteredRawInputDevices(System.IntPtr,System.UInt32@,System.UInt32)">
            <summary>
            检索有关当前应用程序的原始输入设备的信息。
            <para>要从设备接收原始输入，应用程序必须使用 <see cref="M:SpaceCG.WindowsAPI.User32.User32.RegisterRawInputDevices(SpaceCG.WindowsAPI.User32.RAWINPUTDEVICE[],System.UInt32,System.UInt32)"/> 对其进行注册。</para>
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getregisteredrawinputdevices </para>
            </summary>
            <param name="pRawInputDevices">应用程序的 <see cref="T:SpaceCG.WindowsAPI.User32.RAWINPUTDEVICE"/> 结构的数组。</param>
            <param name="puiNumDevices"> pRawInputDevices 中的 <see cref="T:SpaceCG.WindowsAPI.User32.RAWINPUTDEVICE"/> 结构的数量。</param>
            <param name="cbSize"><see cref="T:SpaceCG.WindowsAPI.User32.RAWINPUTDEVICE"/> 结构的大小（以字节为单位）。</param>
            <returns>如果成功，该函数将返回一个非负数，即写入缓冲区的 <see cref="T:SpaceCG.WindowsAPI.User32.RAWINPUTDEVICE"/> 结构的数目。
                <para>如果 pRawInputDevices 缓冲区太小或为 NULL，则该函数将最后一个错误设置为 ERROR_INSUFFICIENT_BUFFER，返回 -1，并将 puiNumDevices 设置为所需的设备数。
                如果函数由于任何其他原因而失败，则返回 -1。有关更多详细信息，请调用 <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/>。</para>
            </returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.GetRawInputData(SpaceCG.WindowsAPI.User32.RAWINPUT,System.UInt32,System.IntPtr,System.UInt32@,System.UInt32)">
            <summary>
            检索来自指定设备的原始输入。
            <para><see cref="M:SpaceCG.WindowsAPI.User32.User32.GetRawInputData(System.IntPtr,SpaceCG.WindowsAPI.User32.RIDFlag,System.IntPtr,System.UInt32@,System.UInt32)"/> 一次获取原始输入一个 <see cref="T:SpaceCG.WindowsAPI.User32.RAWINPUT"/> 结构。相反，<see cref="M:SpaceCG.WindowsAPI.User32.User32.GetRawInputBuffer(System.IntPtr,System.UInt32@,System.UInt32)"/> 获取一个 <see cref="T:SpaceCG.WindowsAPI.User32.RAWINPUT"/> 结构的数组。</para>
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getrawinputdata </para>
            </summary>
            <param name="hRawInput"><see cref="T:SpaceCG.WindowsAPI.User32.RAWINPUT"/> 结构的句柄。这个来自 lParam 的在 <see cref="F:SpaceCG.WindowsAPI.User32.MessageType.WM_INPUT"/>。 </param>
            <param name="uiCommand">命令标志, 是 <see cref="T:SpaceCG.WindowsAPI.User32.RIDFlag"/>值之一 </param>
            <param name="pData">指向来自 <see cref="T:SpaceCG.WindowsAPI.User32.RAWINPUT"/> 结构的数据的指针。这取决于 uiCommand 的值 。如果 pData 为 NULL，则以 pcbSize 返回所需的缓冲区大小。</param>
            <param name="pcbSize">pData 中数据的大小（以字节为单位） 。</param>
            <param name="cbSizeHeader"><see cref="T:SpaceCG.WindowsAPI.User32.RAWINPUTHEADER"/> 结构的大小（以字节为单位）。</param>
            <returns>如果 pData 为 NULL 并且函数成功，则返回值为 0。如果 pData 不为 NULL 并且函数成功，则返回值为复制到 pData 中的字节数。如果有错误，则返回值为（UINT）-1。</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.GetRawInputData(System.IntPtr,SpaceCG.WindowsAPI.User32.RIDFlag,System.IntPtr,System.UInt32@,System.UInt32)">
            <summary>
            检索来自指定设备的原始输入。
            <para><see cref="M:SpaceCG.WindowsAPI.User32.User32.GetRawInputData(System.IntPtr,SpaceCG.WindowsAPI.User32.RIDFlag,System.IntPtr,System.UInt32@,System.UInt32)"/> 一次获取原始输入一个 <see cref="T:SpaceCG.WindowsAPI.User32.RAWINPUT"/> 结构。相反，<see cref="M:SpaceCG.WindowsAPI.User32.User32.GetRawInputBuffer(System.IntPtr,System.UInt32@,System.UInt32)"/> 获取一个 <see cref="T:SpaceCG.WindowsAPI.User32.RAWINPUT"/> 结构的数组。</para>
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getrawinputdata </para>
            </summary>
            <param name="hRawInput"><see cref="T:SpaceCG.WindowsAPI.User32.RAWINPUT"/> 结构的句柄。这个来自 lParam 的在 <see cref="F:SpaceCG.WindowsAPI.User32.MessageType.WM_INPUT"/>。 </param>
            <param name="uiCommand">命令标志, 是 <see cref="T:SpaceCG.WindowsAPI.User32.RIDFlag"/>值之一 </param>
            <param name="pData">指向来自 <see cref="T:SpaceCG.WindowsAPI.User32.RAWINPUT"/> 结构的数据的指针。这取决于 uiCommand 的值 。如果 pData 为 NULL，则以 pcbSize 返回所需的缓冲区大小。</param>
            <param name="pcbSize">pData 中数据的大小（以字节为单位） 。</param>
            <param name="cbSizeHeader"><see cref="T:SpaceCG.WindowsAPI.User32.RAWINPUTHEADER"/> 结构的大小（以字节为单位）。</param>
            <returns>如果 pData 为 NULL 并且函数成功，则返回值为 0。如果 pData 不为 NULL 并且函数成功，则返回值为复制到 pData 中的字节数。如果有错误，则返回值为（UINT）-1。</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.GetRawInputData(System.IntPtr,SpaceCG.WindowsAPI.User32.RIDFlag,SpaceCG.WindowsAPI.User32.RAWINPUT@,System.UInt32@,System.UInt32)">
            <summary>
            检索来自指定设备的原始输入。
            <para><see cref="M:SpaceCG.WindowsAPI.User32.User32.GetRawInputData(System.IntPtr,SpaceCG.WindowsAPI.User32.RIDFlag,System.IntPtr,System.UInt32@,System.UInt32)"/> 一次获取原始输入一个 <see cref="T:SpaceCG.WindowsAPI.User32.RAWINPUT"/> 结构。相反，<see cref="M:SpaceCG.WindowsAPI.User32.User32.GetRawInputBuffer(System.IntPtr,System.UInt32@,System.UInt32)"/> 获取一个 <see cref="T:SpaceCG.WindowsAPI.User32.RAWINPUT"/> 结构的数组。</para>
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getrawinputdata </para>
            </summary>
            <param name="hRawInput"><see cref="T:SpaceCG.WindowsAPI.User32.RAWINPUT"/> 结构的句柄。这个来自 lParam 的在 <see cref="F:SpaceCG.WindowsAPI.User32.MessageType.WM_INPUT"/>。 </param>
            <param name="uiCommand">命令标志, 是 <see cref="T:SpaceCG.WindowsAPI.User32.RIDFlag"/>值之一 </param>
            <param name="pData">指向来自 <see cref="T:SpaceCG.WindowsAPI.User32.RAWINPUT"/> 结构的数据的指针。这取决于 uiCommand 的值 。如果 pData 为 NULL，则以 pcbSize 返回所需的缓冲区大小。</param>
            <param name="pcbSize">pData 中数据的大小（以字节为单位） 。</param>
            <param name="cbSizeHeader"><see cref="T:SpaceCG.WindowsAPI.User32.RAWINPUTHEADER"/> 结构的大小（以字节为单位）。</param>
            <returns>如果 pData 为 NULL 并且函数成功，则返回值为 0。如果 pData 不为 NULL 并且函数成功，则返回值为复制到 pData 中的字节数。如果有错误，则返回值为（UINT）-1。</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.GetRawInputBuffer(SpaceCG.WindowsAPI.User32.RAWINPUT[],System.UInt32@,System.UInt32)">
            <summary>
            对原始输入数据执行缓冲读取。
            <para>注意：要获得原始输入缓冲区的正确大小，请不要使用 pcbSize，而应使用 pcbSize * 8。为确保 <see cref="M:SpaceCG.WindowsAPI.User32.User32.GetRawInputBuffer(System.IntPtr,System.UInt32@,System.UInt32)"/> 在 WOW64 上正常运行，必须将 <see cref="T:SpaceCG.WindowsAPI.User32.RAWINPUT"/> 结构对齐 8 个字节。</para>
            <para>使用 <see cref="M:SpaceCG.WindowsAPI.User32.User32.GetRawInputBuffer(System.IntPtr,System.UInt32@,System.UInt32)"/>，原始输入数据被缓存在 <see cref="T:SpaceCG.WindowsAPI.User32.RAWINPUT"/> 结构的数组中。对于无缓冲读取，请使用 <see cref="M:SpaceCG.WindowsAPI.User32.User32.GetMessage(SpaceCG.WindowsAPI.User32.MSG@,System.IntPtr,System.UInt32,System.UInt32)"/> 函数读取原始输入数据。所述 <see cref="M:SpaceCG.WindowsAPI.User32.User32.NEXTRAWINPUTBLOCK(System.IntPtr)"/> 宏允许应用程序遍历的阵列 <see cref="T:SpaceCG.WindowsAPI.User32.RAWINPUT"/> 结构。</para>
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getrawinputbuffer </para>
            </summary>
            <param name="pData">指向包含原始输入数据的 <see cref="T:SpaceCG.WindowsAPI.User32.RAWINPUT"/> 结构的缓冲区的指针。如果为 NULL，则在 pcbSize 中返回所需的最小缓冲区（以字节为单位）。</param>
            <param name="pcbSize"> <see cref="T:SpaceCG.WindowsAPI.User32.RAWINPUT"/> 结构的大小（以字节为单位）。</param>
            <param name="cbSizeHeader"><see cref="T:SpaceCG.WindowsAPI.User32.RAWINPUTHEADER"/> 结构的大小（以字节为单位）。</param>
            <returns>如果 pData 为 NULL 并且函数成功，则返回值为零。如果 pData 不为 NULL 并且函数成功，则返回值是写入 pData 的 <see cref="T:SpaceCG.WindowsAPI.User32.RAWINPUT"/> 结构 的数量。
                <para>如果发生错误，则返回值为（UINT）-1。调用 <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/> 作为错误代码。</para>
            </returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.GetRawInputBuffer(System.IntPtr,System.UInt32@,System.UInt32)">
            <summary>
            对原始输入数据执行缓冲读取。
            <para>注意：要获得原始输入缓冲区的正确大小，请不要使用 pcbSize，而应使用 pcbSize * 8。为确保 <see cref="M:SpaceCG.WindowsAPI.User32.User32.GetRawInputBuffer(System.IntPtr,System.UInt32@,System.UInt32)"/> 在 WOW64 上正常运行，必须将 <see cref="T:SpaceCG.WindowsAPI.User32.RAWINPUT"/> 结构对齐 8 个字节。</para>
            <para>使用 <see cref="M:SpaceCG.WindowsAPI.User32.User32.GetRawInputBuffer(System.IntPtr,System.UInt32@,System.UInt32)"/>，原始输入数据被缓存在 <see cref="T:SpaceCG.WindowsAPI.User32.RAWINPUT"/> 结构的数组中。对于无缓冲读取，请使用 <see cref="M:SpaceCG.WindowsAPI.User32.User32.GetMessage(SpaceCG.WindowsAPI.User32.MSG@,System.IntPtr,System.UInt32,System.UInt32)"/> 函数读取原始输入数据。所述 <see cref="M:SpaceCG.WindowsAPI.User32.User32.NEXTRAWINPUTBLOCK(System.IntPtr)"/> 宏允许应用程序遍历的阵列 <see cref="T:SpaceCG.WindowsAPI.User32.RAWINPUT"/> 结构。</para>
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getrawinputbuffer </para>
            </summary>
            <param name="pData">指向包含原始输入数据的 <see cref="T:SpaceCG.WindowsAPI.User32.RAWINPUT"/> 结构的缓冲区的指针。如果为 NULL，则在 pcbSize 中返回所需的最小缓冲区（以字节为单位）。</param>
            <param name="pcbSize"> <see cref="T:SpaceCG.WindowsAPI.User32.RAWINPUT"/> 结构的大小（以字节为单位）。</param>
            <param name="cbSizeHeader"><see cref="T:SpaceCG.WindowsAPI.User32.RAWINPUTHEADER"/> 结构的大小（以字节为单位）。</param>
            <returns>如果 pData 为 NULL 并且函数成功，则返回值为零。如果 pData 不为 NULL 并且函数成功，则返回值是写入 pData 的 <see cref="T:SpaceCG.WindowsAPI.User32.RAWINPUT"/> 结构 的数量。
                <para>如果发生错误，则返回值为（UINT）-1。调用 <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/> 作为错误代码。</para>
            </returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.GetRawInputDeviceInfo(System.IntPtr,System.UInt32,System.IntPtr,System.UInt32@)">
            <summary>
            检索有关原始输入设备的信息。
            <para>注意：因为字符集的不同，实际应为 pcbSize * 2，才能保证在不同语言的系统上正常运行。</para>
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getrawinputdeviceinfoa </para>
            </summary>
            <param name="hDevice">原始输入设备的句柄。这个来自 hDevice 成员 <see cref="T:SpaceCG.WindowsAPI.User32.RAWINPUTHEADER"/> 或 <see cref="M:SpaceCG.WindowsAPI.User32.User32.GetRawInputDeviceList(System.IntPtr,System.UInt32@,System.UInt32)"/>。</param>
            <param name="uiCommand">指定将在 pData 中返回什么数据，参考 <see cref="T:SpaceCG.WindowsAPI.User32.RIDIFlag"/> </param>
            <param name="pData">指向包含 uiCommand 指定的信息的缓冲区的指针 。如果 uiCommand 是 <see cref="F:SpaceCG.WindowsAPI.User32.RIDIFlag.RIDI_DEVICEINFO"/>，设定 cbSize 成员 RID_DEVICE_INFO 来 sizeof(RID_DEVICE_INFO) 调用之前 <see cref="M:SpaceCG.WindowsAPI.User32.User32.GetRawInputDeviceInfo(System.IntPtr,System.UInt32,System.IntPtr,System.UInt32@)"/>。</param>
            <param name="pcbSize">pData 中数据的大小（以字节为单位） 。</param>
            <returns>如果成功，此函数将返回一个非负数，指示复制到 pData 的字节数 。
                <para>如果 pData 不足以容纳数据，则该函数返回-1。如果 pData 为 NULL，则该函数返回零值。在这两种情况下， pcbSize 均设置为 pData 缓冲区所需的最小大小 。</para>
                <para>调用 <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/> 以识别其他任何错误。</para>
            </returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.GetRawInputDeviceInfo(System.IntPtr,SpaceCG.WindowsAPI.User32.RIDIFlag,System.IntPtr,System.UInt32@)">
            <summary>
            检索有关原始输入设备的信息。
            <para>注意：因为字符集的不同，实际应为 pcbSize * 2，才能保证在不同语言的系统上正常运行。</para>
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getrawinputdeviceinfoa </para>
            </summary>
            <param name="hDevice">原始输入设备的句柄。这个来自 hDevice 成员 <see cref="T:SpaceCG.WindowsAPI.User32.RAWINPUTHEADER"/> 或 <see cref="M:SpaceCG.WindowsAPI.User32.User32.GetRawInputDeviceList(System.IntPtr,System.UInt32@,System.UInt32)"/>。</param>
            <param name="uiCommand">指定将在 pData 中返回什么数据，参考 <see cref="T:SpaceCG.WindowsAPI.User32.RIDIFlag"/> </param>
            <param name="pData">指向包含 uiCommand 指定的信息的缓冲区的指针 。如果 uiCommand 是 <see cref="F:SpaceCG.WindowsAPI.User32.RIDIFlag.RIDI_DEVICEINFO"/>，设定 cbSize 成员 RID_DEVICE_INFO 来 sizeof(RID_DEVICE_INFO) 调用之前 <see cref="M:SpaceCG.WindowsAPI.User32.User32.GetRawInputDeviceInfo(System.IntPtr,System.UInt32,System.IntPtr,System.UInt32@)"/>。</param>
            <param name="pcbSize">pData 中数据的大小（以字节为单位） 。</param>
            <returns>如果成功，此函数将返回一个非负数，指示复制到 pData 的字节数 。
                <para>如果 pData 不足以容纳数据，则该函数返回-1。如果 pData 为 NULL，则该函数返回零值。在这两种情况下， pcbSize 均设置为 pData 缓冲区所需的最小大小 。</para>
                <para>调用 <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/> 以识别其他任何错误。</para>
            </returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.GetRawInputDeviceList(SpaceCG.WindowsAPI.User32.RAWINPUTDEVICELIST[],System.UInt32@,System.UInt32)">
            <summary>
            枚举连接到系统的原始输入设备。
            <para>此功能返回的设备是鼠标，键盘和其他人机接口设备（HID）设备。要获取有关所连接设备的更多详细信息，请使用 <see cref="T:SpaceCG.WindowsAPI.User32.RAWINPUTDEVICELIST"/> 中的 hDevice 调用 <see cref="M:SpaceCG.WindowsAPI.User32.User32.GetRawInputDeviceInfo(System.IntPtr,System.UInt32,System.IntPtr,System.UInt32@)"/>。</para>
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getrawinputdevicelist </para>
            </summary>
            <param name="pRawInputDeviceList">用于连接到系统的设备的 <see cref="T:SpaceCG.WindowsAPI.User32.RAWINPUTDEVICELIST"/> 结构的数组。如果为 NULL，则在 puiNumDevices 中返回设备数。</param>
            <param name="puiNumDevices">如果 pRawInputDeviceList 为 NULL，则该函数将使用连接到系统的设备数填充此变量；否则，此变量指定 pRawInputDeviceList 指向的缓冲区中可以包含的 <see cref="T:SpaceCG.WindowsAPI.User32.RAWINPUTDEVICELIST"/> 结构的数量。如果该值小于连接到系统的设备数，则该函数返回此变量中的实际设备数，并失败，并显示 ERROR_INSUFFICIENT_BUFFER。</param>
            <param name="cbSize"><see cref="T:SpaceCG.WindowsAPI.User32.RAWINPUTDEVICELIST"/> 结构的大小，以字节为单位。</param>
            <returns>如果函数成功，则返回值是 pRawInputDeviceList 指向的缓冲区中存储的设备数 。发生任何其他错误时，函数将返回（UINT）-1，而 <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/> 将返回错误指示。</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.GetRawInputDeviceList(System.IntPtr,System.UInt32@,System.UInt32)">
            <summary>
            枚举连接到系统的原始输入设备。        
            <para>此功能返回的设备是鼠标，键盘和其他人机接口设备（HID）设备。要获取有关所连接设备的更多详细信息，请使用 <see cref="T:SpaceCG.WindowsAPI.User32.RAWINPUTDEVICELIST"/> 中的 hDevice 调用 <see cref="M:SpaceCG.WindowsAPI.User32.User32.GetRawInputDeviceInfo(System.IntPtr,System.UInt32,System.IntPtr,System.UInt32@)"/>。</para>
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getrawinputdevicelist </para>
            </summary>
            <param name="pRawInputDeviceList">用于连接到系统的设备的 <see cref="T:SpaceCG.WindowsAPI.User32.RAWINPUTDEVICELIST"/> 结构的数组。如果为 NULL，则在 puiNumDevices 中返回设备数。</param>
            <param name="puiNumDevices">如果 pRawInputDeviceList 为 NULL，则该函数将使用连接到系统的设备数填充此变量；否则，此变量指定 pRawInputDeviceList 指向的缓冲区中可以包含的 <see cref="T:SpaceCG.WindowsAPI.User32.RAWINPUTDEVICELIST"/> 结构的数量。如果该值小于连接到系统的设备数，则该函数返回此变量中的实际设备数，并失败，并显示 ERROR_INSUFFICIENT_BUFFER。</param>
            <param name="cbSize"><see cref="T:SpaceCG.WindowsAPI.User32.RAWINPUTDEVICELIST"/> 结构的大小，以字节为单位。</param>
            <returns>如果函数成功，则返回值是 pRawInputDeviceList 指向的缓冲区中存储的设备数 。发生任何其他错误时，函数将返回（UINT）-1，而 <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/> 将返回错误指示。</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.DefRawInputProc(SpaceCG.WindowsAPI.User32.RAWINPUT[],System.Int32,System.UInt32)">
            <summary>
            调用默认原始输入过程，以为应用程序未处理的任何原始输入消息提供默认处理。此功能确保处理所有消息。使用窗口过程接收到的相同参数调用 <see cref="M:SpaceCG.WindowsAPI.User32.User32.DefRawInputProc(System.IntPtr,System.Int32,System.UInt32)"/>。
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-defrawinputproc </para>
            </summary>
            <param name="paRawInput"><see cref="T:SpaceCG.WindowsAPI.User32.RAWINPUT"/> 结构的数组。</param>
            <param name="nInput"> paRawInput 数组数量</param>
            <param name="cbSizeHeader"><see cref="T:SpaceCG.WindowsAPI.User32.RAWINPUTHEADER"/> 结构的大小（以字节为单位）。</param>
            <returns>如果成功，函数将返回 S_OK。否则，它将返回错误值。</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.DefRawInputProc(System.IntPtr,System.Int32,System.UInt32)">
            <summary>
            调用默认原始输入过程，以为应用程序未处理的任何原始输入消息提供默认处理。此功能确保处理所有消息。使用窗口过程接收到的相同参数调用 <see cref="M:SpaceCG.WindowsAPI.User32.User32.DefRawInputProc(System.IntPtr,System.Int32,System.UInt32)"/>。
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-defrawinputproc </para>
            </summary>
            <param name="paRawInput"><see cref="T:SpaceCG.WindowsAPI.User32.RAWINPUT"/> 结构的数组。</param>
            <param name="nInput"> paRawInput 数组数量</param>
            <param name="cbSizeHeader"><see cref="T:SpaceCG.WindowsAPI.User32.RAWINPUTHEADER"/> 结构的大小（以字节为单位）。</param>
            <returns>如果成功，函数将返回 S_OK。否则，它将返回错误值。</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.GET_RAWINPUT_CODE_WPARAM(System.IntPtr)">
            <summary>
            检索从输入代码的 wParam 在 <see cref="F:SpaceCG.WindowsAPI.User32.MessageType.WM_INPUT"/>。
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-get_rawinput_code_wparam?redirectedfrom=MSDN </para>
            </summary>
            <param name="wParam">此参数可以是 0:RIM_INPUT, 1:RIM_INPUTSINK</param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.NEXTRAWINPUTBLOCK(System.IntPtr)">
            <summary>
            检索 <see cref="T:SpaceCG.WindowsAPI.User32.RAWINPUT"/> 结构数组中下一个结构的位置。
            <para>重复调用此宏以遍历 <see cref="T:SpaceCG.WindowsAPI.User32.RAWINPUT"/> 结构的数组。</para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-nextrawinputblock </para>
            </summary>
            <param name="ptr">指向 <see cref="T:SpaceCG.WindowsAPI.User32.RAWINPUT"/> 结构数组中的结构的指针。</param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.RegisterDeviceNotification(System.IntPtr,System.IntPtr,SpaceCG.WindowsAPI.User32.DeviceNotifyFlag)">
            <summary>
            注册窗口将接收其通知的设备或设备类型。
            <para>应用程序使用 <see cref="!:BroadcastSystemMessage"/> 函数发送事件通知 。具有顶层窗口的任何应用程序都可以通过处理 <see cref="F:SpaceCG.WindowsAPI.User32.MessageType.WM_DEVICECHANGE"/> 消息来接收基本通知 。应用程序可以使用 <see cref="M:SpaceCG.WindowsAPI.User32.User32.RegisterDeviceNotification(System.IntPtr,System.IntPtr,SpaceCG.WindowsAPI.User32.DeviceNotifyFlag)"/> 函数进行注册以接收设备通知。</para>
            <para>服务可以使用 <see cref="M:SpaceCG.WindowsAPI.User32.User32.RegisterDeviceNotification(System.IntPtr,System.IntPtr,SpaceCG.WindowsAPI.User32.DeviceNotifyFlag)"/> 函数进行注册以接收设备通知。如果服务在 hRecipient 参数中指定了窗口句柄 ，则将通知发送到窗口过程。如果 hRecipient 是服务状态句柄，则 SERVICE_CONTROL_DEVICEEVENT 通知将发送到服务控制处理程序。有关服务控制处理程序的更多信息，请参见 <see cref="!:HandlerEx"/>。</para>
            <para>确保尽快处理即插即用设备事件。否则，系统可能无法响应。如果事件处理程序要执行可能阻止执行的操作（例如I / O），则最好启动另一个线程以异步方式执行该操作。</para>
            <para>当不再需要 <see cref="M:SpaceCG.WindowsAPI.User32.User32.RegisterDeviceNotification(System.IntPtr,System.IntPtr,SpaceCG.WindowsAPI.User32.DeviceNotifyFlag)"/> 返回的设备通知句柄时， 必须通过调用 <see cref="M:SpaceCG.WindowsAPI.User32.User32.UnregisterDeviceNotification(System.IntPtr)"/> 函数来关闭 它们。</para>
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-registerdevicenotificationa </para>
            </summary>
            <param name="hRecipient">窗口或服务的句柄，它将接收 NotificationFilter 参数中指定的设备的设备事件 。可以在多次调用 <see cref="M:SpaceCG.WindowsAPI.User32.User32.RegisterDeviceNotification(System.IntPtr,System.IntPtr,SpaceCG.WindowsAPI.User32.DeviceNotifyFlag)"/> 的过程中使用同一窗口句柄 。
                <para>服务可以指定窗口句柄或服务状态句柄。</para></param>
            <param name="NotificationFilter">指向数据块的指针，该数据块指定应为其发送通知的设备的类型。该块始终以 <see cref="T:SpaceCG.WindowsAPI.User32.DEV_BROADCAST_HDR"/> 结构开始。该头之后的数据取决于 dbch_devicetype 成员的值，该值 可以是 <see cref="F:SpaceCG.WindowsAPI.User32.DeviceType.DBT_DEVTYP_DEVICEINTERFACE"/>  或 <see cref="F:SpaceCG.WindowsAPI.User32.DeviceType.DBT_DEVTYP_HANDLE"/>。</param>
            <param name="Flags"><see cref="T:SpaceCG.WindowsAPI.User32.DeviceNotifyFlag"/> 值之一 </param>
            <returns>如果函数成功，则返回值是设备通知句柄。如果函数失败，则返回值为NULL。要获取扩展的错误信息，请调用 <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/> 或 <see cref="M:System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error"/>。</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.UnregisterDeviceNotification(System.IntPtr)">
            <summary>
            关闭指定的设备通知句柄。
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-unregisterdevicenotification </para>
            </summary>
            <param name="Handle"><see cref="M:SpaceCG.WindowsAPI.User32.User32.RegisterDeviceNotification(System.IntPtr,System.IntPtr,SpaceCG.WindowsAPI.User32.DeviceNotifyFlag)"/> 函数返回的设备通知句柄 。</param>
            <returns>如果函数成功，则返回值为非零。如果函数失败，则返回值为零。要获取扩展的错误信息，请调用 <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/> 或 <see cref="M:System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error"/>。</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.SetWindowPos(System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,SpaceCG.WindowsAPI.User32.SwpFlags)">
            <summary>
            更改子窗口，弹出窗口或顶级窗口的大小，位置和Z顺序；这些窗口是根据其在屏幕上的外观排序的；最顶部的窗口获得最高排名，并且是Z顺序中的第一个窗口。
            <para>如果使用 <see cref="!:SetWindowLong"/> 更改了某些窗口数据，则必须调用 <see cref="M:SpaceCG.WindowsAPI.User32.User32.SetWindowPos(System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,SpaceCG.WindowsAPI.User32.SwpFlags)"/> 才能使更改生效。对 uFlags 使用以下组合：SWP_NOMOVE | SWP_NOSIZE | SWP_NOZORDER | SWP_FRAMECHANGED。</para>
            <para>示例：SetWindowPos(new WindowInteropHelper(this).Handle., (IntPtr)HWND_TOPMOST, 0, 0, 0, 0, SwpFlags.SWP_NOMOVE | SwpFlags.SWP_NOSIZE); //将窗口 Z 序设置为最顶</para>
            <para>示例：SetWindowPos(hWnd, (IntPtr)HWND_TOPMOST, 10, 10, 800, 600, SwpFlags.SWP_NOZORDER ); //设置窗口大小及位置，忽略 Z 序</para>
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setwindowpos </para>
            </summary>
            <param name="hWnd">A handle to the window.</param>
            <param name="hWndInsertAfter">在Z顺序中位于定位的窗口之前的窗口位置。见 <see cref="T:SpaceCG.WindowsAPI.User32.SwpInsertAfter"/></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="cx"></param>
            <param name="cy"></param>
            <param name="wFlags">窗口大小和位置标志 <see cref="T:SpaceCG.WindowsAPI.User32.SwpFlags"/></param>
            <returns>如果函数成功，则返回值为非零。如果函数失败，则返回值为零。要获取扩展的错误信息，请调用 <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/> 或 <see cref="M:System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error"/> 。</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.SetWindowPos(System.IntPtr,SpaceCG.WindowsAPI.User32.SwpInsertAfter,System.Int32,System.Int32,System.Int32,System.Int32,SpaceCG.WindowsAPI.User32.SwpFlags)">
            <summary>
            更改子窗口，弹出窗口或顶级窗口的大小，位置和Z顺序；这些窗口是根据其在屏幕上的外观排序的；最顶部的窗口获得最高排名，并且是Z顺序中的第一个窗口。
            <para>如果使用 <see cref="!:SetWindowLong"/> 更改了某些窗口数据，则必须调用 <see cref="M:SpaceCG.WindowsAPI.User32.User32.SetWindowPos(System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,SpaceCG.WindowsAPI.User32.SwpFlags)"/> 才能使更改生效。对 uFlags 使用以下组合：SWP_NOMOVE | SWP_NOSIZE | SWP_NOZORDER | SWP_FRAMECHANGED。</para>
            <para>示例：SetWindowPos(new WindowInteropHelper(this).Handle., (IntPtr)HWND_TOPMOST, 0, 0, 0, 0, SwpFlags.SWP_NOMOVE | SwpFlags.SWP_NOSIZE); //将窗口 Z 序设置为最顶</para>
            <para>示例：SetWindowPos(hWnd, (IntPtr)HWND_TOPMOST, 10, 10, 800, 600, SwpFlags.SWP_NOZORDER ); //设置窗口大小及位置，忽略 Z 序</para>
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setwindowpos </para>
            </summary>
            <param name="hWnd">A handle to the window.</param>
            <param name="hWndInsertAfter">在Z顺序中位于定位的窗口之前的窗口位置。见 <see cref="T:SpaceCG.WindowsAPI.User32.SwpInsertAfter"/></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="cx"></param>
            <param name="cy"></param>
            <param name="wFlags">窗口大小和位置标志 <see cref="T:SpaceCG.WindowsAPI.User32.SwpFlags"/></param>
            <returns>如果函数成功，则返回值为非零。如果函数失败，则返回值为零。要获取扩展的错误信息，请调用 <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/> 或 <see cref="M:System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error"/> 。</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.MoveWindow(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            更改指定窗口的位置和尺寸。对于顶级窗口，位置和尺寸是相对于屏幕的左上角的。对于子窗口，它们相对于父窗口客户区的左上角。
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-movewindow </para>
            </summary>
            <param name="hWnd"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="nWidth"></param>
            <param name="nHeight"></param>
            <param name="bRepaint">指示是否要重新绘制窗口。
            <para>如果此参数为 TRUE，则窗口会收到一条消息。如果参数为 FALSE，则不会进行任何重绘。这适用于客户区域，非客户区域（包括标题栏和滚动栏）以及由于移动子窗口而暴露的父窗口的任何部分。</para></param>
            <returns>如果函数成功，则返回值为非零。</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.GetWindow(System.IntPtr,SpaceCG.WindowsAPI.User32.GwCmd)">
            <summary>
            检索与指定窗口具有指定关系（Z 顺序或所有者）的窗口的句柄。
            <para>#define GetNextWindow(hWnd, wCmd) GetWindow(hWnd, wCmd);//GW_HWNDNEXT,GW_HWNDPREV</para>
            <para>与循环调用 <see cref="M:SpaceCG.WindowsAPI.User32.User32.GetWindow(System.IntPtr,SpaceCG.WindowsAPI.User32.GwCmd)"/> 相比，<see cref="M:SpaceCG.WindowsAPI.User32.User32.EnumChildWindows(System.IntPtr,SpaceCG.WindowsAPI.User32.EnumChildProc,System.IntPtr)"/> 函数更可靠。调用 <see cref="M:SpaceCG.WindowsAPI.User32.User32.GetWindow(System.IntPtr,SpaceCG.WindowsAPI.User32.GwCmd)"/> 来执行此任务的应用程序可能会陷入无限循环或引用已被破坏的窗口的句柄。</para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-getwindow </para>
            </summary>
            <param name="hWnd">窗口的句柄。基于 uCmd 参数的值，检索到的窗口句柄是与此窗口相对的。</param>
            <param name="uCmd">指定窗口和要获取其句柄的窗口之间的关系</param>
            <returns>如果函数成功，则返回值为窗口句柄。如果不存在与指定窗口具有指定关系的窗口，则返回值为 NULL。要获取扩展的错误信息，请调用 <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/> 或 <see cref="M:System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error"/>。</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.GetWindowInfo(System.IntPtr,SpaceCG.WindowsAPI.User32.WINDOWINFO@)">
            <summary>
            检索有关指定窗口的信息。
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-getwindowinfo?redirectedfrom=MSDN </para>
            </summary>
            <param name="hwnd">要获取其信息的窗口的句柄。</param>
            <param name="pwi">指向 <see cref="T:SpaceCG.WindowsAPI.User32.WINDOWINFO"/> 结构的指针以接收信息。请注意，在调用此函数之前，必须将 cbSize 成员设置为 sizeof(<see cref="T:SpaceCG.WindowsAPI.User32.WINDOWINFO"/>)。</param>
            <returns>如果函数成功，则返回值为非零。如果函数失败，则返回值为零。
                <para>要获取扩展的错误信息，请调用 <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/> 或 <see cref="M:System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error"/>。</para>
            </returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.EnumWindows(SpaceCG.WindowsAPI.User32.EnumWindowsProc,System.IntPtr)">
            <summary>
            通过将句柄传递给每个窗口，依次传递到应用程序定义的回调函数，可以枚举屏幕上所有的顶级窗口。<see cref="M:SpaceCG.WindowsAPI.User32.User32.EnumWindows(SpaceCG.WindowsAPI.User32.EnumWindowsProc,System.IntPtr)"/> 继续，直到枚举最后一个顶级窗口或回调函数返回 FALSE 为止。
            <para>该 <see cref="M:SpaceCG.WindowsAPI.User32.User32.EnumWindows(SpaceCG.WindowsAPI.User32.EnumWindowsProc,System.IntPtr)"/> 的功能不枚举子窗口，与由拥有该系统拥有一些顶层窗口除外 <see cref="F:SpaceCG.WindowsAPI.User32.WindowStyle.WS_CHILD"/> 风格。</para>
            <para>该函数比循环调用 <see cref="M:SpaceCG.WindowsAPI.User32.User32.GetWindow(System.IntPtr,SpaceCG.WindowsAPI.User32.GwCmd)"/> 函数更可靠。调用 <see cref="M:SpaceCG.WindowsAPI.User32.User32.GetWindow(System.IntPtr,SpaceCG.WindowsAPI.User32.GwCmd)"/> 来执行此任务的应用程序可能会陷入无限循环或引用已被破坏的窗口的句柄。</para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-enumwindows </para>
            </summary>
            <param name="lpEnumFunc">指向应用程序定义的回调函数的指针。有关更多信息，请参见 <see cref="T:SpaceCG.WindowsAPI.User32.EnumWindowsProc"/>。</param>
            <param name="lParam">应用程序定义的值，将传递给回调函数。</param>
            <returns>如果函数成功，则返回值为非零。如果函数失败，则返回值为零。要获取扩展的错误信息，请调用 <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/> 或 <see cref="M:System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error"/>。
            <para>如果 EnumWindowsProc 返回零，则返回值也为零。在这种情况下，回调函数应调用 SetLastError 以获得有意义的错误代码，以将其返回给 <see cref="M:SpaceCG.WindowsAPI.User32.User32.EnumWindows(SpaceCG.WindowsAPI.User32.EnumWindowsProc,System.IntPtr)"/> 的调用者。</para></returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.EnumDesktopWindows(System.IntPtr,SpaceCG.WindowsAPI.User32.EnumWindowsProc,System.IntPtr)">
            <summary>
            枚举与指定桌面关联的所有顶级窗口。它将句柄传递给每个窗口，依次传递给应用程序定义的回调函数。
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-enumdesktopwindows?redirectedfrom=MSDN </para>
            </summary>
            <param name="hDesktop">[HDESK]要枚举其顶级窗口的桌面的句柄。该句柄由 <see cref="!:CreateDesktop"/>，<see cref="!:GetThreadDesktop"/>，<see cref="!:OpenDesktop"/> 或 <see cref="!:OpenInputDesktop"/> 函数返回，并且必须具有 DESKTOP_READOBJECTS 访问权限。
                <para>如果此参数为NULL，则使用当前桌面。</para>
            </param>
            <param name="lpfn">指向应用程序定义的 <see cref="T:SpaceCG.WindowsAPI.User32.EnumWindowsProc"/> 回调函数的指针 。</param>
            <param name="lParam">应用程序定义的值，将传递给回调函数。</param>
            <returns>如果函数失败或无法执行枚举，则返回值为零。
                <para>要获取扩展的错误信息，请调用 <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/> 或 <see cref="M:System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error"/>。如果失败，则必须确保回调函数设置 SetLastError。</para>
            </returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.EnumChildWindows(System.IntPtr,SpaceCG.WindowsAPI.User32.EnumChildProc,System.IntPtr)">
            <summary>
            通过将句柄传递给每个子窗口并依次传递给应用程序定义的回调函数，可以枚举属于指定父窗口的子窗口。<see cref="M:SpaceCG.WindowsAPI.User32.User32.EnumChildWindows(System.IntPtr,SpaceCG.WindowsAPI.User32.EnumChildProc,System.IntPtr)"/> 继续，直到枚举最后一个子窗口或回调函数返回 FALSE 为止。
            <para>如果子窗口创建了自己的子窗口，则 <see cref="M:SpaceCG.WindowsAPI.User32.User32.EnumChildWindows(System.IntPtr,SpaceCG.WindowsAPI.User32.EnumChildProc,System.IntPtr)"/> 也会枚举这些窗口。</para>
            <para>将正确枚举在枚举过程中以Z顺序移动或重新定位的子窗口。该函数不会枚举在枚举之前销毁的子窗口或在枚举过程中创建的子窗口。</para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-enumchildwindows </para>
            </summary>
            <param name="hWndParent">父窗口的句柄，其子窗口将被枚举。如果此参数为 NULL，则此函数等效于 <see cref="M:SpaceCG.WindowsAPI.User32.User32.EnumWindows(SpaceCG.WindowsAPI.User32.EnumWindowsProc,System.IntPtr)"/>。</param>
            <param name="lpEnumFunc">指向应用程序定义的回调函数的指针。有关更多信息，请参见 <see cref="T:SpaceCG.WindowsAPI.User32.EnumChildProc"/>。</param>
            <param name="lParam">应用程序定义的值，将传递给回调函数。</param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.SetWindowRgn(System.IntPtr,System.IntPtr,System.Boolean)">
            <summary>
            设置窗口的窗口区域。窗口区域确定系统允许绘图的窗口区域。系统不会显示位于窗口区域之外的窗口的任何部分。
            <para>若要获取窗口的窗口区域，请调用 <see cref="M:SpaceCG.WindowsAPI.User32.User32.GetWindowRgn(System.IntPtr,System.IntPtr)"/> 函数。</para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-setwindowrgn </para>
            </summary>
            <param name="hWnd">要设置其窗口区域的窗口的句柄。</param>
            <param name="hRgn">[HRGN] 区域的句柄。该功能将窗口的窗口区域设置为此区域。如果 hRgn 为 NULL，则该函数将窗口区域设置为 NULL。</param>
            <param name="bRedraw">指定在设置窗口区域后系统是否重画窗口。如果 bRedraw 为 TRUE，则系统将这样做；否则，事实并非如此。通常，如果窗口可见，则将 bRedraw 设置为TRUE。</param>
            <returns>如果函数成功，则返回值为非零。如果函数失败，则返回值为零。</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.GetWindowRgn(System.IntPtr,System.IntPtr)">
            <summary>
            获得一个窗口的窗口区域的副本。通过调用 <see cref="M:SpaceCG.WindowsAPI.User32.User32.SetWindowRgn(System.IntPtr,System.IntPtr,System.Boolean)"/> 函数来设置窗口的窗口区域。窗口区域确定系统允许绘图的窗口区域。系统不会显示位于窗口区域之外的窗口的任何部分。
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-getwindowrgn </para>
            </summary>
            <param name="hWnd">要获取其窗口区域的窗口句柄</param>
            <param name="hRgn">[HRGN] 处理将被修改为代表窗口区域的区域</param>
            <returns>返回 <see cref="T:SpaceCG.WindowsAPI.User32.GwrResult"/> 之一的结果。 </returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.GetWindowRect(System.IntPtr,SpaceCG.WindowsAPI.RECT@)">
            <summary>
            检索指定窗口的边界矩形的尺寸。尺寸以相对于屏幕左上角的屏幕坐标给出。
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-getwindowrect </para>
            </summary>
            <param name="hWnd">窗口句柄</param>
            <param name="lpRect">指向一个 <see cref="T:SpaceCG.WindowsAPI.RECT"/> 结构的指针，该结构接收窗口的左上角和右下角的屏幕坐标</param>
            <returns>如果函数成功，返回值为非零：如果函数失败，返回值为零</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.GetClientRect(System.IntPtr,SpaceCG.WindowsAPI.RECT@)">
            <summary>
            检索窗口的工作区的坐标。客户坐标指定客户区域的左上角和右下角。因为客户坐标是相对于窗口客户区的左上角的，所以左上角的坐标是（0,0）。
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-getclientrect?redirectedfrom=MSDN </para>
            </summary>
            <param name="hWnd">要获取其客户坐标的窗口的句柄。</param>
            <param name="lpRect">指向接收客户坐标的 RECT 结构的指针。在左和顶级成员是零。的右和底部构件包含该窗口的宽度和高度。</param>
            <returns>如果函数成功，则返回值为非零。如果函数失败，则返回值为零。要获取扩展的错误信息，请调用GetLastError。</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.FindWindow(System.String,System.String)">
            <summary>
            检索顶级窗口的句柄，该窗口的类名和窗口名与指定的字符串匹配。此功能不搜索子窗口。此功能不执行区分大小写的搜索。
            <para>要从指定的子窗口开始搜索子窗口，请使用 <see cref="M:SpaceCG.WindowsAPI.User32.User32.FindWindowEx(System.IntPtr,System.IntPtr,System.String,System.String)"/> 函数。</para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-findwindowa </para>
            </summary>
            <param name="lpClassName">[LPCSTR]如果 lpClassName 指向一个字符串，则它指定窗口类名称。类名可以是在 <see cref="!:RegisterClass"/> 或 <see cref="!:RegisterClassEx"/> 中注册的任何名称，也可以是任何预定义的控件类名称。
                <para>如果 lpClassName 为 NULL，它将找到标题与 lpWindowName 参数匹配的任何窗口</para>
            </param>
            <param name="lpWindowName">[LPCSTR]窗口名称（窗口标题）。如果此参数为 NULL，则所有窗口名称均匹配。</param>
            <returns>如果函数成功，返回值为具有指定类名和窗口名的窗口句柄；如果函数失败，返回值为 NULL。要获取扩展的错误信息，请调用 <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/> 或 <see cref="M:System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error"/>。</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.FindWindow(System.Byte[],System.String)">
            <summary>
            检索顶级窗口的句柄，该窗口的类名和窗口名与指定的字符串匹配。此功能不搜索子窗口。此功能不执行区分大小写的搜索。
            <para>要从指定的子窗口开始搜索子窗口，请使用 <see cref="M:SpaceCG.WindowsAPI.User32.User32.FindWindowEx(System.IntPtr,System.IntPtr,System.String,System.String)"/> 函数。</para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-findwindowa </para>
            </summary>
            <param name="lpClassName">[LPCSTR]如果 lpClassName 指向一个字符串，则它指定窗口类名称。类名可以是在 <see cref="!:RegisterClass"/> 或 <see cref="!:RegisterClassEx"/> 中注册的任何名称，也可以是任何预定义的控件类名称。
                <para>如果 lpClassName 为 NULL，它将找到标题与 lpWindowName 参数匹配的任何窗口</para>
            </param>
            <param name="lpWindowName">[LPCSTR]窗口名称（窗口标题）。如果此参数为 NULL，则所有窗口名称均匹配。</param>
            <returns>如果函数成功，返回值为具有指定类名和窗口名的窗口句柄；如果函数失败，返回值为 NULL。要获取扩展的错误信息，请调用 <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/> 或 <see cref="M:System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error"/>。</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.FindWindowEx(System.IntPtr,System.IntPtr,System.String,System.String)">
            <summary>
            检索其类名和窗口名与指定的字符串匹配的窗口的句柄。该功能搜索子窗口，从指定子窗口之后的子窗口开始。此功能不执行区分大小写的搜索。
            <para>如果 lpszWindow 参数不为 NULL，则 <see cref="M:SpaceCG.WindowsAPI.User32.User32.FindWindowEx(System.IntPtr,System.IntPtr,System.String,System.String)"/> 调用 <see cref="M:SpaceCG.WindowsAPI.User32.User32.GetWindowText(System.IntPtr,System.Text.StringBuilder,System.Int32)"/> 函数以检索窗口名称以进行比较。有关可能出现的潜在问题的描述，请参见 <see cref="M:SpaceCG.WindowsAPI.User32.User32.GetWindowText(System.IntPtr,System.Text.StringBuilder,System.Int32)"/> 。</para>
            <para>应用程序可以通过以下方式调用此函数： FindWindowEx(NULL, NULL, MAKEINTATOM(0x8000), NULL); 请注意，0x8000 是菜单类的原子。当应用程序调用此函数时，该函数检查是否正在显示该应用程序创建的上下文菜单。</para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-findwindowexa </para>
            </summary>
            <param name="hWndParent">父窗口要搜索其子窗口的句柄。
            <para>如果 hwndParent 为 NULL，则该函数使用桌面窗口作为父窗口。该功能在作为桌面子窗口的窗口之间搜索。如果 hwndParent 为 HWND_MESSAGE，则该函数搜索所有仅消息窗口。</para></param>
            <param name="hWndChildAfter">子窗口的句柄。搜索从Z顺序的下一个子窗口开始。子窗口必须是 hwndParent 的直接子窗口，而不仅仅是后代窗口。
            <para>如果 hwndChildAfter 为 NULL，则搜索从 hwndParent 的第一个子窗口开始。请注意，如果 hwndParent 和 hwndChildAfter 均为 NULL，则该函数将搜索所有顶级窗口和仅消息窗口。</para></param>
            <param name="lpszClass">由先前调用 <see cref="!:RegisterClass"/> 或 <see cref="!:RegisterClassEx"/> 函数创建的类名称或类原子。原子必须放在 lpszClass 的低位字中；高阶字必须为零。
                <para>如果 lpszClass 是一个字符串，则它指定窗口类名称。类名可以是在 <see cref="!:RegisterClass"/> 或 <see cref="!:RegisterClassEx"/> 中注册的任何名称，也可以是任何预定义的控件类名称，也可以是 MAKEINTATOM(0x8000)。在后一种情况下，0x8000 是菜单类的原子。</para></param>
            <param name="lpszWindow">窗口名称（窗口标题）。如果此参数为 NULL，则所有窗口名称均匹配。</param>
            <returns>如果函数成功，则返回值是具有指定类和窗口名称的窗口的句柄。如果函数失败，则返回值为 NULL。要获取扩展的错误信息，请调用 <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/> 或 <see cref="M:System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error"/>。</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.FindWindowEx(System.IntPtr,System.IntPtr,System.Byte[],System.String)">
            <summary>
            检索其类名和窗口名与指定的字符串匹配的窗口的句柄。该功能搜索子窗口，从指定子窗口之后的子窗口开始。此功能不执行区分大小写的搜索。
            <para>如果 lpszWindow 参数不为 NULL，则 <see cref="M:SpaceCG.WindowsAPI.User32.User32.FindWindowEx(System.IntPtr,System.IntPtr,System.String,System.String)"/> 调用 <see cref="M:SpaceCG.WindowsAPI.User32.User32.GetWindowText(System.IntPtr,System.Text.StringBuilder,System.Int32)"/> 函数以检索窗口名称以进行比较。有关可能出现的潜在问题的描述，请参见 <see cref="M:SpaceCG.WindowsAPI.User32.User32.GetWindowText(System.IntPtr,System.Text.StringBuilder,System.Int32)"/> 。</para>
            <para>应用程序可以通过以下方式调用此函数： FindWindowEx(NULL, NULL, MAKEINTATOM(0x8000), NULL); 请注意，0x8000 是菜单类的原子。当应用程序调用此函数时，该函数检查是否正在显示该应用程序创建的上下文菜单。</para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-findwindowexa </para>
            </summary>
            <param name="hWndParent">父窗口要搜索其子窗口的句柄。
            <para>如果 hwndParent 为 NULL，则该函数使用桌面窗口作为父窗口。该功能在作为桌面子窗口的窗口之间搜索。如果 hwndParent 为 HWND_MESSAGE，则该函数搜索所有仅消息窗口。</para></param>
            <param name="hWndChildAfter">子窗口的句柄。搜索从Z顺序的下一个子窗口开始。子窗口必须是 hwndParent 的直接子窗口，而不仅仅是后代窗口。
            <para>如果 hwndChildAfter 为 NULL，则搜索从 hwndParent 的第一个子窗口开始。请注意，如果 hwndParent 和 hwndChildAfter 均为 NULL，则该函数将搜索所有顶级窗口和仅消息窗口。</para></param>
            <param name="lpszClass">由先前调用 <see cref="!:RegisterClass"/> 或 <see cref="!:RegisterClassEx"/> 函数创建的类名称或类原子。原子必须放在 lpszClass 的低位字中；高阶字必须为零。
                <para>如果 lpszClass 是一个字符串，则它指定窗口类名称。类名可以是在 <see cref="!:RegisterClass"/> 或 <see cref="!:RegisterClassEx"/> 中注册的任何名称，也可以是任何预定义的控件类名称，也可以是 MAKEINTATOM(0x8000)。在后一种情况下，0x8000 是菜单类的原子。</para></param>
            <param name="lpszWindow">窗口名称（窗口标题）。如果此参数为 NULL，则所有窗口名称均匹配。</param>
            <returns>如果函数成功，则返回值是具有指定类和窗口名称的窗口的句柄。如果函数失败，则返回值为 NULL。要获取扩展的错误信息，请调用 <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/> 或 <see cref="M:System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error"/>。</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.SetForegroundWindow(System.IntPtr)">
            <summary>
            将创建指定窗口的线程带入前台并激活该窗口。
            <para>键盘输入直接指向窗口，并且为用户更改了各种视觉提示。系统向创建前景窗口的线程分配的优先级比向其他线程分配的优先级高。</para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-setforegroundwindow </para>
            </summary>
            <param name="hWnd"></param>
            <returns>如果将窗口带到前台，则返回值为非零。如果未将窗口带到前台，则返回值为零</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.GetForegroundWindow">
            <summary>
            检索前景窗口（用户当前正在使用的窗口）的句柄。系统向创建前景窗口的线程分配的优先级比向其他线程分配的优先级高。
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-getforegroundwindow</para>
            </summary>
            <returns>返回值是前景窗口的句柄。在某些情况下，例如某个窗口失去激活状态，前景窗口可以为 NULL。</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.GetDesktopWindow">
            <summary>
            检索桌面窗口的句柄。桌面窗口覆盖整个屏幕。桌面窗口是在其上绘制其他窗口的区域。
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-getdesktopwindow </para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.GetActiveWindow">
            <summary>
            将窗口句柄检索到附加到调用线程的消息队列的活动窗口。
            <para>要获取前景窗口的句柄，可以使用 <see cref="M:SpaceCG.WindowsAPI.User32.User32.GetForegroundWindow"/>。</para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-getactivewindow </para>
            </summary>
            <returns>返回值是附加到调用线程的消息队列的活动窗口的句柄。否则，返回值为 NULL。</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.SetActiveWindow(System.IntPtr)">
            <summary>
            激活一个窗口。该窗口必须附加到调用线程的消息队列。
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-setactivewindow </para>
            </summary>
            <param name="hWnd">要激活的顶层窗口的句柄。</param>
            <returns>如果函数成功，则返回值是先前处于活动状态的窗口的句柄。如果函数失败，则返回值为 NULL。要获取扩展的错误信息，请调用 <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/> 或 <see cref="M:System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error"/>。</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.GetFocus">
            <summary>
            如果窗口附加到调用线程的消息队列，则检索具有键盘焦点的窗口的句柄。
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-getfocus </para>
            </summary>
            <returns>返回值是具有键盘焦点的窗口的句柄。如果调用线程的消息队列没有与键盘焦点相关联的窗口，则返回值为 NULL。</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.GetCapture">
            <summary>
            检索已捕获鼠标的窗口的句柄（如果有）。一次只能捕获一个窗口。无论光标是否在其边界内，此窗口都会接收鼠标输入。
            <para>一个 NULL 的返回值意味着当前线程未捕获鼠标。但是，很可能另一个线程或进程捕获了鼠标。要获取另一个线程上的捕获窗口的句柄，请使用 <see cref="!:GetGUIThreadInfo"/> 函数。</para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-getcapture </para>
            </summary>
            <returns>返回值是与当前线程关联的捕获窗口的句柄。如果线程中没有窗口捕获到鼠标，则返回值为 NULL。</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.SetCapture(System.IntPtr)">
            <summary>
            将鼠标捕获设置为属于当前线程的指定窗口。当鼠标悬停在捕获窗口上方时，或者当鼠标悬停在捕获窗口上方且按钮仍处于按下状态时，按下鼠标按钮时，<see cref="M:SpaceCG.WindowsAPI.User32.User32.SetCapture(System.IntPtr)"/> 捕获鼠标输入。一次只能捕获一个窗口。
            <para>如果鼠标光标位于另一个线程创建的窗口上，则仅当按下鼠标按钮时，系统才会将鼠标输入定向到指定的窗口。</para>
            <para>只有前景窗口可以捕获鼠标。当后台窗口尝试这样做时，该窗口仅接收有关光标热点位于窗口可见部分之内时发生的鼠标事件的消息。同样，即使前景窗口捕获了鼠标，用户仍然可以单击另一个窗口，将其置于前景。</para>
            <para>当窗口不再需要所有鼠标输入时，创建窗口的线程应调用 <see cref="M:SpaceCG.WindowsAPI.User32.User32.ReleaseCapture"/> 函数来释放鼠标。此功能不能用于捕获用于其他进程的鼠标输入。捕获鼠标后，菜单热键和其他键盘加速器不起作用。</para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-setcapture?redirectedfrom=MSDN </para>
            </summary>
            <param name="hWnd">当前线程中要捕获鼠标的窗口的句柄。</param>
            <returns>返回值是先前捕获鼠标的窗口的句柄。如果没有这样的窗口，则返回值为 NULL。</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.ReleaseCapture">
            <summary>
            从当前线程的窗口中释放鼠标捕获，并恢复正常的鼠标输入处理。捕获光标的窗口将接收所有鼠标输入，而与光标的位置无关，除非在光标热点位于另一个线程的窗口中时单击鼠标按钮。
            <para>应用程序在调用 <see cref="M:SpaceCG.WindowsAPI.User32.User32.SetCapture(System.IntPtr)"/> 函数之后调用此函数。</para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-releasecapture?redirectedfrom=MSDN </para>
            </summary>
            <returns>如果函数成功，则返回值为非零。如果函数失败，则返回值为零。要获取扩展的错误信息，请调用 <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/> 或 <see cref="M:System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error"/>。</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.GetClassName(System.IntPtr,System.Text.StringBuilder,System.Int32)">
            <summary>
            检索指定窗口所属的类的名称。
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-getclassname </para>
            </summary>
            <param name="hWnd">窗口的句柄及间接给出的窗口所属的类</param>
            <param name="lpClassName">[LPSTR]类名字符串。
                <para>注意：这里 lpClassName 需要设置容量大小，否则会出现意外的错误；例如：StringBuilder sb = new StringBuilder(255); </para></param>
            <param name="nMaxCount">lpClassName 缓冲区的长度，以字符为单位。缓冲区必须足够大以包含终止的空字符。否则，类名字符串将被截断为 nMaxCount-1 字符。</param>
            <returns>如果函数成功，则返回值是复制到缓冲区的字符数，不包括终止的空字符。如果函数失败，则返回值为零。要获取扩展的错误信息，请调用 <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/> 或 <see cref="M:System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error"/> 函数。</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.GetWindowTextLength(System.IntPtr)">
            <summary>
            检索指定窗口的标题栏文本的长度（以字符为单位）（如果窗口具有标题栏）。如果指定的窗口是控件，则该函数将检索控件内文本的长度。但是 <see cref="M:SpaceCG.WindowsAPI.User32.User32.GetWindowTextLength(System.IntPtr)"/> 无法在另一个应用程序中检索编辑控件的文本长度。
            <para>如果目标窗口由当前进程拥有，则 <see cref="M:SpaceCG.WindowsAPI.User32.User32.GetWindowTextLength(System.IntPtr)"/> 导致将 <see cref="F:SpaceCG.WindowsAPI.User32.MessageType.WM_GETTEXTLENGTH"/> 消息发送到指定的窗口或控件。</para>
            <para>要获取文本的确切长度，请使用 <see cref="F:SpaceCG.WindowsAPI.User32.MessageType.WM_GETTEXT"/>，LB_GETTEXT 或 CB_GETLBTEXT 消息或 <see cref="M:SpaceCG.WindowsAPI.User32.User32.GetWindowText(System.IntPtr,System.Text.StringBuilder,System.Int32)"/> 函数。</para>
            <para>在某些情况下，<see cref="M:SpaceCG.WindowsAPI.User32.User32.GetWindowTextLength(System.IntPtr)"/> 函数可能返回的值大于文本的实际长度。这是由于 ANSI 和 Unicode 的某些混合而发生的，并且是由于系统允许文本中可能存在双字节字符集（DBCS）字符。
            但是返回值将始终至少与文本的实际长度一样大。因此，您始终可以使用它来指导缓冲区分配。当应用程序同时使用 ANSI 函数和使用 Unicode 的通用对话框时，就可能出现此现象。当应用程序的窗口过程为 Unicode 的窗口使用 ANSI 版本的 <see cref="M:SpaceCG.WindowsAPI.User32.User32.GetWindowTextLength(System.IntPtr)"/> 或 <see cref="M:SpaceCG.WindowsAPI.User32.User32.GetWindowTextLength(System.IntPtr)"/> 的 Unicode 版本时，也会发生这种情况。窗口过程为ANSI的窗口。有关 ANSI 和 ANSI 函数的更多信息，请参见函数原型约定。</para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-getwindowtextlengtha </para>
            </summary>
            <param name="hWnd">窗口或控件的句柄。</param>
            <returns>如果函数成功，则返回值是文本的长度（以字符为单位）。在某些情况下，该值实际上可能大于文本的长度。
            <para>如果窗口没有文本，则返回值为零。要获取扩展的错误信息，请调用 <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/> 或 <see cref="M:System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error"/>。</para>
            </returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.GetWindowText(System.IntPtr,System.Text.StringBuilder,System.Int32)">
            <summary>
            将指定窗口标题栏的文本（如果有的话）复制到缓冲区中。如果指定的窗口是控件，则复制控件的文本。但是 <see cref="M:SpaceCG.WindowsAPI.User32.User32.GetWindowText(System.IntPtr,System.Text.StringBuilder,System.Int32)"/> 无法在另一个应用程序中检索控件的文本。
            <para>GetWindowTextA(LPSTR), GetWindowTextW(LPWSTR) </para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-getwindowtexta </para>
            </summary>
            <param name="hWnd">包含文本的窗口或控件的句柄</param>
            <param name="lpString">[LPSTR]将接收文本的缓冲区。如果字符串与缓冲区一样长或更长，则字符串将被截断并以空字符终止。
            <para>注意：这里 lpString 最好是设置容量大小，例如：StringBuilder sb = new StringBuilder(255); </para></param>
            <param name="nMaxCount">要复制到缓冲区的最大字符数，包括空字符。如果文本超过此限制，则会被截断。</param>
            <returns>如果函数成功，则返回值是所复制字符串的长度（以字符为单位），不包括终止的空字符。
                <para>如果窗口没有标题栏或文本，如果标题栏为空，或者窗口或控件句柄无效，则返回值为零。要获取扩展的错误信息，请调用 <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/> 或 <see cref="M:System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error"/>。</para>
            </returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.SetWindowText(System.IntPtr,System.String)">
            <summary>
            更改指定窗口标题栏的文本（如果有的话）。如果指定的窗口是控件，则更改控件的文本。但是，<see cref="M:SpaceCG.WindowsAPI.User32.User32.SetWindowText(System.IntPtr,System.String)"/> 无法在另一个应用程序中更改控件的文本。
            <para>要在另一个进程中设置控件的文本，请直接发送 <see cref="F:SpaceCG.WindowsAPI.User32.MessageType.WM_SETTEXT"/> 消息，而不是调用 <see cref="M:SpaceCG.WindowsAPI.User32.User32.SetWindowText(System.IntPtr,System.String)"/>。 </para>
            <para>该函数 <see cref="M:SpaceCG.WindowsAPI.User32.User32.SetWindowText(System.IntPtr,System.String)"/> 函数不展开制表符（ASCII代码0×09）。制表符显示为竖线（|）字符。</para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-setwindowtexta </para>
            </summary>
            <param name="hWnd">要更改其文本的窗口或控件的句柄。</param>
            <param name="lpString">[LPCSTR] 新标题或控件文本</param>
            <returns>如果函数成功，则返回值为非零。如果函数失败，则返回值为零。要获取扩展的错误信息，请调用 <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/> 或 <see cref="M:System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error"/>。</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.SetWindowText(System.IntPtr,System.Text.StringBuilder)">
            <summary>
            更改指定窗口标题栏的文本（如果有的话）。如果指定的窗口是控件，则更改控件的文本。但是，<see cref="M:SpaceCG.WindowsAPI.User32.User32.SetWindowText(System.IntPtr,System.String)"/> 无法在另一个应用程序中更改控件的文本。
            <para>要在另一个进程中设置控件的文本，请直接发送 <see cref="F:SpaceCG.WindowsAPI.User32.MessageType.WM_SETTEXT"/> 消息，而不是调用 <see cref="M:SpaceCG.WindowsAPI.User32.User32.SetWindowText(System.IntPtr,System.String)"/>。 </para>
            <para>该函数 <see cref="M:SpaceCG.WindowsAPI.User32.User32.SetWindowText(System.IntPtr,System.String)"/> 函数不展开制表符（ASCII代码0×09）。制表符显示为竖线（|）字符。</para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-setwindowtexta </para>
            </summary>
            <param name="hWnd">要更改其文本的窗口或控件的句柄。</param>
            <param name="lpString">[LPCSTR] 新标题或控件文本</param>
            <returns>如果函数成功，则返回值为非零。如果函数失败，则返回值为零。要获取扩展的错误信息，请调用 <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/> 或 <see cref="M:System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error"/>。</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.EnableWindow(System.IntPtr,System.Boolean)">
            <summary>
            启用或禁用向指定窗口或控件的鼠标和键盘输入。禁用输入后，该窗口不会接收到诸如鼠标单击和按键之类的输入。启用输入后，窗口将接收所有输入。
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-enablewindow </para>
            </summary>
            <param name="hWnd">要启用或禁用的窗口句柄。</param>
            <param name="bEnable">指示是启用还是禁用窗口。如果此参数为 TRUE，则启用窗口。如果参数为 FALSE，则禁用窗口。</param>
            <returns>如果以前禁用了窗口，则返回值为非零。如果该窗口先前未禁用，则返回值为零。</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.IsWindowEnabled(System.IntPtr)">
            <summary>
            确定是否为鼠标和键盘输入启用了指定的窗口。
            <para>子窗口仅在启用且可见的情况下才接收输入。</para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-iswindowenabled </para>
            </summary>
            <param name="hWnd">要测试的窗口的句柄。</param>
            <returns>如果启用了窗口，则返回值为非零。如果未启用该窗口，则返回值为零。</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.IsWindowVisible(System.IntPtr)">
            <summary>
            确定指定窗口的可见性状态。
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-iswindowvisible </para>
            </summary>
            <param name="hWnd">要测试的窗口的句柄。</param>
            <returns>如果指定的窗口，其父窗口，其父级的父窗口等具有 <see cref="F:SpaceCG.WindowsAPI.User32.WindowStyle.WS_VISIBLE"/> 样式，则返回值为非零。否则，返回值为零。
            <para>因为返回值指定窗口是否具有 <see cref="F:SpaceCG.WindowsAPI.User32.WindowStyle.WS_VISIBLE"/> 样式，所以即使该窗口被其他窗口完全遮盖了，返回值也可能为非零。</para>
            </returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.IsWindow(System.IntPtr)">
            <summary>
            确定指定的窗口句柄是否标识现有窗口。
            <para>线程不应对未创建的窗口使用 IsWindow，因为调用此函数后该窗口可能会被破坏。此外，由于窗口句柄被回收，因此该句柄甚至可以指向其他窗口。</para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-iswindow </para>
            </summary>
            <param name="hWnd">要测试的窗口的句柄。</param>
            <returns>如果窗口句柄标识现有窗口，则返回值为非零。如果窗口句柄无法识别现有窗口，则返回值为零。</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.IsWindowUnicode(System.IntPtr)">
            <summary>
            确定指定的窗口是否为本地 Unicode 窗口。
            <para>如果窗口类是使用 ANSI 版本的 <see cref="!:RegisterClass"/>（RegisterClassA）注册的，则窗口的字符集是 ANSI。如果窗口类是使用 Unicode 版本的 <see cref="!:RegisterClass"/>（RegisterClassW）注册的，则窗口的字符集为 Unicode。</para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-iswindowunicode </para>
            </summary>
            <param name="hWnd">要测试的窗口的句柄。</param>
            <returns>如果该窗口是本机 Unicode 窗口，则返回值为非零。如果该窗口不是本机 Unicode 窗口，则返回值为零。该窗口是本机 ANSI 窗口。</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.IsChild(System.IntPtr,System.IntPtr)">
            <summary>
            确定窗口是指定父窗口的子窗口还是子窗口。子窗口是指定父窗口的直接后代（如果该父窗口在父窗口的链中）；父窗口链从原始重叠窗口或弹出窗口通向子窗口。
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-ischild </para>
            </summary>
            <param name="hWndParent">父窗口的句柄。</param>
            <param name="hWnd">要测试的窗口的句柄。</param>
            <returns>如果该窗口是指定父窗口的子窗口或子窗口，则返回值为非零。如果该窗口不是指定父窗口的子窗口或子窗口，则返回值为零。</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.IsZoomed(System.IntPtr)">
            <summary>
            确定窗口是否最大化。
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-iszoomed </para>
            </summary>
            <param name="hWnd">要测试的窗口的句柄。</param>
            <returns>如果缩放窗口，则返回值为非零。如果窗口未缩放，则返回值为零。</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.IsIconic(System.IntPtr)">
            <summary>
            确定指定的窗口是否最小化（图标）。
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-isiconic </para>
            </summary>
            <param name="hWnd">要测试的窗口的句柄。</param>
            <returns>如果窗口是标志性的，则返回值为非零。如果窗口不是标志性的，则返回值为零。</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.ShowWindow(System.IntPtr,SpaceCG.WindowsAPI.User32.SwCmd)">
            <summary>
            设置窗口的显示状态。
            <para>要在显示或隐藏窗口时执行某些特殊效果，请使用 <see cref="M:SpaceCG.WindowsAPI.User32.User32.AnimateWindow(System.IntPtr,System.UInt32,SpaceCG.WindowsAPI.User32.AwFlags)"/>。</para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-showwindow </para>
            </summary>
            <param name="hWnd"></param>
            <param name="nCmdShow">[int] 控制窗口的显示方式 <see cref="T:SpaceCG.WindowsAPI.User32.SwCmd"/></param>
            <returns>如果该窗口以前是可见的，则返回值为非零。如果该窗口以前是隐藏的，则返回值为零。</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.ShowWindowAsync(System.IntPtr,SpaceCG.WindowsAPI.User32.SwCmd)">
            <summary>
            设置指定窗口的显示状态，而无需等待操作完成。
            <para>要在显示或隐藏窗口时执行某些特殊效果，请使用 <see cref="M:SpaceCG.WindowsAPI.User32.User32.AnimateWindow(System.IntPtr,System.UInt32,SpaceCG.WindowsAPI.User32.AwFlags)"/>。</para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-showwindowasync </para>
            </summary>
            <param name="hWnd"></param>
            <param name="nCmdShow">[int] 控制窗口的显示方式 <see cref="T:SpaceCG.WindowsAPI.User32.SwCmd"/></param>
            <returns>如果该窗口以前是可见的，则返回值为非零。如果该窗口以前是隐藏的，则返回值为零。</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.CreateWindow(System.String,System.String,SpaceCG.WindowsAPI.User32.WindowStyle,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr,System.Object)">
            <summary>
            创建一个重叠窗口，弹出窗口或子窗口。它指定窗口类，窗口标题，窗口样式，以及（可选）窗口的初始位置和大小。该函数还指定窗口的父级或所有者（如果有）以及窗口的菜单。
            <para>除了 <see cref="M:SpaceCG.WindowsAPI.User32.User32.CreateWindow(System.String,System.String,SpaceCG.WindowsAPI.User32.WindowStyle,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr,System.Object)"/> 支持的样式之外，要使用扩展的窗口样式，请使用 <see cref="M:SpaceCG.WindowsAPI.User32.User32.CreateWindowEx(SpaceCG.WindowsAPI.User32.WindowStyleEx,System.String,System.String,SpaceCG.WindowsAPI.User32.WindowStyle,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr,System.Object)"/> 函数。</para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-createwindowexa </para>
            </summary>
            <param name="lpClassName"></param>
            <param name="lpWindowName"></param>
            <param name="dwStyle"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="hwndParent"></param>
            <param name="hMenu"></param>
            <param name="hInstance"></param>
            <param name="lpParam">[LPVOID]</param>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.CreateWindowEx(SpaceCG.WindowsAPI.User32.WindowStyleEx,System.String,System.String,SpaceCG.WindowsAPI.User32.WindowStyle,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr,System.Object)">
            <summary>
            创建具有扩展窗口样式的重叠窗口，弹出窗口或子窗口；否则，此函数与 <see cref="M:SpaceCG.WindowsAPI.User32.User32.CreateWindow(System.String,System.String,SpaceCG.WindowsAPI.User32.WindowStyle,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr,System.Object)"/> 函数相同。
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-createwindowexa </para>
            </summary>
            <param name="dwExStyle">正在创建的窗口的扩展窗口样式。有关可能值的列表，请参见 <see cref="T:SpaceCG.WindowsAPI.User32.WindowStyleEx"/>。</param>
            <param name="lpClassName"></param>
            <param name="lpWindowName"></param>
            <param name="dwStyle"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="hwndParent"></param>
            <param name="hMenu"></param>
            <param name="hInstance"></param>
            <param name="lpParam"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.CloseWindow(System.IntPtr)">
            <summary>
            最小化（但不破坏）指定的窗口。
            <para>要销毁窗口，应用程序必须使用 <see cref="M:SpaceCG.WindowsAPI.User32.User32.DestroyWindow(System.IntPtr)"/> 函数。</para>
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-closewindow </para>
            </summary>
            <param name="hWnd"></param>
            <returns>如果函数成功，则返回值为非零。如果函数失败，则返回值为零。要获取扩展的错误信息，请调用 <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/> 或 <see cref="M:System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error"/>。</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.DestroyWindow(System.IntPtr)">
            <summary>
            销毁指定的窗口。
            <para>如果指定的窗口是父窗口或所有者窗口，则 <see cref="M:SpaceCG.WindowsAPI.User32.User32.DestroyWindow(System.IntPtr)"/> 在销毁父窗口或所有者窗口时会自动销毁关联的子窗口或所有者窗口。该函数首先销毁子窗口或所有者窗口，然后销毁父窗口或所有者窗口。</para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-destroywindow </para>
            </summary>
            <param name="hWnd"></param>
            <returns>如果函数成功，则返回值为非零。如果函数失败，则返回值为零。要获取扩展的错误信息，请调用 <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/> 或 <see cref="M:System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error"/>。</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.SwitchToThisWindow(System.IntPtr,System.Boolean)">
            <summary>
            将焦点切换到指定的窗口，并将其置于前景。
            <para>通常调用此函数来维护窗口 Z 顺序。</para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-switchtothiswindow </para>
            </summary>
            <param name="hWnd">窗口的句柄。</param>
            <param name="fUnknown">TRUE 此参数指示窗口正在被切换到使用 Alt/CTL+Tab 键序列。否则，此参数应为 FALSE。</param>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.SendMessage(System.IntPtr,SpaceCG.WindowsAPI.User32.MessageType,System.IntPtr,System.IntPtr)">
            <summary>
            将指定的消息发送到一个或多个窗口。该 SendMessage 函数的函数调用指定的窗口的窗口过程，并不会返回，直到窗口过程已经处理了该消息。
            <para>需要使用 HWND_BROADCAST 进行通信的应用程序应使用 <see cref="!:RegisterWindowMessage"/> 函数来获取用于应用程序间通信的唯一消息。</para>
            <para>要发送消息并立即返回，请使用 <see cref="!:SendMessageCallback"/> 或 <see cref="!:SendNotifyMessage"/> 函数。要将消息发布到线程的消息队列中并立即返回，请使用 <see cref="M:SpaceCG.WindowsAPI.User32.User32.PostMessage(System.IntPtr,SpaceCG.WindowsAPI.User32.MessageType,System.IntPtr,System.IntPtr)"/> 或 <see cref="!:PostThreadMessage"/> 函数。</para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-sendmessage </para>
            </summary>
            <param name="hWnd">窗口的句柄，其窗口过程将接收到该消息。如果此参数为 HWND_BROADCAST((HWND)0xFFFF)，则消息将发送到系统中的所有顶级窗口，包括禁用或不可见的无主窗口，重叠的窗口和弹出窗口；但是消息不会发送到子窗口。
            <para>消息发送受 UIPI 约束。进程的线程只能将消息发送到完整性级别较低或相等的进程中的线程的消息队列。</para></param>
            <param name="Msg">要发送的消息。</param>
            <param name="wParam">其他特定于消息的信息。</param>
            <param name="lParam">其他特定于消息的信息。</param>
            <returns>返回值指定消息处理的结果；这取决于发送的消息。使用 <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/> 或 <see cref="M:System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error"/> 检索错误。</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.PostMessage(System.IntPtr,SpaceCG.WindowsAPI.User32.MessageType,System.IntPtr,System.IntPtr)">
            <summary>
            将消息放置（张贴）在与创建指定窗口的线程相关联的消息队列中，并在不等待线程处理消息的情况下返回消息。
            <para>要将消息发布到与线程关联的消息队列中，请使用 <see cref="!:PostThreadMessage"/> 函数。</para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-postmessagea </para>
            </summary>
            <param name="hWnd">窗口的句柄，其窗口过程将接收消息。特殊值：
            <para>HWND_BROADCAST((HWND)0xFFFF) 该消息将发布到系统中的所有顶级窗口，包括禁用或不可见的无主窗口，重叠的窗口和弹出窗口。该消息未发布到子窗口。</para>
            <para>NULL 该函数的行为就像到呼叫 <see cref="!:PostThreadMessage"/> 与 dwThreadId 参数集到当前线程的标识符。</para>
            </param>
            <param name="Msg">要发布的消息类型</param>
            <param name="wParam">[WPARAM] 其他特定于消息的信息。</param>
            <param name="lParam">[LPARAM] 其他特定于消息的信息。</param>
            <returns>如果函数成功，则返回值为非零。如果函数失败，则返回值为零。要获取扩展的错误信息，请调用 <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/> 或 <see cref="M:System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error"/> </returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.GetMessage(SpaceCG.WindowsAPI.User32.MSG@,System.IntPtr,System.UInt32,System.UInt32)">
            <summary>
            从调用线程的消息队列中检索消息。该函数分派传入的已发送消息，直到已发布的消息可供检索为止。与 <see cref="M:SpaceCG.WindowsAPI.User32.User32.GetMessage(SpaceCG.WindowsAPI.User32.MSG@,System.IntPtr,System.UInt32,System.UInt32)"/> 不同 <see cref="M:SpaceCG.WindowsAPI.User32.User32.PeekMessage(SpaceCG.WindowsAPI.User32.MSG@,System.IntPtr,System.UInt32,System.UInt32,System.UInt32)"/> 函数在返回之前不等待消息发布。
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-getmessage </para>
            </summary>
            <param name="lpMsg">[LPMSG] 指向MSG结构的指针，该结构从线程的消息队列接收消息信息。</param>
            <param name="hWnd">要获取其消息的窗口的句柄。该窗口必须属于当前线程。
            <para>如果 hWnd 为 NULL，则 <see cref="M:SpaceCG.WindowsAPI.User32.User32.GetMessage(SpaceCG.WindowsAPI.User32.MSG@,System.IntPtr,System.UInt32,System.UInt32)"/> 检索属于当前线程的任何窗口的消息，以及当前线程的消息队列中 hwnd 值为 NULL 的消息（请参阅MSG结构）。因此，如果 hWnd 为 NULL，则将同时处理窗口消息和线程消息。</para>
            <para>如果 hWnd 为 -1，则 <see cref="M:SpaceCG.WindowsAPI.User32.User32.GetMessage(SpaceCG.WindowsAPI.User32.MSG@,System.IntPtr,System.UInt32,System.UInt32)"/> 仅检索当前线程的消息队列中其 hwnd 值为 NULL 的消息，即由 <see cref="M:SpaceCG.WindowsAPI.User32.User32.PostMessage(System.IntPtr,SpaceCG.WindowsAPI.User32.MessageType,System.IntPtr,System.IntPtr)"/>（当 hWnd 参数为 NULL）或 <see cref="!:PostThreadMessage"/> 发布的线程消息 。</para>
            </param>
            <param name="wMsgFilterMin">要检索的最低消息值的整数值。使用 <see cref="!:MessageType.WM_KEYFIRST"/>(0x0100) 指定第一条键盘消息，或使用 <see cref="!:MessageType.WM_MOUSEFIRST"/>(0x0200) 指定第一条鼠标消息。</param>
            <param name="wMsgFilterMax">要检索的最高消息值的整数值。使用 <see cref="!:MessageType.WM_KEYLAST"/>  指定最后的键盘消息，或使用 <see cref="!:MessageType.WM_MOUSELAST"/>  指定最后的鼠标消息。</param>
            <returns>如果函数检索到 <see cref="F:SpaceCG.WindowsAPI.User32.MessageType.WM_QUIT"/> 以外的消息，则返回值为非零。如果该函数检索 <see cref="F:SpaceCG.WindowsAPI.User32.MessageType.WM_QUIT"/> 消息，则返回值为零。
            <para>如果有错误，则返回值为-1。例如，如果 hWnd 是无效的窗口句柄或 lpMsg 是无效的指针，该函数将失败。要获取扩展的错误信息，请调用 <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/> 或 <see cref="M:System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error"/>。</para>
            </returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.PeekMessage(SpaceCG.WindowsAPI.User32.MSG@,System.IntPtr,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            调度传入的已发送消息，检查线程消息队列中是否有已发布消息，并检索消息（如果存在）。
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-peekmessagea </para>
            </summary>
            <param name="lpMsg">[LPMSG] 指向接收消息信息的 <see cref="T:SpaceCG.WindowsAPI.User32.MSG"/> 结构的指针。</param>
            <param name="hWnd">要获取其消息的窗口的句柄。该窗口必须属于当前线程。
            <para>如果 hWnd 为 NULL，则 <see cref="M:SpaceCG.WindowsAPI.User32.User32.PeekMessage(SpaceCG.WindowsAPI.User32.MSG@,System.IntPtr,System.UInt32,System.UInt32,System.UInt32)"/> 检索属于当前线程的任何窗口的消息，以及当前线程的消息队列中 hwnd 值为 NULL 的消息（请参阅 <see cref="T:SpaceCG.WindowsAPI.User32.MSG"/> 结构）。因此，如果 hWnd 为 NULL，则将同时处理窗口消息和线程消息。</para>
            <para>如果 hWnd 为 -1，则 <see cref="M:SpaceCG.WindowsAPI.User32.User32.PeekMessage(SpaceCG.WindowsAPI.User32.MSG@,System.IntPtr,System.UInt32,System.UInt32,System.UInt32)"/> 仅检索当前线程的消息队列中其 hwnd 值为 NULL 的消息，即，由 <see cref="M:SpaceCG.WindowsAPI.User32.User32.PostMessage(System.IntPtr,SpaceCG.WindowsAPI.User32.MessageType,System.IntPtr,System.IntPtr)"/>（当 hWnd 参数为 NULL）或 <see cref="!:PostThreadMessage"/> 发布的线程消息 。</para>
            </param>
            <param name="wMsgFilterMin">在要检查的消息范围内的第一条消息的值。使用 <see cref="!:MessageType.WM_KEYFIRST"/>(0x0100) 指定第一条键盘消息，或使用  <see cref="!:MessageType.WM_MOUSEFIRST"/>(0x0200) 指定第一条鼠标消息。
                <para>如果 wMsgFilterMin 和 wMsgFilterMax 都为零，则 PeekMessage 返回所有可用消息（即，不执行范围过滤）。</para>
            </param>
            <param name="wMsgFilterMax">要检查的消息范围中的最后一条消息的值。使用 <see cref="!:MessageType.WM_KEYLAST"/> 指定最后的键盘消息，或使用 <see cref="!:MessageType.WM_MOUSELAST"/> 指定最后的鼠标消息。
                <para>如果 wMsgFilterMin 和 wMsgFilterMax 都为零，则 <see cref="M:SpaceCG.WindowsAPI.User32.User32.PeekMessage(SpaceCG.WindowsAPI.User32.MSG@,System.IntPtr,System.UInt32,System.UInt32,System.UInt32)"/> 返回所有可用消息（即，不执行范围过滤）。</para>
            </param>
            <param name="wRemoveMsg">指定如何处理消息 <see cref="T:SpaceCG.WindowsAPI.User32.PmFlags"/>。</param>
            <returns>如果有消息，则返回值为非零。如果没有可用消息，则返回值为零。</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.CallWindowProc(SpaceCG.WindowsAPI.User32.WindowProc,System.IntPtr,SpaceCG.WindowsAPI.User32.MessageType,System.IntPtr,System.IntPtr)">
            <summary>
            将消息信息传递到指定的窗口过程。
            <para>使用 <see cref="M:SpaceCG.WindowsAPI.User32.User32.CallWindowProc(SpaceCG.WindowsAPI.User32.WindowProc,System.IntPtr,SpaceCG.WindowsAPI.User32.MessageType,System.IntPtr,System.IntPtr)"/> 函数进行窗口子类化。通常，具有相同类的所有窗口共享一个窗口过程。子类是具有相同类的一个窗口或一组窗口，其消息在传递给该类的窗口过程之前，已被另一个（或多个）过程拦截和处理。</para>
            <para>该 <see cref="!:SetWindowLong"/> 函数功能改变与特定窗口相关的窗口过程，导致系统调用新的窗口过程而不是以前一个创建子类。应用程序必须通过调用 <see cref="M:SpaceCG.WindowsAPI.User32.User32.CallWindowProc(SpaceCG.WindowsAPI.User32.WindowProc,System.IntPtr,SpaceCG.WindowsAPI.User32.MessageType,System.IntPtr,System.IntPtr)"/> 将新窗口过程未处理的任何消息传递给前一个窗口过程。这允许应用程序创建一系列窗口过程。</para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-callwindowproca </para>
            </summary>
            <param name="lpPrevWndFunc">上一个窗口过程。如果通过在 nIndex 参数设置为 GWL_WNDPROC 或 DWL_DLGPROC 的情况下调用 <see cref="!:GetWindowLong"/> 函数获得此值，则它实际上是窗口或对话框过程的地址，或者是仅对 <see cref="M:SpaceCG.WindowsAPI.User32.User32.CallWindowProc(SpaceCG.WindowsAPI.User32.WindowProc,System.IntPtr,SpaceCG.WindowsAPI.User32.MessageType,System.IntPtr,System.IntPtr)"/> 有意义的特殊内部值。</param>
            <param name="hWnd">接收消息的窗口过程的句柄。</param>
            <param name="Msg">[UINT] 消息类型</param>
            <param name="wParam">其他特定于消息的信息。此参数的内容取决于 Msg 参数的值。</param>
            <param name="lParam">其他特定于消息的信息。此参数的内容取决于 Msg 参数的值。</param>
            <returns>返回值指定消息处理的结果，并取决于发送的消息。</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.DefWindowProc(System.IntPtr,SpaceCG.WindowsAPI.User32.MessageType,System.IntPtr,System.IntPtr)">
            <summary>
            调用默认窗口过程以为应用程序未处理的任何窗口消息提供默认处理。此功能确保处理所有消息。<see cref="M:SpaceCG.WindowsAPI.User32.User32.DefWindowProc(System.IntPtr,SpaceCG.WindowsAPI.User32.MessageType,System.IntPtr,System.IntPtr)"/> 用窗口过程接收到的相同参数调用。
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-defwindowproca </para>
            </summary>
            <param name="hWnd">接收到消息的窗口过程的句柄。</param>
            <param name="Msg">[UINT] 消息类型</param>
            <param name="wParam">附加消息信息。此参数的内容取决于 Msg 参数的值。</param>
            <param name="lParam">附加消息信息。此参数的内容取决于 Msg 参数的值。</param>
            <returns>返回值是消息处理的结果，并取决于消息。</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.GetMessageExtraInfo">
            <summary>
            检索当前线程的额外消息（附加对象）信息。额外的消息信息是与当前线程的消息队列关联的应用程序或驱动程序定义的值。
            <para>若要设置线程的额外消息信息，请使用 <see cref="M:SpaceCG.WindowsAPI.User32.User32.SetMessageExtraInfo(System.IntPtr)"/> 函数。</para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-getmessageextrainfo </para>
            </summary>
            <returns>[LPARAM] 返回值指定额外的信息。额外信息的含义是特定于设备的。</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32.SetMessageExtraInfo(System.IntPtr)">
            <summary>
            设置当前线程的额外消息信息。额外的消息信息是与当前线程的消息队列关联的应用程序或驱动程序定义的值。应用程序可以使用 <see cref="M:SpaceCG.WindowsAPI.User32.User32.GetMessageExtraInfo"/> 函数来检索线程的额外消息信息。
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setmessageextrainfo </para>
            </summary>
            <param name="lParam">与当前线程关联的值。</param>
            <returns>返回值是与当前线程关联的先前值。</returns>
        </member>
        <member name="T:SpaceCG.WindowsAPI.User32.User32Extension">
            <summary>
            WindowsAPI User32库，扩展常用/通用，功能/函数，扩展示例，以及使用方式ad
            </summary>
            <summary>
            WindowsAPI User32库，扩展常用/通用，功能/函数，扩展示例，以及使用方式ad
            </summary>
            <summary>
            WindowsAPI User32库，扩展常用/通用，功能/函数，扩展示例，以及使用方式ad
            </summary>
            <summary>
            WindowsAPI User32库，扩展常用/通用，功能/函数，扩展示例，以及使用方式ad
            </summary>
            <summary>
            WindowsAPI User32库，扩展常用/通用，功能/函数，扩展示例，以及使用方式
            </summary>
            <summary>
            WindowsAPI User32库，扩展常用/通用，功能/函数，扩展示例，以及使用方式ad
            </summary>
            <summary>
            WindowsAPI User32库，扩展常用/通用，功能/函数，扩展示例，以及使用方式ad
            </summary>
            <summary>
            WindowsAPI User32库，扩展常用/通用，功能/函数，扩展示例，以及使用方式ad
            </summary>
            <summary>
            WindowsAPI User32库，扩展常用/通用，功能/函数，扩展示例，以及使用方式
            </summary>
            <summary>
            WindowsAPI User32库，扩展常用/通用，功能/函数，扩展示例，以及使用方式
            </summary>
            <summary>
            WindowsAPI User32库，扩展常用/通用，功能/函数，扩展示例，以及使用方式ad
            </summary>
            <summary>
            WindowsAPI User32库，扩展常用/通用，功能/函数，扩展示例，以及使用方式
            </summary>
            <summary>
            WindowsAPI User32库，扩展常用/通用，功能/函数，扩展示例，以及使用方式
            </summary>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32Extension.LParamToPoint(System.Int32)">
            <summary>
            <see cref="T:SpaceCG.WindowsAPI.User32.WindowProc"/> Arguments lParam
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32Extension.LParamToPoint(System.IntPtr)">
            <summary>
            <see cref="T:SpaceCG.WindowsAPI.User32.WindowProc"/> Arguments lParam
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32Extension.TryGetRawInputDeviceName(System.IntPtr,System.String@)">
            <summary>
            跟据原始输入设备句柄获取设备名称
            </summary>
            <param name="hDevice">原始输入设备句柄</param>
            <param name="name">设备名称</param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32Extension.GetRawInputDevicesName">
            <summary>
            获取原始输入设备名称列表。以设备句柄为 key, 设备名称为 value
            </summary>
            <returns>返回 以设备句柄为 key, 设备名称为值的可读字典。</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32Extension.TryGetRawInputDeviceInfo(System.IntPtr,SpaceCG.WindowsAPI.User32.RID_DEVICE_INFO@)">
            <summary>
            跟据原始输入设备句柄获取设备信息
            </summary>
            <param name="hDevice">原始输入设备句柄</param>
            <param name="deviceInfo">设备信息</param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32Extension.GetRawIntputDevicesInfo">
            <summary>
            获取原始输入设备信息列表。。以设备句柄为 key, 设备信息为 value
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32Extension.TryGetRawInputHeader(System.IntPtr,SpaceCG.WindowsAPI.User32.RAWINPUTHEADER@)">
            <summary>
            获取原始输入 <see cref="T:SpaceCG.WindowsAPI.User32.RAWINPUTHEADER"/> 结构数据
            </summary>
            <param name="lParam"><see cref="F:SpaceCG.WindowsAPI.User32.MessageType.WM_INPUT"/> lParam 参数</param>
            <param name="header">输出 <see cref="T:SpaceCG.WindowsAPI.User32.RAWINPUTHEADER"/> 结构体。</param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32Extension.TryGetRawInputData(System.IntPtr,SpaceCG.WindowsAPI.User32.RAWINPUT@,System.UInt32@)">
            <summary>
            获取原始输入 <see cref="T:SpaceCG.WindowsAPI.User32.RAWINPUT"/> 结构数据
            </summary>
            <param name="lParam"><see cref="F:SpaceCG.WindowsAPI.User32.MessageType.WM_INPUT"/> lParam 参数</param>
            <param name="data">输出 <see cref="T:SpaceCG.WindowsAPI.User32.RAWINPUT"/> 结构体。</param>
            <param name="dwSize"> <see cref="F:SpaceCG.WindowsAPI.User32.RAWINPUTHEADER.dwSize"/></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32Extension.TryGetRawInputData(System.IntPtr,SpaceCG.WindowsAPI.User32.RAWINPUT@)">
            <summary>
            获取原始输入 <see cref="T:SpaceCG.WindowsAPI.User32.RAWINPUT"/> 结构数据
            </summary>
            <param name="lParam"><see cref="F:SpaceCG.WindowsAPI.User32.MessageType.WM_INPUT"/> lParam 参数</param>
            <param name="data">输出 <see cref="T:SpaceCG.WindowsAPI.User32.RAWINPUT"/> 结构体。</param>
            <returns></returns>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.User32Extension.CAPACITY_DEFAULT_SIZE">
            <summary>
            StringBuffer 实例所分配的内存中的最大字符数，Default 0xFF.
            </summary>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32Extension.InsertAfter(System.Windows.Window,SpaceCG.WindowsAPI.User32.SwpInsertAfter)">
            <summary>
            设置窗口在 Z 顺序中位于定位的窗口之前的窗口的值
            <para>调用 <see cref="M:SpaceCG.WindowsAPI.User32.User32.SetWindowPos(System.IntPtr,SpaceCG.WindowsAPI.User32.SwpInsertAfter,System.Int32,System.Int32,System.Int32,System.Int32,SpaceCG.WindowsAPI.User32.SwpFlags)"/></para>
            <para>WPF Window Handle use <see cref="P:System.Windows.Interop.WindowInteropHelper.Handle"/></para>
            </summary>
            <param name="window">WPF 窗体对象</param>
            <param name="after">see <see cref="T:SpaceCG.WindowsAPI.User32.SwpInsertAfter"/></param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32Extension.EnumWindows">
            <summary>
            遍历屏幕上所有的顶层窗口，然后给回调函数传入每个遍历窗口的句柄。
            不过并不是所有遍历的窗口都是顶层窗口，有一些非顶级系统窗口也会遍历到，详见：<see cref="M:SpaceCG.WindowsAPI.User32.User32.EnumWindows(SpaceCG.WindowsAPI.User32.EnumWindowsProc,System.IntPtr)"/> 
            </summary>
            <returns>返回顶层窗口句柄集合</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32Extension.FindWindowByTitleName">
            <summary>
            获取 窗口句柄/窗口标题 字典
            </summary>
            <returns>返回窗口句柄及对应的标题</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32Extension.FindWindowByTitleName(System.String)">
            <summary>
            获取 窗口句柄/窗口标题 字典
            </summary>
            <param name="titleName">关键名称搜索</param>
            <returns>返回窗口句柄及对应的标题</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32Extension.FindWindowByClassName">
            <summary>
            获取 窗口句柄/窗口类名 字典
            </summary>
            <returns>返回窗口句柄及对应的类名</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.User32Extension.FindWindowByClassName(System.String)">
            <summary>
            获取 窗口句柄/窗口类名 字典
            </summary>
            <param name="className"></param>
            <returns>返回窗口句柄及对应的类名</returns>
        </member>
        <member name="T:SpaceCG.WindowsAPI.User32.MapVKType">
            <summary>
            <see cref="!:MapVirtualKey"/> 函数参数 uMapType 的值之一
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-mapvirtualkeya </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MapVKType.VK_TO_VSC">
            <summary>
            uCode 是虚拟密钥代码，并转换为扫描代码。如果它是不能区分左手键和右手键的虚拟键代码，则返回左手扫描代码。如果没有转换，则该函数返回0。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MapVKType.VSC_TO_VK">
            <summary>
            uCode 是一种扫描代码，并转换为虚拟键代码，该虚拟键代码无法区分左手键和右手键。如果没有转换，则该函数返回0。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MapVKType.VK_TO_CHAR">
            <summary>
            uCode 是虚拟键码，并在返回值的低位字中转换为未移位的字符值。死键（变音符号）通过设置返回值的最高位来指示。如果没有转换，则该函数返回0。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MapVKType.VSC_TO_VK_EX">
            <summary>
            uCode 是一种扫描代码，并被翻译成可区分左手键和右手键的虚拟键码。如果没有转换，则该函数返回0。
            </summary>
        </member>
        <member name="T:SpaceCG.WindowsAPI.User32.MouseKey">
            <summary>
            Key State Masks for Mouse Messages (wParam)
            <para>MessageType WM_MouseXXX wParam value type</para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MouseKey.MK_LBUTTON">
            <summary>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MouseKey.MK_RBUTTON">
            <summary>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MouseKey.MK_SHIFT">
            <summary>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MouseKey.MK_CONTROL">
            <summary>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MouseKey.MK_MBUTTON">
            <summary>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MouseKey.MK_XBUTTON1">
            <summary>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MouseKey.MK_XBUTTON2">
            <summary>
            </summary>
        </member>
        <member name="T:SpaceCG.WindowsAPI.User32.CURSORINFO">
            <summary>
            包含全局光标信息。注意 cbSize 大小需要设置。(CURSORINFO, *PCURSORINFO, *LPCURSORINFO)
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/ns-winuser-cursorinfo </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.CURSORINFO.cbSize">
            <summary>
            结构的大小，以字节为单位。
            <para>等于 Marshal.SizeOf(typeof(CURSORINFO)); </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.CURSORINFO.flags">
            <summary>
            光标状态。
            <para>0  光标被隐藏。</para>
            <para>CURSOR_SHOWING    0x00000001  光标正在显示。</para>
            <para>CURSOR_SUPPRESSED 0x00000002  该标志指示系统未在绘制光标，因为用户是通过触摸或笔而不是鼠标来提供输入的。</para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.CURSORINFO.hCursor">
            <summary>
            光标的句柄。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.CURSORINFO.ptScreenPos">
            <summary>
            接收光标的屏幕坐标的结构。
            </summary>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.CURSORINFO.#ctor(System.IntPtr)">
            <summary>
            CURSORINFO 结构体
            </summary>
            <param name="cursor"></param>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.CURSORINFO.Size">
            <summary>
            <see cref="T:SpaceCG.WindowsAPI.User32.CURSORINFO"/> 结构体大小，以字节为单位
            </summary>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.CURSORINFO.ToString">
            <summary>
            @ToString
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpaceCG.WindowsAPI.User32.HookType">
            <summary>
            挂钩过程的类型
            <para> <see cref="M:SpaceCG.WindowsAPI.User32.User32.SetWindowsHookEx(SpaceCG.WindowsAPI.User32.HookType,SpaceCG.WindowsAPI.User32.HookProc,System.IntPtr,System.UInt32)"/> 函数数参考 idHook 的值之一 </para>
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setwindowshookexa </para>
            <para>参考对应的结构数据：https://docs.microsoft.com/zh-cn/windows/win32/winmsg/hook-structures </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.HookType.WH_MSGFILTER">
            <summary>
            [线程或全局] 安装挂钩过程，以监视由于对话框，消息框，菜单或滚动条中的输入事件而生成的消息。有关更多信息，请参见 <see cref="!:MessageProc"/> 挂钩过程。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.HookType.WH_JOURNALRECORD">
            <summary>
            [仅全局] 安装一个挂接过程，该过程记录发布到系统消息队列中的输入消息。该挂钩对于记录宏很有用。有关更多信息，请参见 <see cref="!:JournalRecordProc"/> 挂钩过程。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.HookType.WH_JOURNALPLAYBACK">
            <summary>
            [仅全局] 安装该消息发布之前由一个记录一个钩子程序 <see cref="F:SpaceCG.WindowsAPI.User32.HookType.WH_JOURNALRECORD"/> 钩子程序。欲了解更多信息，请参阅 <see cref="!:JournalPlaybackProc"/> 钩子程序。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.HookType.WH_KEYBOARD">
            <summary>
            [线程或全局] 安装挂钩过程，以监视击键消息。有关更多信息，请参见 <see cref="!:KeyboardProc"/> 挂接过程。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.HookType.WH_GETMESSAGE">
            <summary>
            [线程或全局] 安装挂钩过程，以监视发布到消息队列的消息。有关更多信息，请参见 <see cref="!:GetMsgProc"/> 挂钩过程。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.HookType.WH_CALLWNDPROC">
            <summary>
            [线程或全局] 安装挂钩程序，该程序在系统将消息发送到目标窗口过程之前监视消息。有关更多信息，请参见 <see cref="!:CallWndProc"/> 挂接过程。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.HookType.WH_CBT">
            <summary>
            [线程或全局] 安装一个挂钩程序，该程序接收对 CBT 应用程序有用的通知。有关更多信息，请参见 <see cref="!:CBTProc"/> 挂钩过程。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.HookType.WH_SYSMSGFILTER">
            <summary>
            [仅全局] 安装挂钩过程，以监视由于对话框，消息框，菜单或滚动条中的输入事件而生成的消息。挂钩过程会在与调用线程相同的桌面中监视所有应用程序的这些消息。有关更多信息，请参见 <see cref="!:SysMsgProc"/> 挂接过程。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.HookType.WH_MOUSE">
            <summary>
            [线程或全局] 安装监视鼠标消息的挂钩过程。有关更多信息，请参见 <see cref="!:MouseProc"/> 挂钩过程。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.HookType.WH_HARDWARE">
            <summary>
            #if defined(_WIN32_WINDOWS) hardware
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.HookType.WH_DEBUG">
            <summary>
            [线程或全局] 安装对调试其他挂钩过程有用的挂钩过程。有关更多信息，请参见 <see cref="!:DebugProc"/> 挂钩过程。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.HookType.WH_SHELL">
            <summary>
            [线程或全局] 安装一个挂钩程序，该程序接收对外壳程序有用的通知。有关更多信息，请参见 <see cref="!:ShellProc"/> 挂钩过程。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.HookType.WH_FOREGROUNDIDLE">
            <summary>
            [线程或全局] 安装一个挂钩程序，当应用程序的前台线程即将变为空闲时将调用该挂钩程序。该挂钩对于在空闲时间执行低优先级任务很有用。有关更多信息，请参见 <see cref="!:ForegroundIdleProc"/> 挂钩过程。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.HookType.WH_CALLWNDPROCRET">
            <summary>
            [线程或全局] 安装挂钩过程，以监视目标窗口过程处理完的消息。有关更多信息，请参见 <see cref="!:CallWndRetProc"/> 挂接过程。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.HookType.WH_KEYBOARD_LL">
            <summary>
            [仅全局] 安装钩子程序，以监视低级键盘输入事件。有关更多信息，请参见 <see cref="!:LowLevelKeyboardProc"/> 挂钩过程。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.HookType.WH_MOUSE_LL">
            <summary>
            [仅全局] 安装钩子过程，以监视低级鼠标输入事件。有关更多信息，请参见 <see cref="!:LowLevelMouseProc"/> 挂钩过程。
            </summary>
        </member>
        <member name="T:SpaceCG.WindowsAPI.User32.KBDLLHOOKSTRUCT">
            <summary>
            包含有关低级键盘输入事件的信息。(KBDLLHOOKSTRUCT, *LPKBDLLHOOKSTRUCT, *PKBDLLHOOKSTRUCT)
            <para><see cref="F:SpaceCG.WindowsAPI.User32.HookType.WH_KEYBOARD_LL"/> 的数据结构体，<see cref="T:SpaceCG.WindowsAPI.User32.HookProc"/> 代理函数参数 lParam 数据结构体</para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/winmsg/hook-structures </para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/winmsg/hook-functions </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.KBDLLHOOKSTRUCT.vkCode">
            <summary>
            <see cref="T:SpaceCG.WindowsAPI.User32.VirtualKeyCode"/> 虚似键盘码
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.KBDLLHOOKSTRUCT.scanCode">
            <summary>
            key 表示硬件扫描码 
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.KBDLLHOOKSTRUCT.flags">
            <summary>
            扩展键标志，事件注入标志，上下文代码和过渡状态标志。该成员的指定如下。应用程序可以使用以下值来测试按键标志。测试 LLKHF_INJECTED（位4）将告诉您是否已注入事件。如果是这样，那么测试 LLKHF_LOWER_IL_INJECTED （位1）将告诉您是否从较低完整性级别运行的进程注入了事件。
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/ns-winuser-kbdllhookstruct?redirectedfrom=MSDN </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.KBDLLHOOKSTRUCT.time">
            <summary>
            此消息的时间戳，等于此消息返回的 <see cref="!:User32.GetMessageTime"/>。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.KBDLLHOOKSTRUCT.dwExtraInfo">
            <summary>
            与消息关联的其他信息。
            </summary>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.KBDLLHOOKSTRUCT.ToString">
            <summary>
            @ToString()
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpaceCG.WindowsAPI.User32.MOUSEHOOKSTRUCT">
            <summary>
            包含有关传递给 <see cref="!:MessageType.WH_MOUSE"/> 挂钩过程 <see cref="!:MouseProc"/> 的鼠标事件的信息。(MOUSEHOOKSTRUCT, * LPMOUSEHOOKSTRUCT, * PMOUSEHOOKSTRUCT)
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/ns-winuser-mousehookstruct?redirectedfrom=MSDN </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MOUSEHOOKSTRUCT.pt">
            <summary>
            光标的x和y坐标，以屏幕坐标表示。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MOUSEHOOKSTRUCT.hwnd">
            <summary>
            窗口的句柄，它将接收与 mouse 事件相对应的鼠标消息。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MOUSEHOOKSTRUCT.wHitTestCode">
            <summary>
            命中测试值。有关命中测试值的列表，请参见 <see cref="F:SpaceCG.WindowsAPI.User32.MessageType.WM_NCHITTEST"/> 消息的描述。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MOUSEHOOKSTRUCT.dwExtraInfo">
            <summary>
            与消息关联的其他信息。
            </summary>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.MOUSEHOOKSTRUCT.ToString">
            <summary>
            @ToString()
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpaceCG.WindowsAPI.User32.MSLLHOOKSTRUCT">
            <summary>
            包含有关低级鼠标输入事件的信息。(MSLLHOOKSTRUCT, *LPMSLLHOOKSTRUCT, *PMSLLHOOKSTRUCT)
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/ns-winuser-msllhookstruct?redirectedfrom=MSDN </para>
            </summary>
        </member>
        <member name="T:SpaceCG.WindowsAPI.User32.MOUSEHOOKSTRUCTEX">
            <summary>
            包含有关传递给 <see cref="F:SpaceCG.WindowsAPI.User32.HookType.WH_MOUSE"/> 挂钩过程 MouseProc 的鼠标事件的信息。 这是 <see cref="T:SpaceCG.WindowsAPI.User32.MOUSEHOOKSTRUCT"/> 结构的扩展，其中包括有关车轮移动或 X 按钮使用情况的信息。
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/ns-winuser-mousehookstructex?redirectedfrom=MSDN </para>
            </summary>
        </member>
        <member name="T:SpaceCG.WindowsAPI.User32.EVENTMSG">
            <summary>
            包含有关发送到系统消息队列的硬件消息的信息。此结构用于存储 <see cref="!:JournalPlaybackProc"/> 回调函数的消息信息。(EVENTMSG, *PEVENTMSGMSG, *NPEVENTMSGMSG, *LPEVENTMSGMSG, *PEVENTMSG, *NPEVENTMSG, *LPEVENTMSG)
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/ns-winuser-eventmsg?redirectedfrom=MSDN </para>
            </summary>
        </member>
        <member name="T:SpaceCG.WindowsAPI.User32.tagDEBUGHOOKINFO">
            <summary>
            包含传递给 <see cref="F:SpaceCG.WindowsAPI.User32.HookType.WH_DEBUG"/> 挂钩过程 <see cref="!:DebugProc"/> 的调试信息。(DEBUGHOOKINFO, *PDEBUGHOOKINFO, *NPDEBUGHOOKINFO, *LPDEBUGHOOKINFO)
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/ns-winuser-debughookinfo?redirectedfrom=MSDN</para>
            </summary>
        </member>
        <member name="T:SpaceCG.WindowsAPI.User32.CWPSTRUCT">
            <summary>
            定义传递给 <see cref="F:SpaceCG.WindowsAPI.User32.HookType.WH_CALLWNDPROC"/> 挂钩过程 <see cref="!:CallWndProc"/> 的消息参数。(CWPSTRUCT, *PCWPSTRUCT, *NPCWPSTRUCT, *LPCWPSTRUCT)
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/ns-winuser-cwpstruct?redirectedfrom=MSDN</para>
            </summary>
        </member>
        <member name="T:SpaceCG.WindowsAPI.User32.CWPRETSTRUCT">
            <summary>
            定义传递给 <see cref="F:SpaceCG.WindowsAPI.User32.HookType.WH_CALLWNDPROCRET"/> 挂钩过程 <see cref="!:CallWndRetProc"/> 的消息参数。(CWPRETSTRUCT, *PCWPRETSTRUCT, *NPCWPRETSTRUCT, *LPCWPRETSTRUCT)
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/ns-winuser-cwpretstruct?redirectedfrom=MSDN </para>
            </summary>
        </member>
        <member name="T:SpaceCG.WindowsAPI.User32.CBTACTIVATESTRUCT">
            <summary>
            包含在激活窗口之前传递给 <see cref="F:SpaceCG.WindowsAPI.User32.HookType.WH_CBT"/> 挂钩过程 <see cref="!:CBTProc"/> 的信息。(CBTACTIVATESTRUCT, *LPCBTACTIVATESTRUCT)
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/ns-winuser-cbtactivatestruct?redirectedfrom=MSDN </para>
            </summary>
        </member>
        <member name="T:SpaceCG.WindowsAPI.User32.CBT_CREATEWNDA">
            <summary>
            包含在创建窗口之前传递给 <see cref="F:SpaceCG.WindowsAPI.User32.HookType.WH_CBT"/> 挂钩过程 <see cref="!:CBTProc"/> 的信息。(CBT_CREATEWNDA, *LPCBT_CREATEWNDA)
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/ns-winuser-cbt_createwnda?redirectedfrom=MSDN </para>
            </summary>
        </member>
        <member name="T:SpaceCG.WindowsAPI.User32.CREATESTRUCTA">
            <summary>
            定义传递给应用程序窗口过程的初始化参数。这些成员与 <see cref="M:SpaceCG.WindowsAPI.User32.User32.CreateWindowEx(SpaceCG.WindowsAPI.User32.WindowStyleEx,System.String,System.String,SpaceCG.WindowsAPI.User32.WindowStyle,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr,System.Object)"/> 函数的参数相同。(CREATESTRUCTA, *LPCREATESTRUCTA)
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/ns-winuser-createstructa </para>
            </summary>
        </member>
        <member name="T:SpaceCG.WindowsAPI.User32.WindowProc">
            <summary>
            应用程序定义的功能，用于处理发送到窗口的消息。所述 WNDPROC 类型定义一个指向这个回调函数。WindowProc 是应用程序定义的函数名称的占位符。
            <para>参考 WPF <see cref="!:HwndSourceHook"/> </para>
            <para>参考：https://docs.microsoft.com/zh-cn/previous-versions/windows/desktop/legacy/ms633573(v=vs.85) </para>
            </summary>
            <param name="hwnd">窗口的句柄。</param>
            <param name="uMsg">有关系统提供的消息的列表，请参阅系统定义的消息。</param>
            <param name="wParam">附加消息信息。此参数的内容取决于uMsg参数的值。</param>
            <param name="lParam">附加消息信息。此参数的内容取决于uMsg参数的值。</param>
            <returns>返回值是消息处理的结果，并取决于发送的消息。</returns>
        </member>
        <member name="T:SpaceCG.WindowsAPI.User32.HookProc">
            <summary>
            HOOKPROC 回调函数
            <para>与 <see cref="M:SpaceCG.WindowsAPI.User32.User32.SetWindowsHookEx(SpaceCG.WindowsAPI.User32.HookType,SpaceCG.WindowsAPI.User32.HookProc,System.IntPtr,System.UInt32)"/> 函数一起使用的应用程序定义或库定义的回调函数。调用 <see cref="M:SpaceCG.WindowsAPI.User32.User32.SendMessage(System.IntPtr,SpaceCG.WindowsAPI.User32.MessageType,System.IntPtr,System.IntPtr)"/> 函数后，系统将调用此函数。钩子程序可以检查消息；它不能修改它。</para>
            <para>所述 <see cref="T:SpaceCG.WindowsAPI.User32.HookProc"/> 类型定义一个指向这个回调函数。<see cref="!:User32.CallWndRetProc"/> 是应用程序定义或库定义的函数名称的占位符。</para>
            <para>应用程序通过在调用 <see cref="M:SpaceCG.WindowsAPI.User32.User32.SetWindowsHookEx(SpaceCG.WindowsAPI.User32.HookType,SpaceCG.WindowsAPI.User32.HookProc,System.IntPtr,System.UInt32)"/> 函数时指定 <see cref="F:SpaceCG.WindowsAPI.User32.HookType.WH_CALLWNDPROCRET"/> 挂钩类型和指向该挂钩过程的指针来安装该挂钩过程。</para>
            <para>KeyboardProc 参考：https://docs.microsoft.com/zh-cn/windows/win32/winmsg/keyboardproc </para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nc-winuser-hookproc </para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/winmsg/hook-functions </para>
            </summary>
            <param name="nCode"></param>
            <param name="wParam">指定消息是否由当前进程发送。如果消息是由当前进程发送的，则该消息为非零；否则为0。否则为NULL。</param>
            <param name="lParam">指向 CWPRETSTRUCT 结构的指针，该结构包含有关消息的详细信息。</param>
            <returns>如果 nCode 小于零，则挂钩过程必须返回 <see cref="M:SpaceCG.WindowsAPI.User32.User32.CallNextHookEx(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)"/> 返回的值。
            <para>如果 nCode 大于或等于零，则强烈建议您调用 <see cref="M:SpaceCG.WindowsAPI.User32.User32.CallNextHookEx(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)"/> 并返回它返回的值。否则，其他安装了 WH_CALLWNDPROCRET 挂钩的应用程序将不会收到挂钩通知，因此可能会出现错误的行为。如果挂钩过程未调用 CallNextHookEx，则返回值应为零。</para>
            </returns>
        </member>
        <member name="T:SpaceCG.WindowsAPI.User32.RhkModifier">
            <summary>
            <see cref="M:SpaceCG.WindowsAPI.User32.User32.RegisterHotKey(System.IntPtr,System.Int32,SpaceCG.WindowsAPI.User32.RhkModifier,SpaceCG.WindowsAPI.User32.VirtualKeyCode)"/> 函数参数 fsModifiers 的值之一或值组合
            <para>OR <see cref="F:SpaceCG.WindowsAPI.User32.MessageType.WM_HOTKEY"/> lParam </para>
            <para>参考 https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-registerhotkey </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RhkModifier.ALT">
            <summary>
            必须按住 ALT 键。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RhkModifier.CONTROL">
            <summary>
            必须按住 CTRL 键。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RhkModifier.SHIFT">
            <summary>
            必须按住 SHIFT 键。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RhkModifier.WIN">
            <summary>
            按住 WINDOWS 键。这些键带有 Windows 徽标。保留与 WINDOWS 键相关的键盘快捷键，供操作系统使用。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RhkModifier.NOREPEAT">
            <summary>
            更改热键行为，以使键盘自动重复操作不会产生多个热键通知。
            </summary>
        </member>
        <member name="T:SpaceCG.WindowsAPI.User32.InputType">
            <summary>
            <see cref="F:SpaceCG.WindowsAPI.User32.INPUT.type"/> 字段的值之一
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.InputType.MOUSE">
            <summary>
            该事件是鼠标事件。使用联合的 mouse 结构。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.InputType.KEYBOARD">
            <summary>
            该事件是键盘事件。使用联合的 keyboard 结构。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.InputType.HARDWARE">
            <summary>
            该事件是硬件事件。使用联合的 hardware 结构。
            </summary>
        </member>
        <member name="T:SpaceCG.WindowsAPI.User32.MouseEventFlags">
            <summary>
            <see cref="F:SpaceCG.WindowsAPI.User32.MOUSEINPUT.dwFlags"/> 字段的值之一或值组合
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/ns-winuser-mouseinput </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MouseEventFlags.MOUSEEVENTF_MOVE">
            <summary>
            移动发生
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MouseEventFlags.MOUSEEVENTF_LEFTDOWN">
            <summary>
            按下左按钮。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MouseEventFlags.MOUSEEVENTF_LEFTUP">
            <summary>
            释放左按钮。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MouseEventFlags.MOUSEEVENTF_RIGHTDOWN">
            <summary>
            按下了右按钮。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MouseEventFlags.MOUSEEVENTF_RIGHTUP">
            <summary>
            释放了右键。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MouseEventFlags.MOUSEEVENTF_MIDDLEDOWN">
            <summary>
            按下中间按钮。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MouseEventFlags.MOUSEEVENTF_MIDDLEUP">
            <summary>
            中间按钮被释放。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MouseEventFlags.MOUSEEVENTF_XDOWN">
            <summary>
            按下了X按钮。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MouseEventFlags.MOUSEEVENTF_XUP">
            <summary>
            X按钮被释放。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MouseEventFlags.MOUSEEVENTF_WHEEL">
            <summary>
            如果鼠标带有滚轮，则滚轮已移动。移动量在 mouseData 中指定。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MouseEventFlags.MOUSEEVENTF_HWHEEL">
            <summary>
            如果鼠标带有滚轮，则将滚轮水平移动。移动量在 mouseData 中指定。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MouseEventFlags.MOUSEEVENTF_MOVE_NOCOALESCE">
            <summary>
            该 <see cref="F:SpaceCG.WindowsAPI.User32.MessageType.WM_MOUSEMOVE"/> 消息将不会被合并。默认行为是合并 <see cref="F:SpaceCG.WindowsAPI.User32.MessageType.WM_MOUSEMOVE"/> 消息。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MouseEventFlags.MOUSEEVENTF_VIRTUALDESK">
            <summary>
            将坐标映射到整个桌面。必须与 <see cref="F:SpaceCG.WindowsAPI.User32.MouseEventFlags.MOUSEEVENTF_ABSOLUTE"/> 一起使用。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MouseEventFlags.MOUSEEVENTF_ABSOLUTE">
            <summary>
            在 dx 和 dy 成员含有规范化的绝对坐标。如果未设置该标志，则dx和dy包含相对数据（自上次报告位置以来的位置变化）。无论将哪种类型的鼠标或其他定点设备连接到系统，都可以设置或不设置此标志。
            </summary>
        </member>
        <member name="T:SpaceCG.WindowsAPI.User32.KeyboardEventFlags">
            <summary>
            <see cref="F:SpaceCG.WindowsAPI.User32.KEYBDINPUT.dwFlags"/> 字段的值之一或值组合
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/ns-winuser-keybdinput </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.KeyboardEventFlags.KEYEVENTF_EXTENDEDKEY">
            <summary>
            如果指定，则在扫描代码之前加上前缀字节，该前缀字节的值为0xE0（224）。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.KeyboardEventFlags.KEYEVENTF_KEYUP">
            <summary>
            如果指定，则释放密钥。如果未指定，则按下该键。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.KeyboardEventFlags.KEYEVENTF_UNICODE">
            <summary>
            如果指定，系统将合成 <see cref="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.PACKET"/> 击键。该WVK参数必须为零。该标志只能与 <see cref="F:SpaceCG.WindowsAPI.User32.KeyboardEventFlags.KEYEVENTF_KEYUP"/> 标志结合使用。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.KeyboardEventFlags.KEYEVENTF_SCANCODE">
            <summary>
            如果指定，则 wScan 会识别密钥，而 wVk 将被忽略。
            </summary>
        </member>
        <member name="T:SpaceCG.WindowsAPI.User32.INPUT">
            <summary>
            通过使用 <see cref="M:SpaceCG.WindowsAPI.User32.User32.SendInput(System.UInt32,SpaceCG.WindowsAPI.User32.INPUT[],System.Int32)"/> 来存储信息合成输入事件，如按键、鼠标移动和鼠标点击。(INPUT, *PINPUT, *LPINPUT)
            <para> <see cref="F:SpaceCG.WindowsAPI.User32.INPUT.keyboard"/> 支持非键盘输入法，例如手写识别或语音识别，就好像它是使用 <see cref="F:SpaceCG.WindowsAPI.User32.KeyboardEventFlags.KEYEVENTF_UNICODE"/> 标志输入的文本一样。有关更多信息，请参见 <see cref="T:SpaceCG.WindowsAPI.User32.KEYBDINPUT"/> 部分。</para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/ns-winuser-input </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.INPUT.type">
            <summary>
            输入事件的类型。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.INPUT.mouse">
            <summary>
            有关模拟鼠标事件的信息。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.INPUT.keyboard">
            <summary>
            有关模拟键盘事件的信息。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.INPUT.hardware">
            <summary>
            有关模拟硬件事件的信息。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.INPUT.Size">
            <summary>
            <see cref="T:SpaceCG.WindowsAPI.User32.INPUT"/> 结构体大小，以字节为单位。
            </summary>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.INPUT.ToString">
            <summary>
            @ToString()
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpaceCG.WindowsAPI.User32.MOUSEINPUT">
            <summary>
            包含有关模拟鼠标事件的信息。(MOUSEINPUT, *PMOUSEINPUT, *LPMOUSEINPUT)
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/ns-winuser-mouseinput </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MOUSEINPUT.dx">
            <summary>
            鼠标的绝对位置或自上一次鼠标事件发生以来的运动量，取决于 dwFlags 成员的值。绝对数据指定为鼠标的x坐标；相对数据指定为移动的像素数。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MOUSEINPUT.dy">
            <summary>
            鼠标的绝对位置或自上一次鼠标事件发生以来的运动量，取决于 dwFlags 成员的值。绝对数据指定为鼠标的y坐标；相对数据指定为移动的像素数。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MOUSEINPUT.mouseData">
            <summary>
            如果 dwFlags 包含 <see cref="F:SpaceCG.WindowsAPI.User32.MouseEventFlags.MOUSEEVENTF_WHEEL"/>，则 mouseData 指定滚轮移动量。正值表示轮子向前旋转，远离用户；负值表示方向盘朝着用户向后旋转。一轮点击定义为 WHEEL_DELTA，即120。
            <para>如果 dwFlags 不包含 <see cref="F:SpaceCG.WindowsAPI.User32.MouseEventFlags.MOUSEEVENTF_WHEEL"/>，<see cref="F:SpaceCG.WindowsAPI.User32.MouseEventFlags.MOUSEEVENTF_XDOWN"/> 或 <see cref="F:SpaceCG.WindowsAPI.User32.MouseEventFlags.MOUSEEVENTF_XUP"/>，则 mouseData 应该为 0。</para>
            <para>如果 dwFlags 包含 <see cref="F:SpaceCG.WindowsAPI.User32.MouseEventFlags.MOUSEEVENTF_XDOWN"/> 或 <see cref="F:SpaceCG.WindowsAPI.User32.MouseEventFlags.MOUSEEVENTF_XUP"/>，则 mouseData 指定按下或释放了哪个 X 按钮。该值可以是以下标志的任意组合。</para>
            <para>1.XBUTTON1    0x0001  设置是否按下或释放第一个X按钮。</para>
            <para>2.XBUTTON2    0x0002  设置是否按下或释放第二个X按钮。</para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MOUSEINPUT.dwFlags">
            <summary>
            一组位标记，用于指定鼠标移动和按钮单击的各个方面。该成员中的位可以是以下值的任何合理组合。
            <para>设置指定鼠标按钮状态的位标志以指示状态的变化，而不是持续的状态。例如，如果按下并按住鼠标左键，则在第一次按下左键时会设置 <see cref="F:SpaceCG.WindowsAPI.User32.MouseEventFlags.MOUSEEVENTF_LEFTDOWN"/>，但随后的动作不会设置。同样，仅在首次释放按钮时设置 <see cref="F:SpaceCG.WindowsAPI.User32.MouseEventFlags.MOUSEEVENTF_LEFTUP"/>。</para>
            <para>您不能在 dwFlags 参数中同时指定 <see cref="F:SpaceCG.WindowsAPI.User32.MouseEventFlags.MOUSEEVENTF_WHEEL"/> 标志和 <see cref="F:SpaceCG.WindowsAPI.User32.MouseEventFlags.MOUSEEVENTF_XDOWN"/> 或 <see cref="F:SpaceCG.WindowsAPI.User32.MouseEventFlags.MOUSEEVENTF_XUP"/> 标志，因为它们都需要使用 mouseData 字段。</para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MOUSEINPUT.time">
            <summary>
            事件的时间戳，以毫秒为单位。如果此参数为 0，则系统将提供其自己的时间戳。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MOUSEINPUT.dwExtraInfo">
            <summary>
            与鼠标事件关联的附加值。应用程序调用 <see cref="M:SpaceCG.WindowsAPI.User32.User32.GetMessageExtraInfo"/> 以获得此额外信息。
            </summary>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.MOUSEINPUT.SetPosition(System.Int32,System.Int32)">
            <summary>
            设置鼠标 x, y 位置
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
        </member>
        <member name="T:SpaceCG.WindowsAPI.User32.KEYBDINPUT">
            <summary>
            包含有关模拟键盘事件的信息。(KEYBDINPUT, *PKEYBDINPUT, *LPKEYBDINPUT)
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/ns-winuser-keybdinput </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.KEYBDINPUT.wVk">
            <summary>
            一个虚拟键码( <see cref="T:SpaceCG.WindowsAPI.User32.VirtualKeyCode"/> )。该代码必须是1到254之间的值。如果 dwFlags 成员指定 <see cref="F:SpaceCG.WindowsAPI.User32.KeyboardEventFlags.KEYEVENTF_UNICODE"/>，则wVk必须为0。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.KEYBDINPUT.wScan">
            <summary>
            密钥的硬件扫描代码。如果 dwFlags 指定 <see cref="F:SpaceCG.WindowsAPI.User32.KeyboardEventFlags.KEYEVENTF_UNICODE"/>，则 wScan 指定要发送到前台应用程序的 Unicode 字符。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.KEYBDINPUT.dwFlags">
            <summary>
            指定按键的标志组合
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.KEYBDINPUT.time">
            <summary>
            事件的时间戳，以毫秒为单位。如果此参数为零，则系统将提供其自己的时间戳。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.KEYBDINPUT.dwExtraInfo">
            <summary>
            与击键关联的附加值。使用 <see cref="M:SpaceCG.WindowsAPI.User32.User32.GetMessageExtraInfo"/> 函数可获得此信息。
            </summary>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.KEYBDINPUT.ToString">
            <summary>
            @ToString()
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpaceCG.WindowsAPI.User32.HARDWAREINPUT">
            <summary>
            包含有关由除键盘或鼠标之外的输入设备生成的模拟消息的信息。(HARDWAREINPUT, * PHARDWAREINPUT, * LPHARDWAREINPUT)
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/ns-winuser-hardwareinput </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.HARDWAREINPUT.uMsg">
            <summary>
            输入硬件生成的消息。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.HARDWAREINPUT.wParamL">
            <summary>
            uMsg 的 lParam 参数的低位字(WORD == ushort)。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.HARDWAREINPUT.wParamH">
            <summary>
            uMsg 的 lParam 参数的高位字(WORD == ushort)。
            </summary>
        </member>
        <member name="T:SpaceCG.WindowsAPI.User32.TouchFeedbackMode">
            <summary>
            Touch 反馈模式
            <para> <see cref="M:SpaceCG.WindowsAPI.User32.User32.InitializeTouchInjection(System.UInt32,SpaceCG.WindowsAPI.User32.TouchFeedbackMode)"/>  函数参数 dwMode 的值之一</para>
            <para>参考：https://docs.microsoft.com/zh-cn/previous-versions/windows/desktop/input_touchinjection/constants </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.TouchFeedbackMode.DEFAULT">
            <summary>
            指定默认的触摸可视化。最终的用户在 Pen and Touch 控制面板中的设置可能会抑制注入的触摸反馈。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.TouchFeedbackMode.INDIRECT">
            <summary>
            指定间接触摸可视化。注入的触摸反馈将覆盖“笔和触摸”控制面板中的最终用户设置。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.TouchFeedbackMode.NONE">
            <summary>
            指定没有触摸可视化。TOUCH_FEEDBACK_INDIRECT | TOUCH_FEEDBACK_NONE 应用程序和控件提供的触摸反馈可能不会受到影响。
            </summary>
        </member>
        <member name="T:SpaceCG.WindowsAPI.User32.PointerInputType">
            <summary>
            指针输入类型。
            <para> <see cref="T:SpaceCG.WindowsAPI.User32.POINTER_INFO"/> 结构体字段 <see cref="F:SpaceCG.WindowsAPI.User32.POINTER_INFO.pointerType"/> 的值之一 </para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/ne-winuser-tagpointer_input_type </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.PointerInputType.PT_POINTER">
            <summary>
            通用指针类型。此类型永远不会出现在指针消息或指针数据中。一些数据查询功能允许调用者将查询限制为特定的指针类型。所述 PT_POINTER 类型可以在这些功能被用来指定该查询是包括所有类型的指针
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.PointerInputType.PT_TOUCH">
            <summary>
            触摸指针类型。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.PointerInputType.PT_PEN">
            <summary>
            笔指针类型。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.PointerInputType.PT_MOUSE">
            <summary>
            鼠标指针类型。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.PointerInputType.PT_TOUCHPAD">
            <summary>
            触摸板指针类型（Windows 8.1和更高版本）。
            </summary>
        </member>
        <member name="T:SpaceCG.WindowsAPI.User32.PointerFlags">
            <summary>
            <see cref="T:SpaceCG.WindowsAPI.User32.POINTER_INFO"/> 结构体字段 <see cref="F:SpaceCG.WindowsAPI.User32.POINTER_INFO.pointerFlags"/> 的值之一或值组合
            <para> XBUTTON1 和 XBUTTON2 是许多鼠标设备上使用的其他按钮。它们返回与标准鼠标按钮相同的数据。</para>
            <para>注入的输入将发送到运行注入过程的会话的桌面。有用于由以下组合所指示触摸输入注射（交互式和悬停）两个输入状态 pointerFlags ：</para>
            <para>INRANGE | UPDATE  Touch 触摸悬停开始或移动</para>
            <para>INRANGE | INCONTACT | DOWN    触摸向下</para>
            <para>INRANGE | INCONTACT | UPDATE  触摸接触动作</para>
            <para>INRANGE | UP  触摸向上并过渡到悬停</para>
            <para>UPDATE    触摸悬停结束</para>
            <para>UP 触摸结束</para>
            <para>参考：https://docs.microsoft.com/zh-cn/previous-versions/windows/desktop/inputmsg/pointer-flags-contants </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.PointerFlags.NONE">
            <summary>
            默认
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.PointerFlags.NEW">
            <summary>
            指示新指针的到达。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.PointerFlags.INRANGE">
            <summary>
            指示此指针继续存在。如果未设置此标志，则表明指针已离开检测范围。
            <para>此标志通常不设置仅当指针悬停叶检测范围（UPDATE是组），或当在与窗口面叶片的检测范围相接触的指针（UP是集）。</para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.PointerFlags.INCONTACT">
            <summary>
            指示该指针与数字转换器表面接触。未设置此标志时，表示悬停指针。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.PointerFlags.FIRSTBUTTON">
            <summary>
            指示主要操作，类似于鼠标左键按下。触摸指针与数字化仪表面接触时会设置此标志。
            <para>笔指针在未按下任何按钮的情况下与数字化仪表面接触时，会设置此标志。当鼠标左键按下时，鼠标指针将设置此标志。</para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.PointerFlags.SECONDBUTTON">
            <summary>
            指示辅助操作，类似于鼠标右键按下。触摸指针不使用此标志。
            <para>当笔筒按钮按下时，笔指针与数字转换器表面接触时会设置此标志。当鼠标右键按下时，鼠标指针会设置此标志。</para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.PointerFlags.THIRDBUTTON">
            <summary>
            类似于按下鼠标滚轮的按钮。触摸指针不使用此标志。
            <para>笔指针不使用此标志。按下鼠标滚轮按钮时，鼠标指针会设置此标志。</para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.PointerFlags.FOURTHBUTTON">
            <summary>
            类似于第一个扩展鼠标（XButton1）按下按钮。触摸指针不使用此标志。
            <para>笔指针不使用此标志。当第一个扩展鼠标（XBUTTON1）按钮按下时，鼠标指针将设置此标志。</para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.PointerFlags.FIFTHBUTTON">
            <summary>
            类似于按下第二个扩展鼠标（XButton2）的按钮。触摸指针不使用此标志。
            <para>笔指针不使用此标志。当第二个扩展鼠标（XBUTTON2）按钮按下时，鼠标指针将设置此标志。</para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.PointerFlags.PRIMARY">
            <summary>
            指示该指针已被指定为主指针。主指针是一个单一的指针，它可以执行超出非主指针可用的动作的动作。例如，当主指针与窗口的表面接触时，它可以通过向其发送WM_POINTERACTIVATE消息来为窗口提供激活机会。
            <para>根据系统上所有当前用户的交互（鼠标，触摸，笔等）来标识主指针。因此，主指针可能未与您的应用程序关联。多点触摸交互中的第一个联系人被设置为主指针。一旦标识了主要指针，则必须先提起所有联系人，然后才能将新的联系人标识为主要指针。对于不处理指针输入的应用程序，只有主指针的事件被提升为鼠标事件。</para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.PointerFlags.CONFIDENCE">
            <summary>
            置信度是来自源设备的关于指针是表示预期交互还是意外交互的建议，这尤其与PT_TOUCH指针有关，在PT_TOUCH指针中，意外交互（例如用手掌）可以触发输入。此标志的存在指示源设备对该输入是预期交互的一部分具有高置信度。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.PointerFlags.CANCELED">
            <summary>
            指示指针以异常方式离开，例如，当系统收到该指针的无效输入或具有活动指针的设备突然离开时。如果接收输入的应用程序可以这样做，则应将交互视为未完成，并撤销相关指针的任何影响。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.PointerFlags.DOWN">
            <summary>
            指示该指针已转换为向下状态；也就是说，它与数字转换器表面接触。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.PointerFlags.UPDATE">
            <summary>
            表示这是一个简单的更新，不包括指针状态更改。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.PointerFlags.UP">
            <summary>
            指示该指针已转换为向上状态；也就是说，与数字转换器表面的接触结束了。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.PointerFlags.WHEEL">
            <summary>
            指示与指针轮相关的输入。对于鼠标指针，这等效于鼠标滚轮（WM_MOUSEHWHEEL）的操作。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.PointerFlags.HWHEEL">
            <summary>
            指示与指针h轮相关联的输入。对于鼠标指针，这等效于鼠标水平滚动轮（WM_MOUSEHWHEEL）的操作。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.PointerFlags.CAPTURECHANGED">
            <summary>
            指示此指针已被另一个元素捕获（关联），并且原始元素丢失了捕获（请参见WM_POINTERCAPTURECHANGED）。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.PointerFlags.HASTRANSFORM">
            <summary>
            指示此指针具有关联的转换。
            </summary>
        </member>
        <member name="T:SpaceCG.WindowsAPI.User32.PointerButtonChangeType">
            <summary>
            <see cref="T:SpaceCG.WindowsAPI.User32.POINTER_INFO"/> 结构体字段 <see cref="F:SpaceCG.WindowsAPI.User32.POINTER_INFO.buttonChangeType"/> 的值之一
            <para>标识与指针关联的按钮状态的变化 <see cref="T:SpaceCG.WindowsAPI.User32.PointerFlags"/></para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/ne-winuser-pointer_button_change_type </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.PointerButtonChangeType.NONE">
            <summary>
            按钮状态无变化。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.PointerButtonChangeType.FIRSTBUTTON_DOWN">
            <summary>
            第一个按钮转换为按下状态。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.PointerButtonChangeType.FIRSTBUTTON_UP">
            <summary>
            第一个按钮转换为释放状态。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.PointerButtonChangeType.SECONDBUTTON_DOWN">
            <summary>
            第二个按钮转换为按下状态。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.PointerButtonChangeType.SECONDBUTTON_UP">
            <summary>
            第二个按钮转换为释放状态。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.PointerButtonChangeType.THIRDBUTTON_DOWN">
            <summary>
            第三个按钮转换为按下状态。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.PointerButtonChangeType.THIRDBUTTON_UP">
            <summary>
            第三个按钮转换为释放状态。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.PointerButtonChangeType.FOURTHBUTTON_DOWN">
            <summary>
            第四个按钮转换为按下状态。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.PointerButtonChangeType.FOURTHBUTTON_UP">
            <summary>
            第四个按钮转换为释放状态。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.PointerButtonChangeType.FIFTHBUTTON_DOWN">
            <summary>
            第五个按钮转换为按下状态。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.PointerButtonChangeType.FIFTHBUTTON_UP">
            <summary>
            第五个按钮转换为释放状态。
            </summary>
        </member>
        <member name="T:SpaceCG.WindowsAPI.User32.TouchFlags">
            <summary>
            <see cref="!:POINTERTOUCHINFO"/> 结构体字段 <see cref="!:POINTERTOUCHINFO.touchFlags"/> 的值之一
            <para>参考：https://docs.microsoft.com/zh-cn/previous-versions/windows/desktop/inputmsg/touch-flags-constants </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.TouchFlags.NONE">
            <summary>
            The default value.
            </summary>
        </member>
        <member name="T:SpaceCG.WindowsAPI.User32.TouchMask">
            <summary>
            <see cref="T:SpaceCG.WindowsAPI.User32.POINTER_TOUCH_INFO"/> 结构体字段 <see cref="F:SpaceCG.WindowsAPI.User32.POINTER_TOUCH_INFO.touchMask"/> 的值之一或值组合
            <para>参考：https://docs.microsoft.com/zh-cn/previous-versions/windows/desktop/inputmsg/touch-mask-constants </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.TouchMask.NONE">
            <summary>
            默认。所有可选字段均无效。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.TouchMask.CONTACTAREA">
            <summary>
            关系
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.TouchMask.ORIENTATION">
            <summary>
            方向
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.TouchMask.PRESSURE">
            <summary>
            压力
            </summary>
        </member>
        <member name="T:SpaceCG.WindowsAPI.User32.TouchEventFlags">
            <summary>
            结构体 <see cref="T:SpaceCG.WindowsAPI.User32.TOUCHINPUT"/> 属性 dwFlags 的值之一或值组合
            <para> 如果计算机上的目标硬件不支持悬停，则当设置 <see cref="F:SpaceCG.WindowsAPI.User32.TouchEventFlags.TOUCHEVENTF_UP"/> 标志时，将清除 <see cref="F:SpaceCG.WindowsAPI.User32.TouchEventFlags.TOUCHEVENTF_INRANGE"/>  标志。如果计算机上的目标硬件支持悬停，则将分别设置 TOUCHEVENTF_UP 和 TOUCHEVENTF_INRANGE 标志</para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/ns-winuser-touchinput </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.TouchEventFlags.TOUCHEVENTF_MOVE">
            <summary>
            发生了移动。不能与 <see cref="F:SpaceCG.WindowsAPI.User32.TouchEventFlags.TOUCHEVENTF_DOWN"/> 结合使用。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.TouchEventFlags.TOUCHEVENTF_DOWN">
            <summary>
            通过新的联系人建立了相应的接触点。不能与 <see cref="F:SpaceCG.WindowsAPI.User32.TouchEventFlags.TOUCHEVENTF_MOVE"/> 或 <see cref="F:SpaceCG.WindowsAPI.User32.TouchEventFlags.TOUCHEVENTF_UP"/> 结合使用。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.TouchEventFlags.TOUCHEVENTF_UP">
            <summary>
            触摸点已删除。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.TouchEventFlags.TOUCHEVENTF_INRANGE">
            <summary>
            接触点在范围内。此标志用于在兼容硬件上启用触摸悬浮支持。不需要支持悬停的应用程序可以忽略此标志。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.TouchEventFlags.TOUCHEVENTF_PRIMARY">
            <summary>
            指示此 <see cref="T:SpaceCG.WindowsAPI.User32.TOUCHINPUT"/> 结构对应于主要接触点。有关主要接触点的更多信息，请参见以下文本。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.TouchEventFlags.TOUCHEVENTF_NOCOALESCE">
            <summary>
            使用 <see cref="!:GetTouchInputInfo"/> 接收时，此输入未合并。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.TouchEventFlags.TOUCHEVENTF_PALM">
            <summary>
            触摸事件来自用户的手掌。
            </summary>
        </member>
        <member name="T:SpaceCG.WindowsAPI.User32.TouchMaskFlags">
            <summary>
            结构体 <see cref="F:SpaceCG.WindowsAPI.User32.TOUCHINPUT.dwMask"/> 的值之一或值组合
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/ns-winuser-touchinput </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.TouchMaskFlags.TOUCHINPUTMASKF_CONTACTAREA">
            <summary>
            cxContact 和 cyContact 有效。有关主要接触点的更多信息，请参见以下文本。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.TouchMaskFlags.TOUCHINPUTMASKF_EXTRAINFO">
            <summary>
            dwExtraInfo 有效。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.TouchMaskFlags.TOUCHINPUTMASKF_TIMEFROMSYSTEM">
            <summary>
            系统时间在 <see cref="T:SpaceCG.WindowsAPI.User32.TOUCHINPUT"/> 结构中设置。
            </summary>
        </member>
        <member name="T:SpaceCG.WindowsAPI.User32.POINTER_INFO">
            <summary>
            <see cref="!:POINTERTOUCHINFO"/> 结构体字段 <see cref="!:POINTERTOUCHINFO.pointerInfo"/> 的值
            <para>包含所有指针类型共有的基本指针信息。应用程序可以使用 <see cref="!:User32.GetPointerInfo"/>，<see cref="!:User32.GetPointerFrameInfo"/>，<see cref="!:User32.GetPointerInfoHistory"/> 和 <see cref="!:User32.GetPointerFrameInfoHistory"/> 函数检索此信息。</para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/ns-winuser-pointer_info </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.POINTER_INFO.pointerType">
            <summary>
            <see cref="T:SpaceCG.WindowsAPI.User32.PointerInputType"/> 枚举中的一个值，它指定指针类型。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.POINTER_INFO.pointerId">
            <summary>
            一个在其生存期内唯一标识指针的标识符。指针在首次检测到时就存在，而在超出检测范围时结束其存在。请注意，如果某个物理实体（手指或笔）超出了检测范围，然后又再次被检测到，则将其视为新的指针，并可以为其分配新的指针标识符。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.POINTER_INFO.frameId">
            <summary>
            源设备在单个输入帧中报告更新的多个指针共有的标识符。例如，并行模式多点触摸数字转换器可以在单次更新中向系统报告多个触摸触点的位置。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.POINTER_INFO.pointerFlags">
            <summary>
            可以是来自 <see cref="T:SpaceCG.WindowsAPI.User32.PointerFlags"/> 常量的标志的任何合理组合。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.POINTER_INFO.sourceDevice">
            <summary>
            处理可用于原始输入设备 API 和数字转换器设备 API 调用的源设备。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.POINTER_INFO.hwndTarget">
            <summary>
            此消息所针对的窗口。如果通过与该窗口建立联系来隐式捕获指针，或者使用指针捕获 API 显式地捕获指针，则这就是捕获窗口。如果未捕获指针，则这是生成此消息时指针所在的窗口。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.POINTER_INFO.ptPixelLocation">
            <summary>
            指针的预测屏幕坐标，以像素为单位。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.POINTER_INFO.ptHimetricLocation">
            <summary>
            针的预测屏幕坐标，以 HIMETRIC 单位。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.POINTER_INFO.ptPixelLocationRaw">
            <summary>
            指针的屏幕坐标，以像素为单位。有关调整的屏幕坐标，请参见 ptPixelLocation
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.POINTER_INFO.ptHimetricLocationRaw">
            <summary>
            指针的屏幕坐标，以 HIMETRIC 单位。有关调整的屏幕坐标，请参见 ptHimetricLocation。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.POINTER_INFO.dwTime">
            <summary>
            0或消息的时间戳，基于收到消息时的系统滴答计数。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.POINTER_INFO.historyCount">
            <summary>
            合并到此消息中的输入计数。此计数与调用 <see cref="!:User32.GetPointerInfoHistory"/> 可以返回的条目总数相匹配。如果未发生合并，则对于消息表示的单个输入，此计数为1。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.POINTER_INFO.InputData">
            <summary>
            InputData
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.POINTER_INFO.dwKeyStates">
            <summary>
            指示在生成输入时按下了哪些键盘修饰键。可以为零或以下值的组合。
            POINTER_MOD_SHIFT –按下了SHIFT键。
            POINTER_MOD_CTRL –按下CTRL键。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.POINTER_INFO.performanceCount">
            <summary>
            收到指针消息时的高分辨率性能计数器的值（高精度，64 位替代 dwTime）。当触摸数字化仪硬件在其输入报告中支持扫描时间戳信息时，可以校准该值。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.POINTER_INFO.buttonChangeType">
            <summary>
            <see cref="T:SpaceCG.WindowsAPI.User32.PointerButtonChangeType"/> 枚举中的一个值，用于指定此输入与先前输入之间的按钮状态更改。
            </summary>
        </member>
        <member name="T:SpaceCG.WindowsAPI.User32.POINTER_TOUCH_INFO">
            <summary>
            指针类型共有的基本触摸信息。
            <para><see cref="M:SpaceCG.WindowsAPI.User32.User32.InjectTouchInput(System.UInt32,SpaceCG.WindowsAPI.User32.POINTER_TOUCH_INFO[])"/> 函数参数 contacts 触摸数据集合</para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/ns-winuser-pointer_touch_info </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.POINTER_TOUCH_INFO.pointerInfo">
            <summary>
            嵌入式 <see cref="T:SpaceCG.WindowsAPI.User32.POINTER_INFO"/> 标头结构。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.POINTER_TOUCH_INFO.touchFlags">
            <summary>
            目前没有，为 0 。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.POINTER_TOUCH_INFO.touchMask">
            <summary>
            指示哪个可选字段包含有效值。该成员可以是零，也可以是“触摸蒙版”常量的值的任意组合。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.POINTER_TOUCH_INFO.rcContact">
            <summary>
            接触区域的预测屏幕坐标，以像素为单位。默认情况下，如果设备不报告接触区域，则此字段默认为以指针位置为中心的 0×0 矩形。
            <para>预测值基于数字化仪报告的指针位置和指针的运动。该校正可以补偿由于感测和处理数字化仪上的指针位置时固有的延迟而导致的视觉滞后。这适用于 PT_TOUCH 类型的指针。</para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.POINTER_TOUCH_INFO.rcContactRaw">
            <summary>
            接触区域的原始屏幕坐标，以像素为单位。有关调整的屏幕坐标，请参见 rcContact。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.POINTER_TOUCH_INFO.orientation">
            <summary>
            指针方向，其值介于0到359之间，其中 0 表示与 x 轴对齐并从左到右指向的触摸指针；增大的值表示沿顺时针方向的旋转度。
            <para>如果设备未报告方向，则此字段默认为 0。</para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.POINTER_TOUCH_INFO.pressure">
            <summary>
            笔压标准化为 0 到 1024 之间的范围。如果设备未报告压力，则默认值为 0。
            </summary>
        </member>
        <member name="T:SpaceCG.WindowsAPI.User32.TOUCHINPUT">
            <summary>
            封装用于触摸输入的数据。(TOUCHINPUT, *PTOUCHINPUT)
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/ns-winuser-touchinput </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.TOUCHINPUT.x">
            <summary>
            触摸输入的x坐标（水平点）。该成员以物理屏幕坐标的百分之一像素表示。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.TOUCHINPUT.y">
            <summary>
            触摸输入的y坐标（垂直点）。该成员以物理屏幕坐标的百分之一像素表示。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.TOUCHINPUT.hSource">
            <summary>
            源输入设备的设备句柄。触摸输入提供程序会在运行时为每个设备提供唯一的提供程序。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.TOUCHINPUT.dwID">
            <summary>
            区分特定触摸输入的触摸点标识符。从接触点下降到恢复接触点，此值在触摸接触序列中保持一致。以后可以将 ID 重新用于后续联系人。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.TOUCHINPUT.dwFlags">
            <summary>
            一组位标志，用于指定触摸点按下，释放和运动的各个方面。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.TOUCHINPUT.dwMask">
            <summary>
            一组位标志，用于指定结构中的哪些可选字段包含有效值。可选字段中有效信息的可用性是特定于设备的。仅当在 dwMask 中设置了相应的位时，应用程序才应使用可选的字段值。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.TOUCHINPUT.dwTime">
            <summary>
            事件的时间戳，以毫秒为单位。消费应用程序应注意，系统不对此字段执行任何验证；当未设置 <see cref="F:SpaceCG.WindowsAPI.User32.TouchMaskFlags.TOUCHINPUTMASKF_TIMEFROMSYSTEM"/>  标志时，此字段中值的准确性和顺序完全取决于触摸输入提供程序。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.TOUCHINPUT.dwExtraInfo">
            <summary>
            与触摸事件关联的附加值。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.TOUCHINPUT.cxContact">
            <summary>
            在物理屏幕坐标中，触摸接触区域的宽度以百分之一像素为单位。仅当 dwMask 成员设置了 <see cref="!:TouchMaskFlags.TOUCHEVENTFMASK_CONTACTAREA"/> 标志时，此值才有效。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.TOUCHINPUT.cyContact">
            <summary>
            在物理屏幕坐标中，触摸接触区域的高度以百分之一像素为单位。仅当 dwMask 成员设置了 <see cref="!:TouchMaskFlags.TOUCHEVENTFMASK_CONTACTAREA"/> 标志时，此值才有效。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.TOUCHINPUT.Size">
            <summary>
            <see cref="T:SpaceCG.WindowsAPI.User32.TOUCHINPUT"/> 结构体大小，以字节为单位。
            </summary>
        </member>
        <member name="T:SpaceCG.WindowsAPI.User32.RawInputFlags">
            <summary>
            <see cref="F:SpaceCG.WindowsAPI.User32.RAWINPUTDEVICE.dwFlags"/> 的值它可以是零（默认值）或以下值之一。默认情况下，只要具有窗口焦点，操作系统就会将原始输入从具有指定顶级集合（TLC）的设备发送到已注册的应用程序。
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/ns-winuser-rawinputdevice </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RawInputFlags.RIDEV_DEFAULT">
            <summary>
            Default
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RawInputFlags.RIDEV_REMOVE">
            <summary>
            如果设置，则从包含列表中删除顶级集合。这告诉操作系统停止从与顶级集合匹配的设备读取数据。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RawInputFlags.RIDEV_EXCLUDE">
            <summary>
            如果设置，则指定在阅读完整的使用情况页面时要排除的顶级集合。该标志仅影响已经使用 RIDEV_PAGEONLY 指定使用页面的 TLC 。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RawInputFlags.RIDEV_PAGEONLY">
            <summary>
            如果设置，则指定其顶级集合来自指定的 usUsagePage 的所有设备。请注意，usUsage 必须为零。要排除特定的顶级集合，请使用 RIDEV_EXCLUDE。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RawInputFlags.RIDEV_NOLEGACY">
            <summary>
            如果设置，将阻止 usUsagePage 或 usUsage 指定的任何设备生成旧消息。这仅适用于鼠标和键盘。请参阅备注。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RawInputFlags.RIDEV_INPUTSINK">
            <summary>
            如果设置，则即使呼叫者不在前台，也可以使呼叫者接收输入。请注意，必须指定 hwndTarget。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RawInputFlags.RIDEV_CAPTUREMOUSE">
            <summary>
            如果设置，则单击鼠标按钮不会激活其他窗口。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RawInputFlags.RIDEV_NOHOTKEYS">
            <summary>
            如果设置，则不处理应用程序定义的键盘设备热键。但是，系统热键；例如，ALT+TAB 和 CTRL+ALT+DEL 仍然可以处理。默认情况下，将处理所有键盘热键。RIDEV_NOHOTKEYS 的话可以连指定 RIDEV_NOLEGACY 没有指定和 hwndTarget 为 NULL。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RawInputFlags.RIDEV_APPKEYS">
            <summary>
            如果设置，将处理应用程序命令键。仅当为键盘设备指定了 RIDEV_NOLEGACY 时，才能指定 RIDEV_APPKEYS。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RawInputFlags.RIDEV_EXINPUTSINK">
            <summary>
            如果设置，则仅当前台应用程序不对其进行处理时，调用方才能在后台接收输入。换句话说，如果没有为原始输入注册前台应用程序，则注册的后台应用程序将接收输入。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RawInputFlags.RIDEV_DEVNOTIFY">
            <summary>
            如果设置，则使调用者可以接收 <see cref="F:SpaceCG.WindowsAPI.User32.MessageType.WM_INPUT_DEVICE_CHANGE"/> 通知，以通知设备到达和设备删除。
            </summary>
        </member>
        <member name="T:SpaceCG.WindowsAPI.User32.RawInputType">
            <summary>
            原始输入的设备类型。是 <see cref="F:SpaceCG.WindowsAPI.User32.RAWINPUTHEADER.dwType"/>, <see cref="F:SpaceCG.WindowsAPI.User32.RAWINPUTDEVICELIST.dwType"/> 值，可以是以下值之一。
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/ns-winuser-rawinputheader </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RawInputType.RIM_TYPEMOUSE">
            <summary>
            原始输入来自鼠标。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RawInputType.RIM_TYPEKEYBOARD">
            <summary>
            原始输入来自键盘。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RawInputType.RIM_TYPEHID">
            <summary>
            原始输入来自不是键盘或鼠标的某些设备。
            </summary>
        </member>
        <member name="T:SpaceCG.WindowsAPI.User32.RawMouseFlags">
            <summary>
            <see cref="F:SpaceCG.WindowsAPI.User32.RAWMOUSE.usFlags"/> 的值或值组合
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RawMouseFlags.MOUSE_MOVE_RELATIVE">
            <summary>
            鼠标移动数据是相对于最后鼠标位置的。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RawMouseFlags.MOUSE_MOVE_ABSOLUTE">
            <summary>
            鼠标移动数据基于绝对位置。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RawMouseFlags.MOUSE_VIRTUAL_DESKTOP">
            <summary>
            鼠标坐标映射到虚拟桌面（对于多监视器系统）。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RawMouseFlags.MOUSE_ATTRIBUTES_CHANGED">
            <summary>
            鼠标属性已更改；应用程序需要查询鼠标属性。
            </summary>
        </member>
        <member name="T:SpaceCG.WindowsAPI.User32.RawInputMouseFlags">
            <summary>
            <see cref="F:SpaceCG.WindowsAPI.User32.RAWMOUSE.usButtonFlags"/> 成员的一个或多个值
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RawInputMouseFlags.RI_MOUSE_LEFT_BUTTON_DOWN">
            <summary>
            左按钮更改为向下。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RawInputMouseFlags.RI_MOUSE_LEFT_BUTTON_UP">
            <summary>
            左按钮变为上按钮。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RawInputMouseFlags.RI_MOUSE_MIDDLE_BUTTON_DOWN">
            <summary>
            中键更改为向下。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RawInputMouseFlags.RI_MOUSE_MIDDLE_BUTTON_UP">
            <summary>
            中键更改为向上。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RawInputMouseFlags.RI_MOUSE_RIGHT_BUTTON_DOWN">
            <summary>
            右键更改为向下。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RawInputMouseFlags.RI_MOUSE_RIGHT_BUTTON_UP">
            <summary>
            右键更改为向上。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RawInputMouseFlags.RI_MOUSE_BUTTON_1_DOWN">
            <summary>
            RI_MOUSE_LEFT_BUTTON_DOWN
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RawInputMouseFlags.RI_MOUSE_BUTTON_1_UP">
            <summary>
            RI_MOUSE_LEFT_BUTTON_UP
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RawInputMouseFlags.RI_MOUSE_BUTTON_2_DOWN">
            <summary>
            RI_MOUSE_RIGHT_BUTTON_DOWN
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RawInputMouseFlags.RI_MOUSE_BUTTON_2_UP">
            <summary>
            RI_MOUSE_RIGHT_BUTTON_UP
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RawInputMouseFlags.RI_MOUSE_BUTTON_3_DOWN">
            <summary>
            RI_MOUSE_MIDDLE_BUTTON_DOWN
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RawInputMouseFlags.RI_MOUSE_BUTTON_3_UP">
            <summary>
            RI_MOUSE_MIDDLE_BUTTON_UP
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RawInputMouseFlags.RI_MOUSE_BUTTON_4_DOWN">
            <summary>
            XBUTTON1更改为向下。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RawInputMouseFlags.RI_MOUSE_BUTTON_4_UP">
            <summary>
            XBUTTON1更改为up。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RawInputMouseFlags.RI_MOUSE_BUTTON_5_DOWN">
            <summary>
            XBUTTON2更改为向下。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RawInputMouseFlags.RI_MOUSE_BUTTON_5_UP">
            <summary>
            XBUTTON2更改为up。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RawInputMouseFlags.RI_MOUSE_WHEEL">
            <summary>
            原始输入来自鼠标滚轮。车轮增量存储在 usButtonData 中。
            </summary>
        </member>
        <member name="T:SpaceCG.WindowsAPI.User32.RawInputKeyFlags">
            <summary>
            <see cref="F:SpaceCG.WindowsAPI.User32.RAWKEYBOARD.Flags"/> 的值之一
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/ns-winuser-rawkeyboard </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RawInputKeyFlags.RI_KEY_MAKE">
            <summary>
            The key is down.
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RawInputKeyFlags.RI_KEY_BREAK">
            <summary>
            The key is up.
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RawInputKeyFlags.RI_KEY_E0">
            <summary>
            扫描代码具有 E0 前缀。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RawInputKeyFlags.RI_KEY_E1">
            <summary>
            扫描代码具有 E1 前缀。
            </summary>
        </member>
        <member name="T:SpaceCG.WindowsAPI.User32.RIDFlag">
            <summary>
            <see cref="M:SpaceCG.WindowsAPI.User32.User32.GetRawInputData(System.IntPtr,SpaceCG.WindowsAPI.User32.RIDFlag,System.IntPtr,System.UInt32@,System.UInt32)"/> 函数参数 uiCommand 值之一
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getrawinputdata </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RIDFlag.RID_INPUT">
            <summary>
            从 <see cref="T:SpaceCG.WindowsAPI.User32.RAWINPUT"/> 结构获取原始数据。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RIDFlag.RID_HEADER">
            <summary>
            从 <see cref="T:SpaceCG.WindowsAPI.User32.RAWINPUT"/> 结构获取标头信息。
            </summary>
        </member>
        <member name="T:SpaceCG.WindowsAPI.User32.RIDIFlag">
            <summary>
            <see cref="M:SpaceCG.WindowsAPI.User32.User32.GetRawInputDeviceInfo(System.IntPtr,System.UInt32,System.IntPtr,System.UInt32@)"/> 函数参数 uiCommand 值之一
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getrawinputdeviceinfoa </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RIDIFlag.RIDI_DEVICENAME">
            <summary>
            pData 指向包含设备名称的字符串。仅对于此 uiCommand，pcbSize 中的值是字符计数（而不是字节计数）。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RIDIFlag.RIDI_DEVICEINFO">
            <summary>
            pData 指向 <see cref="T:SpaceCG.WindowsAPI.User32.RID_DEVICE_INFO"/> 结构。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RIDIFlag.RIDI_PREPARSEDDATA">
            <summary>
            pData 指向先前解析的数据。
            </summary>
        </member>
        <member name="T:SpaceCG.WindowsAPI.User32.RAWINPUTDEVICE">
            <summary>
            定义原始输入设备的信息。(RAWINPUTDEVICE, *PRAWINPUTDEVICE, *LPRAWINPUTDEVICE)
            <para>如果为鼠标或键盘设置了 <see cref="F:SpaceCG.WindowsAPI.User32.RawInputFlags.RIDEV_NOLEGACY"/>，则系统不会为该应用程序的设备生成任何旧消息。例如，如果将鼠标 TLC 设置为 RIDEV_NOLEGACY，则不会生成 WM_LBUTTONDOWN 和相关的旧鼠标消息。同样，如果将键盘 TLC设置为 RIDEV_NOLEGACY，则不会生成 WM_KEYDOWN 和相关的旧式键盘消息。</para>
            <para>如果 <see cref="F:SpaceCG.WindowsAPI.User32.RawInputFlags.RIDEV_REMOVE"/> 设置和 hwndTarget 成员未设置为 NULL，则参数验证将失败。</para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/ns-winuser-rawinputdevice </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RAWINPUTDEVICE.usUsagePage">
            <summary>
            原始输入设备的顶级收集使用情况页面。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RAWINPUTDEVICE.usUsage">
            <summary>
            顶级集合原始输入设备的用法。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RAWINPUTDEVICE.dwFlags">
            <summary>
            模式标志，用于指定如何解释 usUsagePage 和 usUsage 提供的信息。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RAWINPUTDEVICE.hwndTarget">
            <summary>
            目标窗口的句柄。如果为 NULL，则跟随键盘焦点。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RAWINPUTDEVICE.Size">
            <summary>
            <see cref="T:SpaceCG.WindowsAPI.User32.RAWINPUTDEVICE"/> 结构体大小，以字节为单位。
            </summary>
        </member>
        <member name="T:SpaceCG.WindowsAPI.User32.RAWINPUTDEVICELIST">
            <summary>
            包含有关原始输入设备的信息。(RAWINPUTDEVICELIST, *PRAWINPUTDEVICELIST)
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/ns-winuser-rawinputdevicelist </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RAWINPUTDEVICELIST.hDevice">
            <summary>
            原始输入设备的句柄。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RAWINPUTDEVICELIST.dwType">
            <summary>
            设备的类型
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RAWINPUTDEVICELIST.Size">
            <summary>
            <see cref="T:SpaceCG.WindowsAPI.User32.RAWINPUTDEVICELIST"/> 结构体大小，以字节为单位。
            </summary>
        </member>
        <member name="T:SpaceCG.WindowsAPI.User32.RAWINPUTDATA">
            <summary>
            原始输入数据类型，联合体 Raw Union Data
            <para>注意：为了解决 32 与 64 位平台软件的兼容性问题，有才了这个结构体 </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RAWINPUTDATA.mouse">
            <summary>
            如果原始输入 <see cref="F:SpaceCG.WindowsAPI.User32.RAWINPUTHEADER.dwType"/> 类型为 <see cref="F:SpaceCG.WindowsAPI.User32.RawInputType.RIM_TYPEMOUSE"/>, 则为 <see cref="T:SpaceCG.WindowsAPI.User32.RAWMOUSE"/> 结构体数据。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RAWINPUTDATA.keyboard">
            <summary>
            如果原始输入 <see cref="F:SpaceCG.WindowsAPI.User32.RAWINPUTHEADER.dwType"/> 类型为 <see cref="F:SpaceCG.WindowsAPI.User32.RawInputType.RIM_TYPEKEYBOARD"/>, 则为 <see cref="T:SpaceCG.WindowsAPI.User32.RAWKEYBOARD"/> 结构体数据。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RAWINPUTDATA.hid">
            <summary>
            如果原始输入 <see cref="F:SpaceCG.WindowsAPI.User32.RAWINPUTHEADER.dwType"/> 类型为 <see cref="F:SpaceCG.WindowsAPI.User32.RawInputType.RIM_TYPEHID"/>, 则为 <see cref="T:SpaceCG.WindowsAPI.User32.RAWHID"/> 结构体数据。
            </summary>
        </member>
        <member name="T:SpaceCG.WindowsAPI.User32.RAWINPUT">
            <summary>
            包含设备的原始输入。(RAWINPUT, *PRAWINPUT, *LPRAWINPUT)
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/ns-winuser-rawinput </para>
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getrawinputbuffer </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RAWINPUT.header">
            <summary>
            原始输入标头数据。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RAWINPUT.data">
            <summary>
            原始输入数据
            </summary>
        </member>
        <member name="T:SpaceCG.WindowsAPI.User32.RAWINPUTHEADER">
            <summary>
            包含作为原始输入数据一部分的标头信息。(RAWINPUTHEADER, *PRAWINPUTHEADER, *LPRAWINPUTHEADER)
            <para>要获取有关设备的更多信息，请在对 <see cref="M:SpaceCG.WindowsAPI.User32.User32.GetRawInputDeviceInfo(System.IntPtr,System.UInt32,System.IntPtr,System.UInt32@)"/> 的调用中使用 hDevice。</para>
            <para>注意：<see cref="T:System.IntPtr"/> 类型数据，在 32 位软件上是占 4 个字节，在 64 位软件上是占 8 个字节</para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/ns-winuser-rawinputheader </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RAWINPUTHEADER.dwType">
            <summary>
            原始输入的类型。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RAWINPUTHEADER.dwSize">
            <summary>
            整个输入数据包的大小（以字节为单位）。这包括 <see cref="T:SpaceCG.WindowsAPI.User32.RAWINPUT"/> 加上 <see cref="T:SpaceCG.WindowsAPI.User32.RAWHID"/> 可变长度数组中可能的其他输入报告。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RAWINPUTHEADER.hDevice">
            <summary>
            生成原始输入数据的设备的句柄。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RAWINPUTHEADER.wParam">
            <summary>
            在 <see cref="F:SpaceCG.WindowsAPI.User32.MessageType.WM_INPUT"/> 消息的 wParam 参数中传递的值 。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RAWINPUTHEADER.Size">
            <summary>
            <see cref="T:SpaceCG.WindowsAPI.User32.RAWINPUTHEADER"/> 结构大小，以字节为单位。
            <para>注意：<see cref="T:System.IntPtr"/> 类型数据，在 32 位软件上是占 4 个字节，在 64 位软件上是占 8 个字节</para>
            </summary>
        </member>
        <member name="T:SpaceCG.WindowsAPI.User32.RAWMOUSE">
            <summary>
            包含有关鼠标状态的信息。(RAWMOUSE, *PRAWMOUSE, *LPRAWMOUSE)
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/ns-winuser-rawmouse </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RAWMOUSE.usFlags">
            <summary>
            鼠标状态
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RAWMOUSE.ulButtons">
            <summary>
            保留。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RAWMOUSE.usButtonFlags">
            <summary>
            鼠标按钮的过渡状态。该成员可以是一个或多个值。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RAWMOUSE.usButtonData">
            <summary>
            如果 usButtonFlags 是 RI_MOUSE_WHEEL，则此成员是带符号的值，用于指定车轮增量。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RAWMOUSE.ulRawButtons">
            <summary>
            鼠标按钮的原始状态。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RAWMOUSE.lLastX">
            <summary>
            X 方向上的运动。这是带符号的相对运动或绝对运动，具体取决于 usFlags 的值。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RAWMOUSE.lLastY">
            <summary>
            Y 方向上的运动。这是带符号的相对运动或绝对运动，具体取决于 usFlags 的值。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RAWMOUSE.ulExtraInformation">
            <summary>
            事件的设备特定的附加信息。
            </summary>
        </member>
        <member name="T:SpaceCG.WindowsAPI.User32.RAWKEYBOARD">
            <summary>
            包含有关键盘状态的信息。(RAWKEYBOARD, *PRAWKEYBOARD, *LPRAWKEYBOARD)
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/ns-winuser-rawkeyboard </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RAWKEYBOARD.MakeCode">
            <summary>
            按键按下时的扫描代码。键盘溢出的扫描代码为 KEYBOARD_OVERRUN_MAKE_CODE。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RAWKEYBOARD.Flags">
            <summary>
            扫描代码信息的标志。可以是一项或多项。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RAWKEYBOARD.Reserved">
            <summary>
            保留；必须为零。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RAWKEYBOARD.VKey">
            <summary>
            Windows 消息兼容的虚拟键代码。有关更多信息，请参见 <see cref="T:SpaceCG.WindowsAPI.User32.VirtualKeyCode"/>。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RAWKEYBOARD.Message">
            <summary>
            相应的窗口消息，例如 <see cref="F:SpaceCG.WindowsAPI.User32.MessageType.WM_KEYDOWN"/>, <see cref="F:SpaceCG.WindowsAPI.User32.MessageType.WM_SYSKEYDOWN"/> 等。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RAWKEYBOARD.ExtraInformation">
            <summary>
            事件的设备特定的附加信息。
            </summary>
        </member>
        <member name="T:SpaceCG.WindowsAPI.User32.RAWHID">
            <summary>
            描述来自人机接口设备（HID）的原始输入的格式。(RAWHID, *PRAWHID, *LPRAWHID)
            <para>注意：该结构体为可变长数据结构体 </para>
            <para>每个 <see cref="F:SpaceCG.WindowsAPI.User32.MessageType.WM_INPUT"/> 可以指示多个输入，但是所有输入都来自相同的 HID。bRawData 数组的大小为 dwSizeHid * dwCount。</para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/ns-winuser-rawhid </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RAWHID.dwSizeHid">
            <summary>
            bRawData 中每个 HID 输入的大小（以字节为单位）。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RAWHID.dwCount">
            <summary>
            bRawData 中 HID 输入的数量。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RAWHID.bRawData">
            <summary>
            原始输入数据(Buffer)，以字节数组形式。
            <para>参考：https://docs.microsoft.com/zh-cn/dotnet/standard/native-interop/best-practices </para>
            <para>参考：https://docs.microsoft.com/zh-cn/dotnet/standard/native-interop/customize-struct-marshaling </para>
            <para>参考：https://docs.microsoft.com/zh-cn/dotnet/framework/interop/default-marshaling-for-arrays?view=netframework-4.7.2 </para>
            </summary>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.RAWHID.GetRawData">
            <summary>
            获取原始数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.RAWHID.GetRawData(System.Byte[]@)">
            <summary>
            获取原始数据
            </summary>
            <param name="data"></param>
        </member>
        <member name="T:SpaceCG.WindowsAPI.User32.RID_DEVICE_INFO">
            <summary>
            定义来自任何设备的原始输入数据。(RID_DEVICE_INFO, *PRID_DEVICE_INFO, *LPRID_DEVICE_INFO)
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/ns-winuser-rid_device_info?redirectedfrom=MSDN </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RID_DEVICE_INFO.cbSize">
            <summary>
            <see cref="T:SpaceCG.WindowsAPI.User32.RID_DEVICE_INFO"/> 结构的大小（以字节为单位）。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RID_DEVICE_INFO.dwType">
            <summary>
            原始输入数据的类型。见 <see cref="T:SpaceCG.WindowsAPI.User32.RawInputType"/>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RID_DEVICE_INFO.mouse">
            <summary>
            如果 dwType 为 <see cref="F:SpaceCG.WindowsAPI.User32.RawInputType.RIM_TYPEMOUSE"/>，则这是定义鼠标的 <see cref="T:SpaceCG.WindowsAPI.User32.RID_DEVICE_INFO_MOUSE"/> 结构。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RID_DEVICE_INFO.keyboard">
            <summary>
            如果 dwType 为 <see cref="F:SpaceCG.WindowsAPI.User32.RawInputType.RIM_TYPEKEYBOARD"/>，则这是定义键盘的 <see cref="T:SpaceCG.WindowsAPI.User32.RID_DEVICE_INFO_KEYBOARD"/> 结构。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RID_DEVICE_INFO.hid">
            <summary>
            如果 dwType 为 <see cref="F:SpaceCG.WindowsAPI.User32.RawInputType.RIM_TYPEHID"/>，则这是定义 HID 设备的 <see cref="T:SpaceCG.WindowsAPI.User32.RID_DEVICE_INFO_HID"/> 结构。
            </summary>
        </member>
        <member name="T:SpaceCG.WindowsAPI.User32.RID_DEVICE_INFO_HID">
            <summary>
            定义来自指定人机界面设备（HID）的原始输入数据。(RID_DEVICE_INFO_HID, *PRID_DEVICE_INFO_HID)
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/ns-winuser-rid_device_info_hid?redirectedfrom=MSDN </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RID_DEVICE_INFO_HID.dwVendorId">
            <summary>
            HID的供应商标识符。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RID_DEVICE_INFO_HID.dwProductId">
            <summary>
            HID的产品标识符。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RID_DEVICE_INFO_HID.dwVersionNumber">
            <summary>
            HID的版本号。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RID_DEVICE_INFO_HID.usUsagePage">
            <summary>
            设备的顶级集合使用情况页面。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RID_DEVICE_INFO_HID.usUsage">
            <summary>
            设备的顶级集合用法。
            </summary>
        </member>
        <member name="T:SpaceCG.WindowsAPI.User32.RID_DEVICE_INFO_KEYBOARD">
            <summary>
            定义来自指定键盘的原始输入数据。(RID_DEVICE_INFO_KEYBOARD, *PRID_DEVICE_INFO_KEYBOARD)
            <para>For the keyboard, the Usage Page is 0x01 and the Usage is 0x06.</para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/ns-winuser-rid_device_info_keyboard?redirectedfrom=MSDN </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RID_DEVICE_INFO_KEYBOARD.dwType">
            <summary>
            键盘的类型。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RID_DEVICE_INFO_KEYBOARD.dwSubType">
            <summary>
            键盘的子类型。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RID_DEVICE_INFO_KEYBOARD.dwKeyboardMode">
            <summary>
            扫描码模式。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RID_DEVICE_INFO_KEYBOARD.dwNumberOfFunctionKeys">
            <summary>
            键盘上的功能键数。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RID_DEVICE_INFO_KEYBOARD.dwNumberOfIndicators">
            <summary>
            键盘上LED指示灯的数量。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RID_DEVICE_INFO_KEYBOARD.dwNumberOfKeysTotal">
            <summary>
            键盘上的键总数。
            </summary>
        </member>
        <member name="T:SpaceCG.WindowsAPI.User32.RID_DEVICE_INFO_MOUSE">
            <summary>
            定义来自指定鼠标的原始输入数据。(RID_DEVICE_INFO_MOUSE, *PRID_DEVICE_INFO_MOUSE)
            <para>For the mouse, the Usage Page is 0x01 and the Usage is 0x02.</para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/ns-winuser-rid_device_info_mouse?redirectedfrom=MSDN </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RID_DEVICE_INFO_MOUSE.dwId">
            <summary>
            鼠标设备的标识符。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RID_DEVICE_INFO_MOUSE.dwNumberOfButtons">
            <summary>
            鼠标的按钮数。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RID_DEVICE_INFO_MOUSE.dwSampleRate">
            <summary>
            每秒的数据点数。此信息可能不适用于每个鼠标设备。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.RID_DEVICE_INFO_MOUSE.fHasHorizontalWheel">
            <summary>
            如果鼠标具有滚轮可水平滚动，则为TRUE；否则为TRUE。否则为FALSE。
            </summary>
        </member>
        <member name="T:SpaceCG.WindowsAPI.User32.DeviceNotifyFlag">
            <summary>
            <see cref="M:SpaceCG.WindowsAPI.User32.User32.RegisterDeviceNotification(System.IntPtr,System.IntPtr,SpaceCG.WindowsAPI.User32.DeviceNotifyFlag)"/> 函数参考 Flags 的参数之一
            <para>参考： https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-registerdevicenotificationa </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.DeviceNotifyFlag.DEVICE_NOTIFY_WINDOW_HANDLE">
            <summary>
            该 hRecipient 参数是一个窗口句柄。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.DeviceNotifyFlag.DEVICE_NOTIFY_SERVICE_HANDLE">
            <summary>
            该 hRecipient 参数是服务状态句柄。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.DeviceNotifyFlag.DEVICE_NOTIFY_ALL_INTERFACE_CLASSES">
            <summary>
            通知接收者所有设备接口类的设备接口事件。(dbcc_classguid成员将被忽略。) 仅当 dbch_devicetype 成员是 <see cref="F:SpaceCG.WindowsAPI.User32.DeviceType.DBT_DEVTYP_DEVICEINTERFACE"/> 时，才可以使用此值。
            </summary>
        </member>
        <member name="T:SpaceCG.WindowsAPI.User32.DeviceBroadcastType">
            <summary>
            Device Broadcast Type
            <para><see cref="F:SpaceCG.WindowsAPI.User32.MessageType.WM_DEVICECHANGE"/> wParam Data, device-change event</para>
            <para>参考：C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\um  Dbt.h </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.DeviceBroadcastType.DBT_APPYBEGIN">
            <summary>
            appy begin. lParam  = (not used)
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.DeviceBroadcastType.DBT_APPYEND">
            <summary>
            appy end. lParam  = (not used)
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.DeviceBroadcastType.DBT_DEVNODES_CHANGED">
            <summary>
            当 configmg 完成进程树批处理时发送. lParam  = 0
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.DeviceBroadcastType.DBT_QUERYCHANGECONFIG">
            <summary>
            sent to ask if a config change is allowed. lParam  = 0
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.DeviceBroadcastType.DBT_CONFIGCHANGED">
            <summary>
            sent when a config has changed, lParam  = 0
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.DeviceBroadcastType.DBT_CONFIGCHANGECANCELED">
            <summary>
            someone cancelled the config change, lParam  = 0
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.DeviceBroadcastType.DBT_MONITORCHANGE">
            <summary>
            this message is sent when the display monitor has changed and the system should change the display mode to match it.
            <para>lParam  = new resolution to use (LOWORD=x, HIWORD=y) if 0, use the default res for current config</para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.DeviceBroadcastType.DBT_SHELLLOGGEDON">
            <summary>
            The shell has finished login on: VxD can now do Shell_EXEC.  lParam  = 0
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.DeviceBroadcastType.DBT_CONFIGMGAPI32">
            <summary>
            lParam  = CONFIGMG API Packet, CONFIGMG ring 3 call.
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.DeviceBroadcastType.DBT_VXDINITCOMPLETE">
            <summary>
            CONFIGMG ring 3 call. lParam  = 0
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.DeviceBroadcastType.DBT_VOLLOCKQUERYLOCK">
            <summary>
            Message = WM_DEVICECHANGE, wParam  = DBT_VOLLOCK*, lParam  = pointer to VolLockBroadcast structure described below.
            <para>Messages issued by IFSMGR for volume locking purposes on WM_DEVICECHANGE. All these messages pass a pointer to a struct which has no pointers.</para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.DeviceBroadcastType.DBT_VOLLOCKLOCKTAKEN">
            <summary>
            Message = WM_DEVICECHANGE, wParam  = DBT_VOLLOCK*, lParam  = pointer to VolLockBroadcast structure described below.
            <para>Messages issued by IFSMGR for volume locking purposes on WM_DEVICECHANGE. All these messages pass a pointer to a struct which has no pointers.</para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.DeviceBroadcastType.DBT_VOLLOCKLOCKFAILED">
            <summary>
            Message = WM_DEVICECHANGE, wParam  = DBT_VOLLOCK*, lParam  = pointer to VolLockBroadcast structure described below.
            <para>Messages issued by IFSMGR for volume locking purposes on WM_DEVICECHANGE. All these messages pass a pointer to a struct which has no pointers.</para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.DeviceBroadcastType.DBT_VOLLOCKQUERYUNLOCK">
            <summary>
            Message = WM_DEVICECHANGE, wParam  = DBT_VOLLOCK*, lParam  = pointer to VolLockBroadcast structure described below.
            <para>Messages issued by IFSMGR for volume locking purposes on WM_DEVICECHANGE. All these messages pass a pointer to a struct which has no pointers.</para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.DeviceBroadcastType.DBT_VOLLOCKLOCKRELEASED">
            <summary>
            Message = WM_DEVICECHANGE, wParam  = DBT_VOLLOCK*, lParam  = pointer to VolLockBroadcast structure described below.
            <para>Messages issued by IFSMGR for volume locking purposes on WM_DEVICECHANGE. All these messages pass a pointer to a struct which has no pointers.</para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.DeviceBroadcastType.DBT_VOLLOCKUNLOCKFAILED">
            <summary>
            Message = WM_DEVICECHANGE, wParam  = DBT_VOLLOCK*, lParam  = pointer to VolLockBroadcast structure described below.
            <para>Messages issued by IFSMGR for volume locking purposes on WM_DEVICECHANGE. All these messages pass a pointer to a struct which has no pointers.</para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.DeviceBroadcastType.DBT_NO_DISK_SPACE">
            <summary>
            Message issued by IFS manager when it detects that a drive is run out of free space. lParam = drive number of drive that is out of disk space (1-based)
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.DeviceBroadcastType.DBT_LOW_DISK_SPACE">
            <summary>
            lParam  = drive number of drive that is low on disk space (1-based)
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.DeviceBroadcastType.DBT_CONFIGMGPRIVATE">
            <summary>
            configmg private
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.DeviceBroadcastType.DBT_DEVICEARRIVAL">
            <summary>
            system detected a new device
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.DeviceBroadcastType.DBT_DEVICEQUERYREMOVE">
            <summary>
            wants to remove, may fail
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.DeviceBroadcastType.DBT_DEVICEQUERYREMOVEFAILED">
            <summary>
            removal aborted
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.DeviceBroadcastType.DBT_DEVICEREMOVECOMPLETE">
            <summary>
            Device Move Complete
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.DeviceBroadcastType.DBT_DEVICETYPESPECIFIC">
            <summary>
            type specific event
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.DeviceBroadcastType.DBT_CUSTOMEVENT">
            <summary>
            user-defined event
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.DeviceBroadcastType.DBT_DEVINSTENUMERATED">
            <summary>
            (WIN7) system detected a new device
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.DeviceBroadcastType.DBT_DEVINSTSTARTED">
            <summary>
            (WIN7) device installed and started
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.DeviceBroadcastType.DBT_DEVINSTREMOVED">
            <summary>
            (WIN7) device removed from system
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.DeviceBroadcastType.DBT_DEVINSTPROPERTYCHANGED">
            <summary>
            (WIN7) a property on the device changed
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.DeviceBroadcastType.DBT_USERDEFINED">
            <summary>
            User defined
            </summary>
        </member>
        <member name="T:SpaceCG.WindowsAPI.User32.DeviceType">
            <summary>
            <see cref="T:SpaceCG.WindowsAPI.User32.DEV_BROADCAST_HDR"/> 结构体字段 <see cref="F:SpaceCG.WindowsAPI.User32.DEV_BROADCAST_HDR.dbch_devicetype"/> 的值之一
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/api/dbt/ns-dbt-dev_broadcast_hdr </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.DeviceType.DBT_DEVTYP_OEM">
            <summary>
            oem-defined device type, OEM 或 IHV 定义的设备类型。此结构是 <see cref="T:SpaceCG.WindowsAPI.User32.DEV_BROADCAST_OEM"/> 结构。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.DeviceType.DBT_DEVTYP_DEVNODE">
            <summary>
            devnode number
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.DeviceType.DBT_DEVTYP_VOLUME">
            <summary>
            logical volume, 逻辑卷。此结构是 <see cref="T:SpaceCG.WindowsAPI.User32.DEV_BROADCAST_VOLUME"/> 结构。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.DeviceType.DBT_DEVTYP_PORT">
            <summary>
            serial/parallel, 端口设备（串行或并行）。此结构是 <see cref="T:SpaceCG.WindowsAPI.User32.DEV_BROADCAST_PORT"/> 结构。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.DeviceType.DBT_DEVTYP_NET">
            <summary>
            network resource
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.DeviceType.DBT_DEVTYP_DEVICEINTERFACE">
            <summary>
            device interface class, 设备类别。此结构是 <see cref="T:SpaceCG.WindowsAPI.User32.DEV_BROADCAST_DEVICEINTERFACE"/> 结构。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.DeviceType.DBT_DEVTYP_HANDLE">
            <summary>
            file system handle, 文件系统句柄。此结构是 <see cref="T:SpaceCG.WindowsAPI.User32.DEV_BROADCAST_HANDLE"/> 结构。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.DeviceType.DBT_DEVTYP_DEVINST">
            <summary>
            device instance
            </summary>
        </member>
        <member name="T:SpaceCG.WindowsAPI.User32.DEV_BROADCAST_HDR">
            <summary>
            用作与通过 <see cref="F:SpaceCG.WindowsAPI.User32.MessageType.WM_DEVICECHANGE"/> 消息报告的设备事件相关的信息的标准标头 。
            <para>WM_DEVICECHANGE lParam Data, event-specific data</para>
            <para>由于此结构包含可变长度字段，因此可以将其用作创建指向用户定义结构的指针的模板。请注意，该结构不得包含指针。示：<see cref="T:SpaceCG.WindowsAPI.User32.DEV_BROADCAST_USERDEFINED"/>, <see cref="T:SpaceCG.WindowsAPI.User32.DEV_BROADCAST_PORT"/>, <see cref="T:SpaceCG.WindowsAPI.User32.DEV_BROADCAST_VOLUME"/>, <see cref="T:SpaceCG.WindowsAPI.User32.DEV_BROADCAST_OEM"/> 等</para>
            <para> <see cref="T:SpaceCG.WindowsAPI.User32.DEV_BROADCAST_HDR"/> 结构的成员 包含在每个设备管理结构中。要确定您通过 <see cref="F:SpaceCG.WindowsAPI.User32.MessageType.WM_DEVICECHANGE"/> 接收到的结构，请将其视为 <see cref="T:SpaceCG.WindowsAPI.User32.DEV_BROADCAST_HDR"/> 结构并检查其 dbch_devicetype 成员。</para>
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/api/dbt/ns-dbt-dev_broadcast_hdr </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.DEV_BROADCAST_HDR.dbch_size">
            <summary>
            此结构的大小，以字节为单位。
            <para>如果这是用户定义的事件，则此成员必须是此标头的大小，加上 <see cref="T:SpaceCG.WindowsAPI.User32.DEV_BROADCAST_USERDEFINED"/> 结构中的可变长度数据的 大小。</para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.DEV_BROADCAST_HDR.dbch_devicetype">
            <summary>
            设备类型，确定跟随前三个成员的事件特定信息。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.DEV_BROADCAST_HDR.dbch_reserved">
            <summary>
            保留，不使用。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.DEV_BROADCAST_HDR.Size">
            <summary>
            <see cref="T:SpaceCG.WindowsAPI.User32.DEV_BROADCAST_HDR"/> 结构数据大小，以字节为单位。
            </summary>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.DEV_BROADCAST_HDR.ToString">
            <summary>
            @ToString()
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpaceCG.WindowsAPI.User32.DEV_BROADCAST_USERDEFINED">
            <summary>
            包含用户定义的事件以及与 DBT_USERDEFINED 设备事件关联的可选数据 。
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/api/dbt/ns-dbt-_dev_broadcast_userdefined </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.DEV_BROADCAST_USERDEFINED.dbud_head">
            <summary>
            有关受 <see cref="T:SpaceCG.WindowsAPI.User32.DEV_BROADCAST_HDR"/> 结构指定的 <see cref="F:SpaceCG.WindowsAPI.User32.MessageType.WM_DEVICECHANGE"/> 消息影响的设备的信息 。因为 <see cref="T:SpaceCG.WindowsAPI.User32.DEV_BROADCAST_USERDEFINED"/> 是可变长度，则 mdbch_sizem 所述的构件 mdbud_dbhm 结构必须在整个结构的字节数，包括可变长度部分的大小。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.DEV_BROADCAST_USERDEFINED.dbud_szName">
            <summary>
            指向区分大小写，以空字符结尾的字符串的指针，该字符串命名消息。该字符串必须由供应商名称，反斜杠和后面的任意用户定义的以空字符结尾的文本组成。
            </summary>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.DEV_BROADCAST_USERDEFINED.ToString">
            <summary>
            @ToString()
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpaceCG.WindowsAPI.User32.DEV_BROADCAST_PORT">
            <summary>
            包含有关调制解调器，串行或并行端口的信息。(DEV_BROADCAST_PORT_A, *PDEV_BROADCAST_PORT_A)
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/dbt/ns-dbt-dev_broadcast_port_a </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.DEV_BROADCAST_PORT.dbcp_head">
            <summary>
            有关受 <see cref="T:SpaceCG.WindowsAPI.User32.DEV_BROADCAST_HDR"/> 结构指定的 <see cref="F:SpaceCG.WindowsAPI.User32.MessageType.WM_DEVICECHANGE"/> 消息影响的设备的信息。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.DEV_BROADCAST_PORT.dbcp_name">
            <summary>
            以空值结尾的字符串，用于指定端口或连接到该端口的设备的友好名称。友好名称旨在帮助用户快速准确地识别设备-例如，"COM1" 和 "Standard 28800 bps Modem" 被视为友好名称。
            </summary>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.DEV_BROADCAST_PORT.ToString">
            <summary>
            @ToString()
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpaceCG.WindowsAPI.User32.DEV_BROADCAST_VOLUME">
            <summary>
            包含有关逻辑卷的信息。
            <para>尽管 dbcv_unitmask 成员可以在任何消息中指定多个卷，但这不能保证为指定事件仅生成一个消息。多个系统功能部件可以同时独立地为逻辑卷生成消息。</para>
            <para>仅在支持软弹出机制的设备中为媒体发送用于媒体到达和删除的消息。例如，应用程序将看不到软盘的与介质相关的卷消息。每当发出网络命令时，就不会发送网络驱动器到达和卸下的消息，而是当网络连接由于硬件事件而消失时发送。</para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/dbt/ns-dbt-dev_broadcast_volume </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.DEV_BROADCAST_VOLUME.dbcv_head">
            <summary>
            有关受 <see cref="T:SpaceCG.WindowsAPI.User32.DEV_BROADCAST_HDR"/> 结构指定的 <see cref="F:SpaceCG.WindowsAPI.User32.MessageType.WM_DEVICECHANGE"/> 消息影响的设备的信息。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.DEV_BROADCAST_VOLUME.dbcv_unitmask">
            <summary>
            逻辑单元掩码标识一个或多个逻辑单元。掩码中的每一位对应一个逻辑驱动器。位0代表驱动器A，位1代表驱动器B，依此类推。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.DEV_BROADCAST_VOLUME.dbcv_flags">
            <summary>
            此参数可以是下列值之一。
            <para>DBTF_MEDIA  0x0001 更改会影响驱动器中的介质。如果未设置，则更改会影响物理设备或驱动器。</para>
            <para>DBTF_NET    0x0002  指示的逻辑卷是网络卷。</para>
            </summary>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.DEV_BROADCAST_VOLUME.ToString">
            <summary>
            @ToString()
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpaceCG.WindowsAPI.User32.DEV_BROADCAST_OEM">
            <summary>
            包含有关 OEM 定义的设备类型的信息。
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/dbt/ns-dbt-dev_broadcast_oem </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.DEV_BROADCAST_OEM.dbco_head">
            <summary>
            有关受 <see cref="T:SpaceCG.WindowsAPI.User32.DEV_BROADCAST_HDR"/> 结构指定的 <see cref="F:SpaceCG.WindowsAPI.User32.MessageType.WM_DEVICECHANGE"/> 消息影响的设备的信息。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.DEV_BROADCAST_OEM.dbco_identifier">
            <summary>
            设备的 OEM 特定标识符。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.DEV_BROADCAST_OEM.dbco_suppfunc">
            <summary>
            OEM 特定的功能值。可能的值取决于设备。
            </summary>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.DEV_BROADCAST_OEM.ToString">
            <summary>
            @ToString()
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpaceCG.WindowsAPI.User32.DEV_BROADCAST_DEVICEINTERFACE">
            <summary>
            包含有关一类设备的信息。(DEV_BROADCAST_DEVICEINTERFACE_A, *PDEV_BROADCAST_DEVICEINTERFACE_A)
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/dbt/ns-dbt-dev_broadcast_deviceinterface_a </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.DEV_BROADCAST_DEVICEINTERFACE.dbcc_head">
            <summary>
            有关受 <see cref="T:SpaceCG.WindowsAPI.User32.DEV_BROADCAST_HDR"/> 结构指定的 <see cref="F:SpaceCG.WindowsAPI.User32.MessageType.WM_DEVICECHANGE"/> 消息影响的设备的信息。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.DEV_BROADCAST_DEVICEINTERFACE.dbcc_classguid">
            <summary>
            接口设备类的 GUID。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.DEV_BROADCAST_DEVICEINTERFACE.dbcc_name">
            <summary>
            以空值结尾的字符串，用于指定设备的名称。
            <para>通过 <see cref="F:SpaceCG.WindowsAPI.User32.MessageType.WM_DEVICECHANGE"/> 消息将此结构返回到窗口时，dbcc_name 字符串将适当地转换为 ANSI。服务始终会收到 Unicode 字符串，无论它们调用 <see cref="!:RegisterDeviceNotificationW"/> 还是 <see cref="!:RegisterDeviceNotificationA"/>。</para>
            </summary>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.DEV_BROADCAST_DEVICEINTERFACE.ToString">
            <summary>
            @ToString()
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpaceCG.WindowsAPI.User32.DEV_BROADCAST_HANDLE">
            <summary>
            包含有关文件系统句柄的信息。(DEV_BROADCAST_HANDLE, *PDEV_BROADCAST_HANDLE)
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/dbt/ns-dbt-dev_broadcast_handle </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.DEV_BROADCAST_HANDLE.dbch_head">
            <summary>
            有关受 <see cref="T:SpaceCG.WindowsAPI.User32.DEV_BROADCAST_HDR"/> 结构指定的 <see cref="!:MessageTypeWM_DEVICECHANGE"/> 消息影响的设备的信息。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.DEV_BROADCAST_HANDLE.dbch_handle">
            <summary>
            要检查的设备的句柄。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.DEV_BROADCAST_HANDLE.dbch_hdevnotify">
            <summary>
            设备通知的句柄。该句柄由 <see cref="M:SpaceCG.WindowsAPI.User32.User32.RegisterDeviceNotification(System.IntPtr,System.IntPtr,SpaceCG.WindowsAPI.User32.DeviceNotifyFlag)"/> 返回 。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.DEV_BROADCAST_HANDLE.dbch_eventguid">
            <summary>
            自定义事件的 GUID。有关更多信息，请参见 设备事件。仅对 <see cref="F:SpaceCG.WindowsAPI.User32.DeviceBroadcastType.DBT_CUSTOMEVENT"/> 有效。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.DEV_BROADCAST_HANDLE.dbch_nameoffset">
            <summary>
            可选字符串缓冲区的偏移量。仅对 <see cref="F:SpaceCG.WindowsAPI.User32.DeviceBroadcastType.DBT_CUSTOMEVENT"/> 有效。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.DEV_BROADCAST_HANDLE.dbch_data">
            <summary>
            可选的二进制数据。该成员仅对 <see cref="F:SpaceCG.WindowsAPI.User32.DeviceBroadcastType.DBT_CUSTOMEVENT"/> 有效。
            </summary>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.DEV_BROADCAST_HANDLE.ToString">
            <summary>
            @ToString()
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpaceCG.WindowsAPI.User32.VirtualKeyCode">
            <summary>
            The list of VirtualKeyCodes
            <para>虚拟键代码的符号/常数/名称，十六进制值以及鼠标或键盘等效项</para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/inputdev/virtual-key-codes </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.LBUTTON">
            <summary>
            Left mouse button
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.RBUTTON">
            <summary>
            Right mouse button
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.CANCEL">
            <summary>
            Control-break processing
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.MBUTTON">
            <summary>
            Middle mouse button (three-button mouse) - NOT contiguous with LBUTTON and RBUTTON
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.XBUTTON1">
            <summary>
            Windows 2000/XP: X1 mouse button - NOT contiguous with LBUTTON and RBUTTON
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.XBUTTON2">
            <summary>
            Windows 2000/XP: X2 mouse button - NOT contiguous with LBUTTON and RBUTTON
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.BACK">
            <summary>
            BACKSPACE key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.TAB">
            <summary>
            TAB key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.CLEAR">
            <summary>
            CLEAR key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.RETURN">
            <summary>
            ENTER key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.SHIFT">
            <summary>
            SHIFT key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.CONTROL">
            <summary>
            CTRL key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.MENU">
            <summary>
            ALT key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.PAUSE">
            <summary>
            PAUSE key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.CAPITAL">
            <summary>
            CAPS LOCK key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.KANA">
            <summary>
            Input Method Editor (IME) Kana mode
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.HANGEUL">
            <summary>
            IME Hanguel mode (maintained for compatibility; use HANGUL)
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.HANGUL">
            <summary>
            IME Hangul mode
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.JUNJA">
            <summary>
            IME Junja mode
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.FINAL">
            <summary>
            IME final mode
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.HANJA">
            <summary>
            IME Hanja mode
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.KANJI">
            <summary>
            IME Kanji mode
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.ESCAPE">
            <summary>
            ESC key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.CONVERT">
            <summary>
            IME convert
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.NONCONVERT">
            <summary>
            IME nonconvert
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.ACCEPT">
            <summary>
            IME accept
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.MODECHANGE">
            <summary>
            IME mode change request
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.SPACE">
            <summary>
            SPACEBAR
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.PRIOR">
            <summary>
            PAGE UP key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.NEXT">
            <summary>
            PAGE DOWN key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.END">
            <summary>
            END key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.HOME">
            <summary>
            HOME key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.LEFT">
            <summary>
            LEFT ARROW key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.UP">
            <summary>
            UP ARROW key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.RIGHT">
            <summary>
            RIGHT ARROW key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.DOWN">
            <summary>
            DOWN ARROW key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.SELECT">
            <summary>
            SELECT key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.PRINT">
            <summary>
            PRINT key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.EXECUTE">
            <summary>
            EXECUTE key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.SNAPSHOT">
            <summary>
            PRINT SCREEN key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.INSERT">
            <summary>
            INS key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.DELETE">
            <summary>
            DEL key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.HELP">
            <summary>
            HELP key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.VK_0">
            <summary>
            0 key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.VK_1">
            <summary>
            1 key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.VK_2">
            <summary>
            2 key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.VK_3">
            <summary>
            3 key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.VK_4">
            <summary>
            4 key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.VK_5">
            <summary>
            5 key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.VK_6">
            <summary>
            6 key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.VK_7">
            <summary>
            7 key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.VK_8">
            <summary>
            8 key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.VK_9">
            <summary>
            9 key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.VK_A">
            <summary>
            A key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.VK_B">
            <summary>
            B key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.VK_C">
            <summary>
            C key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.VK_D">
            <summary>
            D key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.VK_E">
            <summary>
            E key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.VK_F">
            <summary>
            F key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.VK_G">
            <summary>
            G key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.VK_H">
            <summary>
            H key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.VK_I">
            <summary>
            I key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.VK_J">
            <summary>
            J key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.VK_K">
            <summary>
            K key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.VK_L">
            <summary>
            L key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.VK_M">
            <summary>
            M key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.VK_N">
            <summary>
            N key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.VK_O">
            <summary>
            O key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.VK_P">
            <summary>
            P key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.VK_Q">
            <summary>
            Q key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.VK_R">
            <summary>
            R key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.VK_S">
            <summary>
            S key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.VK_T">
            <summary>
            T key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.VK_U">
            <summary>
            U key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.VK_V">
            <summary>
            V key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.VK_W">
            <summary>
            W key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.VK_X">
            <summary>
            X key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.VK_Y">
            <summary>
            Y key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.VK_Z">
            <summary>
            Z key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.LWIN">
            <summary>
            Left Windows key (Microsoft Natural keyboard)
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.RWIN">
            <summary>
            Right Windows key (Natural keyboard)
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.APPS">
            <summary>
            Applications key (Natural keyboard)
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.SLEEP">
            <summary>
            Computer Sleep key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.NUMPAD0">
            <summary>
            Numeric keypad 0 key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.NUMPAD1">
            <summary>
            Numeric keypad 1 key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.NUMPAD2">
            <summary>
            Numeric keypad 2 key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.NUMPAD3">
            <summary>
            Numeric keypad 3 key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.NUMPAD4">
            <summary>
            Numeric keypad 4 key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.NUMPAD5">
            <summary>
            Numeric keypad 5 key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.NUMPAD6">
            <summary>
            Numeric keypad 6 key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.NUMPAD7">
            <summary>
            Numeric keypad 7 key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.NUMPAD8">
            <summary>
            Numeric keypad 8 key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.NUMPAD9">
            <summary>
            Numeric keypad 9 key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.MULTIPLY">
            <summary>
            Multiply key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.ADD">
            <summary>
            Add key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.SEPARATOR">
            <summary>
            Separator key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.SUBTRACT">
            <summary>
            Subtract key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.DECIMAL">
            <summary>
            Decimal key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.DIVIDE">
            <summary>
            Divide key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.F1">
            <summary>
            F1 key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.F2">
            <summary>
            F2 key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.F3">
            <summary>
            F3 key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.F4">
            <summary>
            F4 key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.F5">
            <summary>
            F5 key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.F6">
            <summary>
            F6 key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.F7">
            <summary>
            F7 key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.F8">
            <summary>
            F8 key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.F9">
            <summary>
            F9 key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.F10">
            <summary>
            F10 key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.F11">
            <summary>
            F11 key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.F12">
            <summary>
            F12 key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.F13">
            <summary>
            F13 key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.F14">
            <summary>
            F14 key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.F15">
            <summary>
            F15 key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.F16">
            <summary>
            F16 key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.F17">
            <summary>
            F17 key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.F18">
            <summary>
            F18 key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.F19">
            <summary>
            F19 key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.F20">
            <summary>
            F20 key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.F21">
            <summary>
            F21 key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.F22">
            <summary>
            F22 key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.F23">
            <summary>
            F23 key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.F24">
            <summary>
            F24 key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.NAVIGATION_VIEW">
            <summary>
            navigation view
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.NUMLOCK">
            <summary>
            NUM LOCK key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.SCROLL">
            <summary>
            SCROLL LOCK key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.LSHIFT">
            <summary>
            Left SHIFT key - Used only as parameters to GetAsyncKeyState() and GetKeyState()
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.RSHIFT">
            <summary>
            Right SHIFT key - Used only as parameters to GetAsyncKeyState() and GetKeyState()
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.LCONTROL">
            <summary>
            Left CONTROL key - Used only as parameters to GetAsyncKeyState() and GetKeyState()
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.RCONTROL">
            <summary>
            Right CONTROL key - Used only as parameters to GetAsyncKeyState() and GetKeyState()
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.LMENU">
            <summary>
            Left MENU key - Used only as parameters to GetAsyncKeyState() and GetKeyState()
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.RMENU">
            <summary>
            Right MENU key - Used only as parameters to GetAsyncKeyState() and GetKeyState()
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.BROWSER_BACK">
            <summary>
            Windows 2000/XP: Browser Back key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.BROWSER_FORWARD">
            <summary>
            Windows 2000/XP: Browser Forward key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.BROWSER_REFRESH">
            <summary>
            Windows 2000/XP: Browser Refresh key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.BROWSER_STOP">
            <summary>
            Windows 2000/XP: Browser Stop key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.BROWSER_SEARCH">
            <summary>
            Windows 2000/XP: Browser Search key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.BROWSER_FAVORITES">
            <summary>
            Windows 2000/XP: Browser Favorites key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.BROWSER_HOME">
            <summary>
            Windows 2000/XP: Browser Start and Home key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.VOLUME_MUTE">
            <summary>
            Windows 2000/XP: Volume Mute key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.VOLUME_DOWN">
            <summary>
            Windows 2000/XP: Volume Down key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.VOLUME_UP">
            <summary>
            Windows 2000/XP: Volume Up key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.MEDIA_NEXT_TRACK">
            <summary>
            Windows 2000/XP: Next Track key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.MEDIA_PREV_TRACK">
            <summary>
            Windows 2000/XP: Previous Track key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.MEDIA_STOP">
            <summary>
            Windows 2000/XP: Stop Media key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.MEDIA_PLAY_PAUSE">
            <summary>
            Windows 2000/XP: Play/Pause Media key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.LAUNCH_MAIL">
            <summary>
            Windows 2000/XP: Start Mail key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.LAUNCH_MEDIA_SELECT">
            <summary>
            Windows 2000/XP: Select Media key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.LAUNCH_APP1">
            <summary>
            Windows 2000/XP: Start Application 1 key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.LAUNCH_APP2">
            <summary>
            Windows 2000/XP: Start Application 2 key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.OEM_1">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard. Windows 2000/XP: For the US standard keyboard, the ';:' key 
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.OEM_PLUS">
            <summary>
            Windows 2000/XP: For any country/region, the '+' key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.OEM_COMMA">
            <summary>
            Windows 2000/XP: For any country/region, the ',' key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.OEM_MINUS">
            <summary>
            Windows 2000/XP: For any country/region, the '-' key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.OEM_PERIOD">
            <summary>
            Windows 2000/XP: For any country/region, the '.' key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.OEM_2">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard. Windows 2000/XP: For the US standard keyboard, the '/?' key 
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.OEM_3">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard. Windows 2000/XP: For the US standard keyboard, the '`~' key 
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.OEM_4">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard. Windows 2000/XP: For the US standard keyboard, the '[{' key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.OEM_5">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard. Windows 2000/XP: For the US standard keyboard, the '\|' key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.OEM_6">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard. Windows 2000/XP: For the US standard keyboard, the ']}' key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.OEM_7">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard. Windows 2000/XP: For the US standard keyboard, the 'single-quote/double-quote' key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.OEM_8">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard.
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.OEM_102">
            <summary>
            Windows 2000/XP: Either the angle bracket key or the backslash key on the RT 102-key keyboard
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.PROCESSKEY">
            <summary>
            Windows 95/98/Me, Windows NT 4.0, Windows 2000/XP: IME PROCESS key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.PACKET">
            <summary>
            Windows 2000/XP: Used to pass Unicode characters as if they were keystrokes. The PACKET key is the low word of a 32-bit Virtual Key value used for non-keyboard input methods. For more information, see Remark in KEYBDINPUT, SendInput, WM_KEYDOWN, and WM_KEYUP
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.ATTN">
            <summary>
            Attn key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.CRSEL">
            <summary>
            CrSel key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.EXSEL">
            <summary>
            ExSel key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.EREOF">
            <summary>
            Erase EOF key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.PLAY">
            <summary>
            Play key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.ZOOM">
            <summary>
            Zoom key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.NONAME">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.PA1">
            <summary>
            PA1 key
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.VirtualKeyCode.OEM_CLEAR">
            <summary>
            Clear key
            </summary>
        </member>
        <member name="T:SpaceCG.WindowsAPI.User32.SwpInsertAfter">
            <summary>
            <see cref="M:SpaceCG.WindowsAPI.User32.User32.SetWindowPos(System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,SpaceCG.WindowsAPI.User32.SwpFlags)"/> 函数参数 hWndInsertAfter 的值之一
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.SwpInsertAfter.HWND_NOTOPMOST">
            <summary>
            将窗口放置在所有非最上面的窗口上方（即，所有最上面的窗口的后面）。如果窗口已经是非最上面的窗口，则此标志无效。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.SwpInsertAfter.HWND_TOPMOST">
            <summary>
            将窗口置于所有非最上面的窗口上方；即使禁用窗口，窗口也将保持其最高位置。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.SwpInsertAfter.HWND_TOP">
            <summary>
            将窗口置于Z顺序的顶部。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.SwpInsertAfter.HWND_BOTTOM">
            <summary>
            将窗口置于Z顺序的底部。
            <para>如果hWnd参数标识了最顶部的窗口，则该窗口将失去其最顶部的状态，并放置在所有其他窗口的底部。</para>
            </summary>
        </member>
        <member name="T:SpaceCG.WindowsAPI.User32.SwpFlags">
            <summary>
            <see cref="M:SpaceCG.WindowsAPI.User32.User32.SetWindowPos(System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,SpaceCG.WindowsAPI.User32.SwpFlags)"/> 函数参数 wFlags 的值之一或组合值
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setwindowpos </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.SwpFlags.NOSIZE">
            <summary>
            保留当前大小（忽略 cx 和 cy 参数）
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.SwpFlags.NOMOVE">
            <summary>
            保留当前位置（忽略 X 和 Y 参数）。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.SwpFlags.NOZORDER">
            <summary>
            保留当前的Z顺序（忽略 hWndInsertAfter 参数）
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.SwpFlags.NOREDRAW">
            <summary>
            不重绘更改。
            <para>如果设置了此标志，则不会发生任何重绘。这适用于工作区，非工作区（包括标题栏和滚动条）以及由于移动窗口而导致未显示的父窗口的任何部分。</para>
            <para>设置此标志后，应用程序必须显式使窗口和父窗口中需要重绘的任何部分无效或重绘。</para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.SwpFlags.NOACTIVATE">
            <summary>
            不激活窗口。
            <para>如果未设置此标志，则激活窗口并将其移至最顶层或非顶层组的顶部（取决于 hWndInsertAfter 参数的设置）。</para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.SwpFlags.DRAWFRAME">
            <summary>
            在窗口周围绘制框架（在窗口的类描述中定义）
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.SwpFlags.FRAMECHANGED">
            <summary>
            应用使用 SetWindowLong 函数设置的新框架样式；将 WM_NCCALCSIZE 消息发送到窗口，即使未更改窗口的大小。
            <para>如果未指定此标志，则仅在更改窗口大小时才发送 WM_NCCALCSIZE </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.SwpFlags.SHOWWINDOW">
            <summary>
            显示窗口
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.SwpFlags.HIDEWINDOW">
            <summary>
            隐藏窗口
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.SwpFlags.NOCOPYBITS">
            <summary>
            丢弃客户区的全部内容。
            <para>如果未指定此标志，则在调整窗口大小或位置后，将保存客户区的有效内容并将其复制回客户区。</para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.SwpFlags.NOOWNERZORDER">
            <summary>
            不更改所有者窗口在 Z 顺序中的位置。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.SwpFlags.NOREPOSITION">
            <summary>
            与 SWP_NOOWNERZORDER 标志相同。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.SwpFlags.NOSENDCHANGING">
            <summary>
            阻止窗口接收 WM_WINDOWPOSCHANGING 消息
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.SwpFlags.DEFERERASE">
            <summary>
            防止生成 WM_SYNCPAINT 消息
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.SwpFlags.ASYNCWINDOWPOS">
            <summary>
            如果调用线程和拥有窗口的线程连接到不同的输入队列，则系统会将请求发布到拥有窗口的线程
            <para>这样可以防止在其他线程处理请求时调用线程阻塞其执行</para>
            </summary>
        </member>
        <member name="T:SpaceCG.WindowsAPI.User32.GwCmd">
            <summary>
            <see cref="M:SpaceCG.WindowsAPI.User32.User32.GetWindow(System.IntPtr,SpaceCG.WindowsAPI.User32.GwCmd)"/> 函数参考 uCmd 的值之一
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-getwindow </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.GwCmd.GW_HWNDFIRST">
            <summary>
            检索到的句柄标识 Z 顺序中最高的同一类型的窗口。
            <para>如果指定的窗口是最上面的窗口，则该句柄标识最上面的窗口。如果指定的窗口是顶级窗口，则该句柄标识顶级窗口。如果指定的窗口是子窗口，则该句柄标识同级窗口。</para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.GwCmd.GW_HWNDLAST">
            <summary>
            检索到的句柄标识 Z 顺序中最低的同一类型的窗口。
            <para>如果指定的窗口是最上面的窗口，则该句柄标识最上面的窗口。如果指定的窗口是顶级窗口，则该句柄标识顶级窗口。如果指定的窗口是子窗口，则该句柄标识同级窗口。</para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.GwCmd.GW_HWNDNEXT">
            <summary>
            检索到的句柄以 Z 顺序标识指定窗口下方的窗口。
            <para>如果指定的窗口是最上面的窗口，则该句柄标识最上面的窗口。如果指定的窗口是顶级窗口，则该句柄标识顶级窗口。如果指定的窗口是子窗口，则该句柄标识同级窗口。</para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.GwCmd.GW_HWNDPREV">
            <summary>
            检索到的句柄以 Z 顺序标识指定窗口上方的窗口。
            <para>如果指定的窗口是最上面的窗口，则该句柄标识最上面的窗口。如果指定的窗口是顶级窗口，则该句柄标识顶级窗口。如果指定的窗口是子窗口，则该句柄标识同级窗口。</para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.GwCmd.GW_OWNER">
            <summary>
            检索到的句柄标识指定窗口的所有者窗口（如果有）。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.GwCmd.GW_CHILD">
            <summary>
            如果指定的窗口是父窗口，则检索到的句柄在Z顺序的顶部标识子窗口。否则，检索到的句柄为 NULL。该功能仅检查指定窗口的子窗口。它不检查后代窗口。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.GwCmd.GW_ENABLEDPOPUP">
            <summary>
            检索到的句柄标识指定窗口拥有的启用的弹出窗口（搜索使用通过 <see cref="F:SpaceCG.WindowsAPI.User32.GwCmd.GW_HWNDNEXT"/> 找到的第一个此类窗口）；否则，如果没有启用的弹出窗口，则检索到的句柄是指定窗口的句柄。
            </summary>
        </member>
        <member name="T:SpaceCG.WindowsAPI.User32.WindowStyle">
            <summary>
            系统窗体样式(System Window Style)
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/winmsg/window-styles </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.WindowStyle.WS_OVERLAPPED">
            <summary>
            该窗口是一个重叠的窗口。重叠的窗口具有标题栏和边框。与 <see cref="F:SpaceCG.WindowsAPI.User32.WindowStyle.WS_TILED"/> 样式相同。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.WindowStyle.WS_POPUP">
            <summary>
            窗口是一个弹出窗口。此样式不能与 <see cref="F:SpaceCG.WindowsAPI.User32.WindowStyle.WS_CHILD"/> 样式一起使用。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.WindowStyle.WS_CHILD">
            <summary>
            该窗口是子窗口。具有这种样式的窗口不能具有菜单栏。此样式不能与 <see cref="F:SpaceCG.WindowsAPI.User32.WindowStyle.WS_POPUP"/> 样式一起使用。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.WindowStyle.WS_MINIMIZE">
            <summary>
            最初将窗口最小化。与 <see cref="F:SpaceCG.WindowsAPI.User32.WindowStyle.WS_ICONIC"/> 样式相同。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.WindowStyle.WS_VISIBLE">
            <summary>
            该窗口最初是可见的。可以使用 <see cref="M:SpaceCG.WindowsAPI.User32.User32.ShowWindow(System.IntPtr,SpaceCG.WindowsAPI.User32.SwCmd)"/> 或 <see cref="M:SpaceCG.WindowsAPI.User32.User32.SetWindowPos(System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,SpaceCG.WindowsAPI.User32.SwpFlags)"/> 函数打开和关闭此样式。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.WindowStyle.WS_DISABLED">
            <summary>
            该窗口最初被禁用。禁用的窗口无法接收来自用户的输入。要在创建窗口后更改此设置，请使用 <see cref="M:SpaceCG.WindowsAPI.User32.User32.EnableWindow(System.IntPtr,System.Boolean)"/> 函数。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.WindowStyle.WS_CLIPSIBLINGS">
            <summary>
            相对于彼此剪辑子窗口；也就是说当特定的子窗口接收到 <see cref="F:SpaceCG.WindowsAPI.User32.MessageType.WM_PAINT"/> 消息时，<see cref="F:SpaceCG.WindowsAPI.User32.WindowStyle.WS_CLIPSIBLINGS"/> 样式会将所有其他重叠的子窗口剪切到要更新的子窗口区域之外。如果未指定 <see cref="F:SpaceCG.WindowsAPI.User32.WindowStyle.WS_CLIPSIBLINGS"/> 并且子窗口重叠，则在子窗口的客户区域内进行绘制时，可以在相邻子窗口的客户区域内进行绘制。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.WindowStyle.WS_CLIPCHILDREN">
            <summary>
            在父窗口内进行绘制时，不包括子窗口所占的区域。创建父窗口时使用此样式。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.WindowStyle.WS_MAXIMIZE">
            <summary>
            该窗口最初被最大化。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.WindowStyle.WS_CAPTION">
            <summary>
            窗口具有标题栏（包括 <see cref="F:SpaceCG.WindowsAPI.User32.WindowStyle.WS_BORDER"/> 样式）。<see cref="F:SpaceCG.WindowsAPI.User32.WindowStyle.WS_BORDER"/> | <see cref="F:SpaceCG.WindowsAPI.User32.WindowStyle.WS_DLGFRAME"/>  
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.WindowStyle.WS_BORDER">
            <summary>
            窗口具有细线边框。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.WindowStyle.WS_DLGFRAME">
            <summary>
            窗口具有通常用于对话框的样式的边框。具有这种样式的窗口不能具有标题栏。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.WindowStyle.WS_VSCROLL">
            <summary>
            该窗口具有垂直滚动条。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.WindowStyle.WS_HSCROLL">
            <summary>
            该窗口具有水平滚动条。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.WindowStyle.WS_SYSMENU">
            <summary>
            该窗口的标题栏上有一个窗口菜单。该 <see cref="F:SpaceCG.WindowsAPI.User32.WindowStyle.WS_CAPTION"/> 风格也必须指定。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.WindowStyle.WS_THICKFRAME">
            <summary>
            窗口具有大小调整边框。与 <see cref="F:SpaceCG.WindowsAPI.User32.WindowStyle.WS_SIZEBOX"/> 样式相同。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.WindowStyle.WS_GROUP">
            <summary>
            该窗口是一组控件中的第一个控件。该组由该第一个控件和在其后定义的所有控件组成，直到下一个具有 <see cref="F:SpaceCG.WindowsAPI.User32.WindowStyle.WS_GROUP"/> 样式的下一个控件。每个组中的第一个控件通常具有 <see cref="F:SpaceCG.WindowsAPI.User32.WindowStyle.WS_TABSTOP"/> 样式，以便用户可以在组之间移动。用户随后可以使用方向键将键盘焦点从组中的一个控件更改为组中的下一个控件。
            <para>您可以打开和关闭此样式以更改对话框导航。若要在创建窗口后更改此样式，请使用 <see cref="!:User32.SetWindowLong"/> 函数。</para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.WindowStyle.WS_TABSTOP">
            <summary>
            该窗口是一个控件，当用户按下 TAB 键时可以接收键盘焦点。按下 TAB 键可将键盘焦点更改为 <see cref="F:SpaceCG.WindowsAPI.User32.WindowStyle.WS_TABSTOP"/> 样式的下一个控件。
            <para>您可以打开和关闭此样式以更改对话框导航。若要在创建窗口后更改此样式，请使用 <see cref="!:User32.SetWindowLong"/> 函数。为了使用户创建的窗口和无模式对话框可与制表符一起使用，请更改消息循环以调用 <see cref="!:User32.IsDialogMessage"/> 函数。</para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.WindowStyle.WS_MINIMIZEBOX">
            <summary>
            该窗口有一个最小化按钮。不能与 <see cref="F:SpaceCG.WindowsAPI.User32.WindowStyleEx.WS_EX_CONTEXTHELP"/> 样式结合使用。该 <see cref="F:SpaceCG.WindowsAPI.User32.WindowStyle.WS_SYSMENU"/> 风格也必须指定。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.WindowStyle.WS_MAXIMIZEBOX">
            <summary>
            该窗口具有最大化按钮。不能与 <see cref="F:SpaceCG.WindowsAPI.User32.WindowStyleEx.WS_EX_CONTEXTHELP"/> 样式结合使用。该 <see cref="F:SpaceCG.WindowsAPI.User32.WindowStyle.WS_SYSMENU"/> 风格也必须指定。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.WindowStyle.WS_TILED">
            <summary>
            该窗口是一个重叠的窗口。重叠的窗口具有标题栏和边框。与 <see cref="F:SpaceCG.WindowsAPI.User32.WindowStyle.WS_OVERLAPPED"/> 样式相同。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.WindowStyle.WS_ICONIC">
            <summary>
            最初将窗口最小化。与 <see cref="F:SpaceCG.WindowsAPI.User32.WindowStyle.WS_MINIMIZE"/> 样式相同。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.WindowStyle.WS_SIZEBOX">
            <summary>
            窗口具有大小调整边框。与 <see cref="F:SpaceCG.WindowsAPI.User32.WindowStyle.WS_THICKFRAME"/> 样式相同。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.WindowStyle.WS_TILEDWINDOW">
            <summary>
            该窗口是一个重叠的窗口。与 <see cref="F:SpaceCG.WindowsAPI.User32.WindowStyle.WS_OVERLAPPEDWINDOW"/> 样式相同。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.WindowStyle.WS_OVERLAPPEDWINDOW">
            <summary>
            该窗口是一个重叠的窗口。与 <see cref="F:SpaceCG.WindowsAPI.User32.WindowStyle.WS_TILEDWINDOW"/> 样式相同。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.WindowStyle.WS_POPUPWINDOW">
            <summary>
            该窗口是一个弹出窗口。该 <see cref="F:SpaceCG.WindowsAPI.User32.WindowStyle.WS_CAPTION"/> 和 <see cref="F:SpaceCG.WindowsAPI.User32.WindowStyle.WS_POPUPWINDOW"/> 风格一定要结合使窗口菜单可见。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.WindowStyle.WS_CHILDWINDOW">
            <summary>
            与 <see cref="F:SpaceCG.WindowsAPI.User32.WindowStyle.WS_CHILD"/> 样式相同。
            </summary>
        </member>
        <member name="T:SpaceCG.WindowsAPI.User32.WindowStyleEx">
            <summary>
            扩展窗体样式(Extended Window Styles)
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/winmsg/extended-window-styles </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.WindowStyleEx.WS_EX_DLGMODALFRAME">
            <summary>
            窗口有一个双边框。该窗口可以任选地用一个标题栏，通过指定所创建的 <see cref="F:SpaceCG.WindowsAPI.User32.WindowStyle.WS_CAPTION"/> 在样式 dwStyle 参数。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.WindowStyleEx.WS_EX_NOPARENTNOTIFY">
            <summary>
            使用此样式创建的子窗口在创建或销毁时不会将 <see cref="F:SpaceCG.WindowsAPI.User32.MessageType.WM_PARENTNOTIFY"/> 消息发送到其父窗口。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.WindowStyleEx.WS_EX_TOPMOST">
            <summary>
            该窗口应放置在所有非最上面的窗口上方，并且即使在停用该窗口的情况下也应保持在它们之上。若要添加或删除此样式，请使用 <see cref="M:SpaceCG.WindowsAPI.User32.User32.SetWindowPos(System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,SpaceCG.WindowsAPI.User32.SwpFlags)"/> 函数。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.WindowStyleEx.WS_EX_ACCEPTFILES">
            <summary>
            该窗口接受拖放文件。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.WindowStyleEx.WS_EX_TRANSPARENT">
            <summary>
            在绘制窗口下方的兄弟姐妹（由同一线程创建）之前，不应绘制窗口。该窗口显示为透明，因为基础同级窗口的位已被绘制。
            <para>要获得透明性而没有这些限制，请使用 <see cref="M:SpaceCG.WindowsAPI.User32.User32.SetWindowRgn(System.IntPtr,System.IntPtr,System.Boolean)"/> 函数。</para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.WindowStyleEx.WS_EX_MDICHILD">
            <summary>
            该窗口是 MDI 子窗口。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.WindowStyleEx.WS_EX_TOOLWINDOW">
            <summary>
            该窗口旨在用作浮动工具栏。工具窗口的标题栏比普通标题栏短，并且窗口标题使用较小的字体绘制。
            <para>当用户按下 ALT+TAB 时，工具窗口不会出现在任务栏或对话框中。如果工具窗口具有系统菜单，则其图标不会显示在标题栏上。但是您可以通过右键单击或键入 ALT+SPACE 来显示系统菜单。</para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.WindowStyleEx.WS_EX_WINDOWEDGE">
            <summary>
            窗口的边框带有凸起的边缘。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.WindowStyleEx.WS_EX_CLIENTEDGE">
            <summary>
            窗口的边框带有凹陷的边缘。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.WindowStyleEx.WS_EX_CONTEXTHELP">
            <summary>
            窗口的标题栏包含一个问号。当用户单击问号时，光标将变为带有指针的问号。如果用户然后单击子窗口，则该子窗口会收到 <see cref="F:SpaceCG.WindowsAPI.User32.MessageType.WM_HELP"/> 消息。
            <para>子窗口应将消息传递给父窗口过程，该过程应使用 HELP_WM_HELP 命令调用 WinHelp 函数。帮助应用程序显示一个弹出窗口，通常包含子窗口的帮助。<see cref="F:SpaceCG.WindowsAPI.User32.WindowStyleEx.WS_EX_CONTEXTHELP"/> 不能与 <see cref="F:SpaceCG.WindowsAPI.User32.WindowStyle.WS_MAXIMIZEBOX"/> 或 <see cref="F:SpaceCG.WindowsAPI.User32.WindowStyle.WS_MINIMIZEBOX"/> 样式一起使用。</para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.WindowStyleEx.WS_EX_RIGHT">
            <summary>
            该窗口具有通用的“右对齐”属性。这取决于窗口类。仅当外壳语言是希伯来语，阿拉伯语或其他支持阅读顺序对齐的语言时，此样式才有效。否则，样式将被忽略。
            <para>将 <see cref="F:SpaceCG.WindowsAPI.User32.WindowStyleEx.WS_EX_RIGHT"/> 样式用于静态或编辑控件分别具有与使用 SS_RIGHT 或 ES_RIGHT 样式相同的效果。通过按钮控件使用此样式与使用 BS_RIGHT 和 BS_RIGHTBUTTON 样式具有相同的效果。</para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.WindowStyleEx.WS_EX_LEFT">
            <summary>
            该窗口具有通用的左对齐属性。这是默认值。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.WindowStyleEx.WS_EX_RTLREADING">
            <summary>
            如果外壳语言是希伯来语，阿拉伯语或其他支持阅读顺序对齐的语言，则使用从右到左的阅读顺序属性显示窗口文本。对于其他语言，样式将被忽略。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.WindowStyleEx.WS_EX_LTRREADING">
            <summary>
            使用从左到右的阅读顺序属性显示窗口文本。这是默认值。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.WindowStyleEx.WS_EX_LEFTSCROLLBAR">
            <summary>
            如果外壳语言是希伯来语，阿拉伯语或其他支持阅读顺序对齐的语言，则垂直滚动条（如果有）位于客户区域的左侧。对于其他语言，样式将被忽略。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.WindowStyleEx.WS_EX_RIGHTSCROLLBAR">
            <summary>
            垂直滚动条（如果有）在客户区的右侧。这是默认值。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.WindowStyleEx.WS_EX_CONTROLPARENT">
            <summary>
            窗口本身包含子窗口，应参与对话框导航。如果指定了此样式，则对话框管理器在执行导航操作（例如处理 TAB 键，箭头键或键盘助记符）时会循环到此窗口的子级中。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.WindowStyleEx.WS_EX_STATICEDGE">
            <summary>
            该窗口具有三维边框样式，旨在用于不接受用户输入的项目。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.WindowStyleEx.WS_EX_APPWINDOW">
            <summary>
            可见时将顶级窗口强制到任务栏上。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.WindowStyleEx.WS_EX_OVERLAPPEDWINDOW">
            <summary>
            该窗口是一个重叠的窗口。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.WindowStyleEx.WS_EX_PALETTEWINDOW">
            <summary>
            该窗口是调色板窗口，这是一个无模式对话框，显示了一系列命令。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.WindowStyleEx.WS_EX_LAYERED">
            <summary>
            窗户是一个分层的窗户。如果窗口中有一个不能用这种风格类样式之一 CS_OWNDC 或 CS_CLASSDC。
            <para>Windows 8： <see cref="F:SpaceCG.WindowsAPI.User32.WindowStyleEx.WS_EX_LAYERED"/> 样式支持顶级窗口和子窗口。以前的 Windows 版本仅对顶级窗口支持 <see cref="F:SpaceCG.WindowsAPI.User32.WindowStyleEx.WS_EX_LAYERED"/>。</para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.WindowStyleEx.WS_EX_NOINHERITLAYOUT">
            <summary>
            该窗口不会将其窗口布局传递给其子窗口。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.WindowStyleEx.WS_EX_NOREDIRECTIONBITMAP">
            <summary>
            窗口不渲染到重定向表面。这适用于不具有可见内容或使用除表面以外的机制来提供其视觉效果的窗口。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.WindowStyleEx.WS_EX_LAYOUTRTL">
            <summary>
            如果外壳语言是希伯来语，阿拉伯语或其他支持阅读顺序对齐的语言，则窗口的水平原点在右边缘。水平值增加到左侧。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.WindowStyleEx.WS_EX_COMPOSITED">
            <summary>
            使用双缓冲以从下到上的绘制顺序绘制窗口的所有后代。从下到上的绘画顺序允许后代窗口具有半透明（alpha）和透明（color-key）效果，但前提是后代窗口也设置了 <see cref="F:SpaceCG.WindowsAPI.User32.WindowStyleEx.WS_EX_TRANSPARENT"/> 位。双缓冲允许绘制窗口及其后代，而不会闪烁。如果窗口有此不能使用类样式之一 CS_OWNDC 或 CS_CLASSDC。Windows 2000：不支持此样式。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.WindowStyleEx.WS_EX_NOACTIVATE">
            <summary>
            当用户单击它时，以这种样式创建的顶级窗口不会成为前台窗口。当用户最小化或关闭前景窗口时，系统不会将此窗口置于前景。不应通过程序访问或使用讲述人等可访问技术通过键盘导航来激活该窗口。
            <para>要激活该窗口，请使用 <see cref="M:SpaceCG.WindowsAPI.User32.User32.SetActiveWindow(System.IntPtr)"/> 或 <see cref="M:SpaceCG.WindowsAPI.User32.User32.SetForegroundWindow(System.IntPtr)"/> 函数。默认情况下，该窗口不显示在任务栏上。要强制窗口显示在任务栏上，请使用 <see cref="F:SpaceCG.WindowsAPI.User32.WindowStyleEx.WS_EX_APPWINDOW"/> 样式。</para>
            </summary>
        </member>
        <member name="T:SpaceCG.WindowsAPI.User32.SwCmd">
            <summary>
            <see cref="M:SpaceCG.WindowsAPI.User32.User32.ShowWindow(System.IntPtr,SpaceCG.WindowsAPI.User32.SwCmd)"/> 函数参考 nCmdShow 的值之一
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.SwCmd.HIDE">
            <summary>
            隐藏该窗口并激活另一个窗口。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.SwCmd.SHOWNORMAL">
            <summary>
            激活并显示一个窗口。如果窗口最小化或最大化，则系统会将其还原到其原始大小和位置。首次显示窗口时，应用程序应指定此标志。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.SwCmd.SHOWMINIMIZED">
            <summary>
            激活窗口并将其显示为最小化窗口。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.SwCmd.SHOWMAXIMIZED">
            <summary>
            激活窗口并将其显示为最大化窗口。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.SwCmd.MAXIMIZE">
            <summary>
            最大化指定的窗口。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.SwCmd.SHOWNOACTIVATE">
            <summary>
            以最新大小和位置显示窗口。该值类似于SW_SHOWNORMAL，除了未激活窗口。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.SwCmd.SHOW">
            <summary>
            激活窗口并以其当前大小和位置显示它。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.SwCmd.MINIMIZE">
            <summary>
            最小化指定的窗口并以Z顺序激活下一个顶级窗口。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.SwCmd.SHOWMINNOACTIVE">
            <summary>
            将窗口显示为最小化窗口。该值类似于 SW_SHOWMINIMIZED，除了未激活窗口。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.SwCmd.SHOWNA">
            <summary>
            以当前大小和位置显示窗口。该值与SW_SHOW相似，除了不激活窗口。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.SwCmd.RESTORE">
            <summary>
            激活并显示窗口。如果窗口最小化或最大化，则系统会将其还原到其原始大小和位置。恢复最小化窗口时，应用程序应指定此标志。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.SwCmd.SHOWDEFAULT">
            <summary>
            根据启动应用程序的程序传递给 <see cref="!:User32.CreateProcess"/> 函数的 <see cref="!:STARTUPINFO"/> 结构中指定的SW_值设置显示状态。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.SwCmd.FORCEMINIMIZE">
            <summary>
            最小化一个窗口，即使拥有该窗口的线程没有响应。仅当最小化来自其他线程的窗口时，才应使用此标志。
            </summary>
        </member>
        <member name="T:SpaceCG.WindowsAPI.User32.GwrResult">
            <summary>
            <see cref="!:GetWindowRgn"/> 函数返回值之一 （排列值存在问题）
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-getwindowrgn </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.GwrResult.NULLREGION">
            <summary>
            空区域，该区域为空。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.GwrResult.SIMPLEREGION">
            <summary>
            简单区域，该区域是单个矩形。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.GwrResult.COMPLEXREGION">
            <summary>
            复杂区域，该区域不止一个矩形。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.GwrResult.ERROR">
            <summary>
            错误，指定的窗口没有区域，或者尝试返回该区域时发生错误。
            </summary>
        </member>
        <member name="T:SpaceCG.WindowsAPI.User32.WINDOWINFO">
            <summary>
            包含窗口信息。(WINDOWINFO, * PWINDOWINFO, * LPWINDOWINFO)
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/ns-winuser-windowinfo </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.WINDOWINFO.cbSize">
            <summary>
            结构的大小，以字节为单位。呼叫者必须将此成员设置为 sizeof(<see cref="T:SpaceCG.WindowsAPI.User32.WINDOWINFO"/>)。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.WINDOWINFO.rcWindow">
            <summary>
            窗口的坐标。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.WINDOWINFO.rcClient">
            <summary>
            客户区域的坐标。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.WINDOWINFO.dwStyle">
            <summary>
            窗口样式。有关窗口样式的表，请参见 <see cref="T:SpaceCG.WindowsAPI.User32.WindowStyle"/>。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.WINDOWINFO.dwExStyle">
            <summary>
            扩展的窗口样式。有关扩展窗口样式的表，请参见 。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.WINDOWINFO.dwWindowStatus">
            <summary>
            窗口状态。如果此成员是 WS_ACTIVECAPTION（0x0001），则该窗口处于活动状态。否则，该成员为零。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.WINDOWINFO.cxWindowBorders">
            <summary>
            窗口边框的宽度，以像素为单位。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.WINDOWINFO.cyWindowBorders">
            <summary>
            窗口边框的高度，以像素为单位。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.WINDOWINFO.atomWindowType">
            <summary>
            窗口类原子（请参见 RegisterClass）。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.WINDOWINFO.wCreatorVersion">
            <summary>
            创建窗口的应用程序的 Windows 版本。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.WINDOWINFO.Size">
            <summary>
            <see cref="T:SpaceCG.WindowsAPI.User32.WINDOWINFO"/> 结构体字节大小
            </summary>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.WINDOWINFO.Create">
            <summary>
            创建一个已经设置 cbSize 大小的 <see cref="T:SpaceCG.WindowsAPI.User32.WINDOWINFO"/> 对象。
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.User32.WINDOWINFO.ToString">
            <summary>
            @ToString()
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpaceCG.WindowsAPI.User32.WINDOWPOS">
            <summary>
            包含有关窗口的大小和位置的信息。(WINDOWPOS, * LPWINDOWPOS, * PWINDOWPOS)
            <para><see cref="!:BeginDeferWindowPos"/>, <see cref="!:DeferWindowPos"/>, <see cref="!:EndDeferWindowPos"/></para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/ns-winuser-windowpos?redirectedfrom=MSDN </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.WINDOWPOS.hwndInsertAfter">
            <summary>
            窗口在Z顺序中的位置（前后位置）。该成员可以是放置该窗口的窗口的句柄，也可以是 <see cref="!:User32.SetWindowPos(IntPtr, int, int, int, int, int, SwpFlags)"/> 函数列出的特殊值之一。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.WINDOWPOS.hwnd">
            <summary>
            窗口的句柄。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.WINDOWPOS.x">
            <summary>
            窗口左边缘的位置。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.WINDOWPOS.y">
            <summary>
            窗口顶部边缘的位置。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.WINDOWPOS.cx">
            <summary>
            窗口宽度，以像素为单位。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.WINDOWPOS.cy">
            <summary>
            窗口高度，以像素为单位。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.WINDOWPOS.flags">
            <summary>
            窗口位置。该成员可以是 <see cref="T:SpaceCG.WindowsAPI.User32.SwpFlags"/> 一个或多个值。
            </summary>
        </member>
        <member name="T:SpaceCG.WindowsAPI.User32.EnumWindowsProc">
            <summary>
            与 <see cref="M:SpaceCG.WindowsAPI.User32.User32.EnumWindows(SpaceCG.WindowsAPI.User32.EnumWindowsProc,System.IntPtr)"/> 或 <see cref="M:SpaceCG.WindowsAPI.User32.User32.EnumDesktopWindows(System.IntPtr,SpaceCG.WindowsAPI.User32.EnumWindowsProc,System.IntPtr)"/> 函数一起使用的应用程序定义的回调函数。它接收顶级窗口句柄。lpEnumFunc 类型定义一个指向这个回调函数。<see cref="!:User32.EnumWindowsProc"/> 是应用程序定义的函数名称的占位符。
            <para>参考：https://docs.microsoft.com/zh-cn/previous-versions/windows/desktop/legacy/ms633498(v=vs.85) </para>
            </summary>
            <param name="hwnd">顶级窗口的句柄。</param>
            <param name="lParam">在 <see cref="M:SpaceCG.WindowsAPI.User32.User32.EnumWindows(SpaceCG.WindowsAPI.User32.EnumWindowsProc,System.IntPtr)"/> 或 <see cref="M:SpaceCG.WindowsAPI.User32.User32.EnumDesktopWindows(System.IntPtr,SpaceCG.WindowsAPI.User32.EnumWindowsProc,System.IntPtr)"/> 中给出的应用程序定义的值。</param>
            <returns>要继续枚举，回调函数必须返回 TRUE；要停止枚举，它必须返回 FALSE。</returns>
        </member>
        <member name="T:SpaceCG.WindowsAPI.User32.EnumChildProc">
            <summary>
            与 <see cref="M:SpaceCG.WindowsAPI.User32.User32.EnumChildWindows(System.IntPtr,SpaceCG.WindowsAPI.User32.EnumChildProc,System.IntPtr)"/> 函数一起使用的应用程序定义的回调函数。它接收子窗口句柄。lpEnumFunc 类型定义一个指向这个回调函数。<see cref="T:SpaceCG.WindowsAPI.User32.EnumChildProc"/> 是应用程序定义的函数名称的占位符。
            <para>参考：https://docs.microsoft.com/zh-cn/previous-versions/windows/desktop/legacy/ms633493(v=vs.85) </para>
            </summary>
            <param name="hwnd">在 <see cref="M:SpaceCG.WindowsAPI.User32.User32.EnumChildWindows(System.IntPtr,SpaceCG.WindowsAPI.User32.EnumChildProc,System.IntPtr)"/> 中指定的父窗口的子窗口的句柄。</param>
            <param name="lParam"> 在 <see cref="M:SpaceCG.WindowsAPI.User32.User32.EnumChildWindows(System.IntPtr,SpaceCG.WindowsAPI.User32.EnumChildProc,System.IntPtr)"/> 中给定的应用程序定义的值。</param>
            <returns>要继续枚举，回调函数必须返回 TRUE；要停止枚举，它必须返回 FALSE。</returns>
        </member>
        <member name="T:SpaceCG.WindowsAPI.User32.MessageType">
            <summary>
            Windows Message Type (Window消息类型)
            <para><see cref="T:SpaceCG.WindowsAPI.User32.MSG"/> 结构体字段 <see cref="F:SpaceCG.WindowsAPI.User32.MSG.message"/> 的值之一或值组合</para>
            <para>注意：可能有部份值未添加到 <see cref="T:SpaceCG.WindowsAPI.User32.MessageType"/> 枚举(未找到，或是未证实) </para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/winmsg/about-messages-and-message-queues?redirectedfrom=MSDN </para>
            <para>消息类型：https://docs.microsoft.com/zh-cn/windows/win32/winmsg/about-messages-and-message-queues?redirectedfrom=MSDN#message-types </para>
            <para>窗口类消息：https://docs.microsoft.com/en-us/windows/win32/winmsg/window-notifications </para>
            <para>原生类消息：https://docs.microsoft.com/en-us/windows/win32/inputdev/raw-input-notifications </para>
            <para>键盘类消息：https://docs.microsoft.com/en-us/windows/win32/inputdev/keyboard-input-notifications </para>
            <para>鼠标类消息：https://docs.microsoft.com/en-us/windows/win32/inputdev/mouse-input-notifications </para>
            <para>钩子类消息：https://docs.microsoft.com/en-us/windows/win32/winmsg/hook-notifications </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_NULL">
            <summary>
            null
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_CREATE">
            <summary>
            创建一个窗口
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_DESTROY">
            <summary>
            当一个窗口被破坏时发送
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_MOVE">
            <summary>
            在移动窗口后发送。
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/winmsg/wm-move </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_SIZE">
             <summary>
            改变一个窗口的大小
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_ACTIVATE">
            <summary>
            一个窗口被激活或失去激活状态
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_SETFOCUS">
            <summary>
            一个窗口获得焦点
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_KILLFOCUS">
            <summary>
            一个窗口失去焦点
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_ENABLE">
             <summary>
            一个窗口改变成Enable状态
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_SETREDRAW">
             <summary>
            设置窗口是否能重画
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_SETTEXT">
             <summary>
            应用程序发送此消息来设置一个窗口的文本
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_GETTEXT">
             <summary>
            应用程序发送此消息来复制对应窗口的文本到缓冲区
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_GETTEXTLENGTH">
             <summary>
            得到与一个窗口有关的文本的长度（不包含空字符）
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_PAINT">
             <summary>
            要求一个窗口重画自己
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_CLOSE">
             <summary>
            当一个窗口或应用程序要关闭时发送一个信号
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_QUERYENDSESSION">
             <summary>
            当用户选择结束对话框或程序自己调用ExitWindows函数
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_QUIT">
             <summary>
            用来结束程序运行
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_QUERYOPEN">
             <summary>
            当用户窗口恢复以前的大小位置时，把此消息发送给某个图标
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_ERASEBKGND">
             <summary>
            当窗口背景必须被擦除时（例在窗口改变大小时）
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_SYSCOLORCHANGE">
             <summary>
            当系统颜色改变时，发送此消息给所有顶级窗口
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_ENDSESSION">
             <summary>
            当系统进程发出WM_QUERYENDSESSION消息后，此消息发送给应用程序，通知它对话是否结束
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_SHOWWINDOW">
             <summary>
            当隐藏或显示窗口是发送此消息给这个窗口
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_WININICHANGE">
            <summary>
            win min change
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_DEVMODECHANGE">
            <summary>
            dev mode change
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_ACTIVATEAPP">
             <summary>
            发此消息给应用程序哪个窗口是激活的，哪个是非激活的
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_FONTCHANGE">
             <summary>
            当系统的字体资源库变化时发送此消息给所有顶级窗口
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_TIMECHANGE">
             <summary>
            当系统的时间变化时发送此消息给所有顶级窗口
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_CANCELMODE">
             <summary>
            发送此消息来取消某种正在进行的摸态（操作）
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_SETCURSOR">
             <summary>
            如果鼠标引起光标在某个窗口中移动且鼠标输入没有被捕获时，就发消息给某个窗口
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_MOUSEACTIVATE">
             <summary>
            当光标在某个非激活的窗口中而用户正按着鼠标的某个键发送此消息给///当前窗口
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_CHILDACTIVATE">
             <summary>
            发送此消息给MDI子窗口///当用户点击此窗口的标题栏，或///当窗口被激活，移动，改变大小
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_QUEUESYNC">
             <summary>
            此消息由基于计算机的训练程序发送，通过WH_JOURNALPALYBACK的hook程序分离出用户输入消息
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_GETMINMAXINFO">
             <summary>
            此消息发送给窗口当它将要改变大小或位置
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_PAINTICON">
             <summary>
            发送给最小化窗口当它图标将要被重画
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_ICONERASEBKGND">
             <summary>
            此消息发送给某个最小化窗口，仅///当它在画图标前它的背景必须被重画
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_NEXTDLGCTL">
             <summary>
            发送此消息给一个对话框程序去更改焦点位置
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_SPOOLERSTATUS">
             <summary>
            每当打印管理列队增加或减少一条作业时发出此消息
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_DRAWITEM">
             <summary>
            当button，combobox，listbox，menu的可视外观改变时发送
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_MEASUREITEM">
             <summary>
            当button, combo box, list box, list view control, or menu item 被创建时
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_DELETEITEM">
            <summary>
            delete item
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_VKEYTOITEM">
             <summary>
            此消息有一个LBS_WANTKEYBOARDINPUT风格的发出给它的所有者来响应WM_KEYDOWN消息
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_CHARTOITEM">
             <summary>
            此消息由一个LBS_WANTKEYBOARDINPUT风格的列表框发送给他的所有者来响应WM_CHAR消息
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_SETFONT">
             <summary>
            当绘制文本时程序发送此消息得到控件要用的颜色
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_GETFONT">
             <summary>
            应用程序发送此消息得到当前控件绘制文本的字体
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_SETHOTKEY">
             <summary>
            应用程序发送此消息让一个窗口与一个热键相关连
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_GETHOTKEY">
             <summary>
            应用程序发送此消息来判断热键与某个窗口是否有关联
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_QUERYDRAGICON">
             <summary>
            此消息发送给最小化窗口，当此窗口将要被拖放而它的类中没有定义图标，应用程序能返回一个图标或光标的句柄，当用户拖放图标时系统显示这个图标或光标
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_COMPAREITEM">
             <summary>
            发送此消息来判定combobox或listbox新增加的项的相对位置
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_GETOBJECT">
            <summary>
            get object
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_COMPACTING">
             <summary>
            显示内存已经很少了
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_COMMNOTIFY">
            <summary>
            comm notify
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_WINDOWPOSCHANGING">
             <summary>
            发送此消息给那个窗口的大小和位置将要被改变时，来调用setwindowpos函数或其它窗口管理函数
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_WINDOWPOSCHANGED">
             <summary>
            发送此消息给那个窗口的大小和位置已经被改变时，来调用setwindowpos函数或其它窗口管理函数
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_POWER">
             <summary>
            当系统将要进入暂停状态时发送此消息
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_COPYDATA">
             <summary>
            当一个应用程序传递数据给另一个应用程序时发送此消息
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_CANCELJOURNAL">
             <summary>
            当某个用户取消程序日志激活状态，提交此消息给程序
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_NOTIFY">
             <summary>
            当某个控件的某个事件已经发生或这个控件需要得到一些信息时，发送此消息给它的父窗口
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_INPUTLANGCHANGEREQUEST">
             <summary>
            当用户选择某种输入语言，或输入语言的热键改变
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_INPUTLANGCHANGE">
             <summary>
            当平台现场已经被改变后发送此消息给受影响的最顶级窗口
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_TCARD">
             <summary>
            当程序已经初始化windows帮助例程时发送此消息给应用程序
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_HELP">
             <summary>
            此消息显示用户按下了F1，如果某个菜单是激活的，就发送此消息个此窗口关联的菜单，否则就发送给有焦点的窗口，如果///当前都没有焦点，就把此消息发送给///当前激活的窗口
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_USERCHANGED">
             <summary>
            当用户已经登入或退出后发送此消息给所有的窗口，///当用户登入或退出时系统更新用户的具体设置信息，在用户更新设置时系统马上发送此消息
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_NOTIFYFORMAT">
            <summary>
            公用控件，自定义控件和他们的父窗口通过此消息来判断控件是使用ANSI还是UNICODE结构
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_CONTEXTMENU">
            <summary>
            当用户某个窗口中点击了一下右键就发送此消息给这个窗口
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_STYLECHANGING">
             <summary>
            当调用SETWINDOWLONG函数将要改变一个或多个 窗口的风格时发送此消息给那个窗口
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_STYLECHANGED">
             <summary>
            当调用SETWINDOWLONG函数一个或多个 窗口的风格后发送此消息给那个窗口
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_DISPLAYCHANGE">
             <summary>
            当显示器的分辨率改变后发送此消息给所有的窗口
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_GETICON">
             <summary>
            此消息发送给某个窗口来返回与某个窗口有关连的大图标或小图标的句柄
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_SETICON">
             <summary>
            程序发送此消息让一个新的大图标或小图标与某个窗口关联
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_NCCREATE">
             <summary>
            当某个窗口第一次被创建时，此消息在WM_CREATE消息发送前发送
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_NCDESTROY">
             <summary>
            此消息通知某个窗口，非客户区正在销毁
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_NCCALCSIZE">
             <summary>
            当某个窗口的客户区域必须被核算时发送此消息
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_NCHITTEST">
             <summary>
            移动鼠标，按住或释放鼠标时发生
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_NCPAINT">
             <summary>
            程序发送此消息给某个窗口当它（窗口）的框架必须被绘制时
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_NCACTIVATE">
             <summary>
            此消息发送给某个窗口仅当它的非客户区需要被改变来显示是激活还是非激活状态
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_GETDLGCODE">
             <summary>
            发送此消息给某个与对话框程序关联的控件，widdows控制方位键和TAB键使输入进入此控件通过应
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_SYNCPAINT">
            <summary>
            sys cpaint
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_NCMOUSEMOVE">
             <summary>
            当光标在一个窗口的非客户区内移动时发送此消息给这个窗口 非客户区为：窗体的标题栏及窗 的边框体
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_NCLBUTTONDOWN">
             <summary>
            当光标在一个窗口的非客户区同时按下鼠标左键时提交此消息
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_NCLBUTTONUP">
             <summary>
            当用户释放鼠标左键同时光标某个窗口在非客户区十发送此消息
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_NCLBUTTONDBLCLK">
             <summary>
            当用户双击鼠标左键同时光标某个窗口在非客户区十发送此消息
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_NCRBUTTONDOWN">
             <summary>
            当用户按下鼠标右键同时光标又在窗口的非客户区时发送此消息
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_NCRBUTTONUP">
             <summary>
            当用户释放鼠标右键同时光标又在窗口的非客户区时发送此消息
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_NCRBUTTONDBLCLK">
             <summary>
            当用户双击鼠标右键同时光标某个窗口在非客户区十发送此消息
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_NCMBUTTONDOWN">
             <summary>
            当用户按下鼠标中键同时光标又在窗口的非客户区时发送此消息
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_NCMBUTTONUP">
             <summary>
            当用户释放鼠标中键同时光标又在窗口的非客户区时发送此消息
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_NCMBUTTONDBLCLK">
             <summary>
            当用户双击鼠标中键同时光标又在窗口的非客户区时发送此消息
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_INPUT_DEVICE_CHANGE">
            <summary>
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/inputdev/raw-input-notifications </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_INPUT">
            <summary>
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/inputdev/raw-input-notifications </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_KEYDOWN">
            <summary>
            WM_KEYDOWN 按下一个键
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/inputdev/keyboard-input-notifications </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_KEYUP">
            <summary>
            释放一个键
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/inputdev/keyboard-input-notifications </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_CHAR">
            <summary>
            按下某键，并已发出WM_KEYDOWN， WM_KEYUP消息
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/inputdev/keyboard-input-notifications </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_DEADCHAR">
            <summary>
            当用translatemessage函数翻译WM_KEYUP消息时发送此消息给拥有焦点的窗口
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/inputdev/keyboard-input-notifications </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_SYSKEYDOWN">
            <summary>
            当用户按住ALT键同时按下其它键时提交此消息给拥有焦点的窗口
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/inputdev/keyboard-input-notifications </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_SYSKEYUP">
            <summary>
            当用户释放一个键同时ALT 键还按着时提交此消息给拥有焦点的窗口
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/inputdev/keyboard-input-notifications </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_SYSCHAR">
            <summary>
            当WM_SYSKEYDOWN消息被TRANSLATEMESSAGE函数翻译后提交此消息给拥有焦点的窗口
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/inputdev/keyboard-input-notifications </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_SYSDEADCHAR">
            <summary>
            当WM_SYSKEYDOWN消息被TRANSLATEMESSAGE函数翻译后发送此消息给拥有焦点的窗口
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/inputdev/keyboard-input-notifications </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_INITDIALOG">
             <summary>
            在一个对话框程序被显示前发送此消息给它，通常用此消息初始化控件和执行其它任务
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_COMMAND">
             <summary>
            当用户选择一条菜单命令项或当某个控件发送一条消息给它的父窗口，一个快捷键被翻译
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_SYSCOMMAND">
             <summary>
            当用户选择窗口菜单的一条命令或///当用户选择最大化或最小化时那个窗口会收到此消息
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_TIMER">
             <summary>
            发生了定时器事件
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_HSCROLL">
             <summary>
            当一个窗口标准水平滚动条产生一个滚动事件时发送此消息给那个窗口，也发送给拥有它的控件
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_VSCROLL">
             <summary>
            当一个窗口标准垂直滚动条产生一个滚动事件时发送此消息给那个窗口也，发送给拥有它的控件
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_INITMENU">
             <summary>
            当一个菜单将要被激活时发送此消息，它发生在用户菜单条中的某项或按下某个菜单键，它允许程序在显示前更改菜单
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_INITMENUPOPUP">
             <summary>
            当一个下拉菜单或子菜单将要被激活时发送此消息，它允许程序在它显示前更改菜单，而不要改变全部
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_MENUSELECT">
             <summary>
            当用户选择一条菜单项时发送此消息给菜单的所有者（一般是窗口）
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_MENUCHAR">
             <summary>
            当菜单已被激活用户按下了某个键（不同于加速键），发送此消息给菜单的所有者
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_ENTERIDLE">
             <summary>
            当一个模态对话框或菜单进入空载状态时发送此消息给它的所有者，一个模态对话框或菜单进入空载状态就是在处理完一条或几条先前的消息后没有消息它的列队中等待
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_CTLCOLORMSGBOX">
             <summary>=
            在windows绘制消息框前发送此消息给消息框的所有者窗口，通过响应这条消息，所有者窗口可以通过使用给定的相关显示设备的句柄来设置消息框的文本和背景颜色
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_CTLCOLOREDIT">
             <summary>
            当一个编辑型控件将要被绘制时发送此消息给它的父窗口通过响应这条消息，所有者窗口可以通过使用给定的相关显示设备的句柄来设置编辑框的文本和背景颜色
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_CTLCOLORLISTBOX">
             <summary>
            当一个列表框控件将要被绘制前发送此消息给它的父窗口通过响应这条消息，所有者窗口可以通过使用给定的相关显示设备的句柄来设置列表框的文本和背景颜色
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_CTLCOLORBTN">
             <summary>
            当一个按钮控件将要被绘制时发送此消息给它的父窗口通过响应这条消息，所有者窗口可以通过使用给定的相关显示设备的句柄来设置按纽的文本和背景颜色
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_CTLCOLORDLG">
             <summary>
            当一个对话框控件将要被绘制前发送此消息给它的父窗口通过响应这条消息，所有者窗口可以通过使用给定的相关显示设备的句柄来设置对话框的文本背景颜色
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_CTLCOLORSCROLLBAR">
             <summary>
            当一个滚动条控件将要被绘制时发送此消息给它的父窗口通过响应这条消息，所有者窗口可以通过使用给定的相关显示设备的句柄来设置滚动条的背景颜色
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_CTLCOLORSTATIC">
             <summary>
            当一个静态控件将要被绘制时发送此消息给它的父窗口通过响应这条消息，所有者窗口可以 通过使用给定的相关显示设备的句柄来设置静态控件的文本和背景颜色
             </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.MN_GETHMENU">
            <summary>
            get h menu
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_MOUSEMOVE">
            <summary>
            移动鼠标时发生，同WM_MOUSEFIRST
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/inputdev/mouse-input-notifications </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_LBUTTONDOWN">
            <summary>
            按下鼠标左键
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/inputdev/mouse-input-notifications </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_LBUTTONUP">
            <summary>
            释放鼠标左键
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/inputdev/mouse-input-notifications </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_LBUTTONDBLCLK">
            <summary>
            双击鼠标左键
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/inputdev/mouse-input-notifications </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_RBUTTONDOWN">
            <summary>
            按下鼠标右键
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/inputdev/mouse-input-notifications </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_RBUTTONUP">
            <summary>
            释放鼠标右键
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/inputdev/mouse-input-notifications </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_RBUTTONDBLCLK">
            <summary>
            双击鼠标右键
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/inputdev/mouse-input-notifications </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_MBUTTONDOWN">
            <summary>
            按下鼠标中键
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/inputdev/mouse-input-notifications </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_MBUTTONUP">
            <summary>
            释放鼠标中键
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/inputdev/mouse-input-notifications </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_MBUTTONDBLCLK">
            <summary>
            双击鼠标中键
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/inputdev/mouse-input-notifications </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_MOUSEWHEEL">
            <summary>
            当鼠标轮子转动时发送此消息个当前有焦点的控件
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/inputdev/mouse-input-notifications </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_XBUTTONDOWN">
            <summary>
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/inputdev/mouse-input-notifications </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_XBUTTONUP">
            <summary>
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/inputdev/mouse-input-notifications </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_XBUTTONDBLCLK">
            <summary>
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/inputdev/mouse-input-notifications </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_MOUSEHWHEEL">
            <summary>
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/inputdev/mouse-input-notifications </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_CAPTURECHANGED">
            <summary>
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/inputdev/mouse-input-notifications </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_DEVICECHANGE">
            <summary>
            Device Change
            <para>wParam <see cref="T:SpaceCG.WindowsAPI.User32.DeviceBroadcastType"/></para>
            <para>lParm <see cref="T:SpaceCG.WindowsAPI.User32.DEV_BROADCAST_HDR"/></para>
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/devio/wm-devicechange </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_HOTKEY">
            <summary>
            Hot Key, WM_HOTKEY 与 WM_GETHOTKEY 和 WM_SETHOTKEY 热键无关。该 WM_HOTKEY 消息被用于通用的热键发送而 WM_SETHOTKEY 和 WM_GETHOTKEY 消息涉及窗口激活热键。
            <para>lParam <see cref="T:SpaceCG.WindowsAPI.User32.RhkModifier"/></para>
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/inputdev/keyboard-input-notifications </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_USER">
            <summary>
            user
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MessageType.WM_APP">
            <summary>
            app
            </summary>
        </member>
        <member name="T:SpaceCG.WindowsAPI.User32.MSG">
            <summary>
            Window 消息结构体。(MSG, *PMSG, *NPMSG, *LPMSG)
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/ns-winuser-msg </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MSG.hwnd">
            <summary>
            窗口的句柄，其窗口过程接收消息。当消息是线程消息时，此成员为 NULL。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MSG.message">
            <summary>
            消息标识符。应用程序只能使用低位字；高位字由系统保留。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MSG.wParam">
            <summary>
            [WPARAM] 有关消息的其他信息。确切含义取决于消息成员的值 。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MSG.lParam">
            <summary>
            [LPARAM] 有关消息的其他信息。确切含义取决于消息成员的值 。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MSG.time">
            <summary>
            消息发布的时间。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MSG.pt">
            <summary>
            消息发布时的光标位置，以屏幕坐标表示。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.MSG.lPrivate">
            <summary>
            lPrivate
            </summary>
        </member>
        <member name="T:SpaceCG.WindowsAPI.User32.PmFlags">
            <summary>
            <see cref="!:PeekMessage"/> 函数参数 wRemoveMsg 的值之一或值组合
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-peekmessagea </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.PmFlags.PM_NOREMOVE">
            <summary>
            通过 <see cref="M:SpaceCG.WindowsAPI.User32.User32.PeekMessage(SpaceCG.WindowsAPI.User32.MSG@,System.IntPtr,System.UInt32,System.UInt32,System.UInt32)"/> 处理后，消息不会从队列中删除。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.PmFlags.PM_REMOVE">
            <summary>
            经过 <see cref="M:SpaceCG.WindowsAPI.User32.User32.PeekMessage(SpaceCG.WindowsAPI.User32.MSG@,System.IntPtr,System.UInt32,System.UInt32,System.UInt32)"/> 处理后，消息将从队列中删除。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.User32.PmFlags.PM_NOYIELD">
            <summary>
            防止系统释放任何等待调用方进入空闲状态的线程（请参见 WaitForInputIdle）。
            将此值与 <see cref="F:SpaceCG.WindowsAPI.User32.PmFlags.PM_NOREMOVE"/> 或 <see cref="F:SpaceCG.WindowsAPI.User32.PmFlags.PM_REMOVE"/> 结合使用。
            </summary>
        </member>
        <member name="T:SpaceCG.WindowsAPI.HID.HID">
            <summary>
            hdi.dll Human Interface Devices (HID)
            <para>参考：https://docs.microsoft.com/zh-cn/windows-hardware/drivers/hid/ </para>
            <para>参考：https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/_hid/ </para>
            </summary>
        </member>
        <member name="T:SpaceCG.WindowsAPI.HID.HIDExtension">
            <summary>
            WindowsAPI HID 库，扩展常用/通用，功能/函数，扩展示例，以及使用方式
            </summary>
            <summary>
            HID Extension
            </summary>
        </member>
        <member name="M:SpaceCG.WindowsAPI.HID.HIDExtension.GetHIDDevicesPath">
            <summary>
            获取 HID 设备路径列表
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpaceCG.WindowsAPI.SetupAPI.SetupAPI">
            <summary>
            setupapi.dll
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/setupapi/ </para>
            <para>参考：https://docs.microsoft.com/zh-cn/previous-versions/ff549791%28v%3dvs.85%29 </para>
            </summary>
        </member>
        <member name="M:SpaceCG.WindowsAPI.SetupAPI.SetupAPI.SetupDiGetClassDevs(System.Guid@,System.IntPtr,System.IntPtr,SpaceCG.WindowsAPI.SetupAPI.DIGCF)">
            <summary>
            该函数返回的句柄，设备信息集，其中包含本地计算机请求的设备信息元素。
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/api/setupapi/nf-setupapi-setupdigetclassdevsw </para>
            </summary>
            <param name="ClassGuid">指向设备设置类或设备接口类的 GUID 的指针。该指针是可选的，可以为 NULL。</param>
            <param name="Enumerator">指向以 NULL 结尾的字符串的指针，该字符串指定以下选项。该指针是可选的，可以为NULL。如果未使用枚举值选择设备，则将 Enumerator 设置为 NULL
            	<para>1.即插即用（PnP）枚举器的标识符（ID）。该ID可以是值的全局唯一标识符（GUID）或符号名。例如，“ PCI”可用于指定PCI PnP值。PnP值的符号名称的其他示例包括“ USB”，“ PCMCIA”和“ SCSI”。</para>
            	<para>2.PnP 设备实例ID。指定PnP设备实例ID时，必须在Flags参数中设置DIGCF_DEVICEINTERFACE。</para>
            </param>
            <param name="hwndParent">顶层窗口的句柄，用于与在设备信息集中安装设备实例相关联的用户界面。该句柄是可选的，可以为 NULL。</param>
            <param name="Flags"><see cref="T:SpaceCG.WindowsAPI.SetupAPI.DIGCF"/> 此参数可以是零个或多个以下标志的按位或。 </param>
            <returns></returns>
        </member>
        <member name="T:SpaceCG.WindowsAPI.SetupAPI.SetupAPIExtension">
            <summary>
            WindowsAPI SetupAPI 库，扩展常用/通用，功能/函数，扩展示例，以及使用方式
            </summary>
        </member>
        <member name="T:SpaceCG.WindowsAPI.SetupAPI.DIGCF">
            <summary>
            <see cref="M:SpaceCG.WindowsAPI.SetupAPI.SetupAPI.SetupDiGetClassDevs(System.Guid@,System.IntPtr,System.IntPtr,SpaceCG.WindowsAPI.SetupAPI.DIGCF)"/> 函数参考的 零个或多个标志
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/api/setupapi/nf-setupapi-setupdigetclassdevsw </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.SetupAPI.DIGCF.DEFAULT">
            <summary>
            对于指定的设备接口类，仅返回与系统默认设备接口关联的设备（如果已设置）。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.SetupAPI.DIGCF.PRESENT">
            <summary>
            仅返回系统中当前存在的设备。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.SetupAPI.DIGCF.ALLCLASSES">
            <summary>
            返回所有设备设置类或所有设备接口类的已安装设备的列表。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.SetupAPI.DIGCF.PROFILE">
            <summary>
            仅返回属于当前硬件配置文件的设备。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.SetupAPI.DIGCF.DEVICEINTERFACE">
            <summary>
            返回支持指定设备接口类的设备接口的设备。如果 Enumerator 参数指定设备实例 ID，则必须在 Flags 参数中设置此标志。
            </summary>
        </member>
        <member name="T:SpaceCG.WindowsAPI.SetupAPI.SP_DEVICE_INTERFACE_DATA">
            <summary>
            定义设备信息集中的设备接口。
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/api/setupapi/ns-setupapi-sp_device_interface_data </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.SetupAPI.SP_DEVICE_INTERFACE_DATA.Size">
            <summary>
            <see cref="T:SpaceCG.WindowsAPI.SetupAPI.SP_DEVICE_INTERFACE_DATA"/> 结构大小
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.SetupAPI.SP_DEVICE_INTERFACE_DETAIL_DATA.Size">
            <summary>
            <see cref="T:SpaceCG.WindowsAPI.SetupAPI.SP_DEVICE_INTERFACE_DETAIL_DATA"/> 结构大小
            </summary>
        </member>
        <member name="M:SpaceCG.WindowsAPI.SetupAPI.SP_DEVICE_INTERFACE_DETAIL_DATA.ToString">
            <summary>
            @ToString()
            </summary>
            <returns></returns>
        </member>
        <member name="F:SpaceCG.WindowsAPI.SetupAPI.SP_DEVINFO_DATA.Size">
            <summary>
            <see cref="T:SpaceCG.WindowsAPI.SetupAPI.SP_DEVINFO_DATA"/> 结构大小
            </summary>
        </member>
        <member name="T:SpaceCG.WindowsAPI.DpiAwaeness">
            <summary>
            标识线程，进程或窗口的每英寸点数（dpi）设置。
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/api/windef/ne-windef-dpi_awareness </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.DpiAwaeness.INVALID">
            <summary>
            DPI意识无效。这是无效的DPI感知值。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.DpiAwaeness.UNAWARE">
            <summary>
            DPI不知道。此过程无法适应DPI更改，并且始终假定比例因子为100％（96 DPI）。系统将在其他任何DPI设置上自动缩放它。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.DpiAwaeness.SYSTEM_AWARE">
            <summary>
            系统DPI感知。此过程无法适应DPI更改。它将一次查询DPI，并在该过程的整个生命周期中使用该值。
            <para>如果DPI更改，则该过程将不会调整为新的DPI值。当DPI从系统值更改时，系统会自动按比例将其放大或缩小。</para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.DpiAwaeness.PER_MONITOR_AWARE">
            <summary>
            每个监视器DPI感知。创建DPI时，此过程将对其进行检查，并在DPI更改时调整比例因子。这些过程不会被系统自动缩放
            </summary>
        </member>
        <member name="T:SpaceCG.WindowsAPI.DpiHostingBehavior">
            <summary>
            标识窗口的 DPI 托管行为。此行为允许在线程中创建的窗口托管具有不同 DPI_AWARENESS_CONTEXT 的子窗口 
            <para>https://docs.microsoft.com/en-us/windows/win32/api/windef/ne-windef-dpi_hosting_behavior </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.DpiHostingBehavior.INVALID">
            <summary>
            DPI托管行为无效。如果先前的 SetThreadDpiHostingBehavior 调用使用了无效的参数，通常会发生这种情况。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.DpiHostingBehavior.DEFAULT">
            <summary>
            默认的 DPI 托管行为。关联的窗口行为正常，无法使用不同的 DPI_AWARENESS_CONTEXT 创建或重新父级子窗口。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.DpiHostingBehavior.MIXED">
            <summary>
            混合的 DPI 托管行为。这样可以使用不同的 DPI_AWARENESS_CONTEXT 创建和重新创建父窗口。这些子窗口将由OS独立缩放。
            </summary>
        </member>
        <member name="T:SpaceCG.WindowsAPI.POINT">
            <summary>
            POINT 结构定义点的 x 和 y 坐标。(POINT, POINTL, *PPOINT, *NPPOINT, *LPPOINT)
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/api/windef/ns-windef-point </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.POINT.x">
            <summary>
            指定点的x坐标
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.POINT.y">
            <summary>
            指定点的y坐标
            </summary>
        </member>
        <member name="M:SpaceCG.WindowsAPI.POINT.#ctor(System.Int32,System.Int32)">
            <summary>
            POINT 结构体
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:SpaceCG.WindowsAPI.POINT.ToString">
            <summary>
            @ToString()
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpaceCG.WindowsAPI.SIZE">
            <summary>
            SIZE 结构定义矩形的宽度和高度。(SIZE, *PSIZE, *LPSIZE)
            <para>存储在此结构中的矩形尺寸可以对应于视口范围，窗口范围，文本范围，位图尺寸或某些扩展功能的长宽比过滤器。</para>
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/api/windef/ns-windef-size </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.SIZE.cx">
            <summary>
            指定矩形的宽度。单位取决于使用此结构的功能。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.SIZE.cy">
            <summary>
            指定矩形的高度。单位取决于使用此结构的功能。
            </summary>
        </member>
        <member name="M:SpaceCG.WindowsAPI.SIZE.#ctor(System.Int32,System.Int32)">
            <summary>
            SIZE 结构体
            </summary>
            <param name="cx"></param>
            <param name="cy"></param>
        </member>
        <member name="M:SpaceCG.WindowsAPI.SIZE.ToString">
            <summary>
            @ToString()
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpaceCG.WindowsAPI.RECT">
            <summary>
            RECT 结构通过其左上角和右下角的坐标定义一个矩形。(RECT, RECTL, *PRECT, NEAR *NPRECT, FAR *LPRECT)
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/api/windef/ns-windef-rect </para>
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.RECT.left">
            <summary>
            指定矩形左上角的x坐标
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.RECT.top">
            <summary>
            指定矩形左上角的y坐标
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.RECT.right">
            <summary>
            指定矩形右下角的x坐标。
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.RECT.buttom">
            <summary>
            指定矩形右下角的y坐标。
            </summary>
        </member>
        <member name="M:SpaceCG.WindowsAPI.RECT.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            RECT 结构体
            </summary>
            <param name="left"></param>
            <param name="top"></param>
            <param name="right"></param>
            <param name="buttom"></param>
        </member>
        <member name="M:SpaceCG.WindowsAPI.RECT.ToString">
            <summary>
            @ToString()
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.RECT.CopyRect(SpaceCG.WindowsAPI.RECT@,SpaceCG.WindowsAPI.RECT@)">
            <summary>
            复制一个矩形的坐标到另一个。
            <para>因为应用程序可以将矩形用于不同的目的，所以矩形函数不使用显式的度量单位。相反，所有矩形坐标和尺寸均以带符号的逻辑值给出。映射模式和使用矩形的功能确定度量单位。</para>
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-copyrect </para>
            </summary>
            <param name="lprc">指向 <see cref="T:SpaceCG.WindowsAPI.RECT"/> 结构的指针，该结构接收源矩形的逻辑坐标。</param>
            <param name="lprcSrc">指向要以逻辑单位复制其坐标的 <see cref="T:SpaceCG.WindowsAPI.RECT"/> 结构的指针。</param>
            <returns>如果函数成功，则返回值为非零。如果函数失败，则返回值为零。</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.RECT.SetRect(SpaceCG.WindowsAPI.RECT@,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            设置指定矩形的坐标。这等效于将 left，top，right 和 bottom 参数分配给RECT结构的适当成员。
            <para>因为应用程序可以将矩形用于不同的目的，所以矩形函数不使用显式的度量单位。相反，所有矩形坐标和尺寸均以带符号的逻辑值给出。映射模式和使用矩形的功能确定度量单位。</para>
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setrect </para>
            </summary>
            <param name="lprc">指向包含要设置的矩形的 <see cref="T:SpaceCG.WindowsAPI.RECT"/> 结构的指针。</param>
            <param name="xLeft">指定矩形左上角的 x 坐标。</param>
            <param name="yTop">指定矩形左上角的 y 坐标。</param>
            <param name="xRight">指定矩形右下角的 x 坐标。</param>
            <param name="yBottom">指定矩形右下角的 y 坐标。</param>
            <returns>如果函数成功，则返回值为非零。如果函数失败，则返回值为零。</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.RECT.SetRectEmpty(SpaceCG.WindowsAPI.RECT@)">
            <summary>
            创建一个空的矩形，其中所有的坐标都设置为零。
            <para>因为应用程序可以将矩形用于不同的目的，所以矩形函数不使用显式的度量单位。相反，所有矩形坐标和尺寸均以带符号的逻辑值给出。映射模式和使用矩形的功能确定度量单位。</para>
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setrectempty </para>
            </summary>
            <param name="lprc">指向包含矩形坐标的 <see cref="T:SpaceCG.WindowsAPI.RECT"/> 结构的指针。</param>
            <returns>如果函数成功，则返回值为非零。如果函数失败，则返回值为零。</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.RECT.IsRectEmpty(SpaceCG.WindowsAPI.RECT@)">
            <summary>
            确定指定的矩形是否为空。空矩形是没有面积的矩形。也就是说，右侧的坐标小于或等于左侧的坐标，或者底侧的坐标小于或等于顶侧的坐标。
            <para>因为应用程序可以将矩形用于不同的目的，所以矩形函数不使用显式的度量单位。相反，所有矩形坐标和尺寸均以带符号的逻辑值给出。映射模式和使用矩形的功能确定度量单位。</para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-isrectempty </para>
            </summary>
            <param name="lprc">指向包含矩形逻辑坐标的 <see cref="T:SpaceCG.WindowsAPI.RECT"/> 结构的指针。</param>
            <returns>如果矩形为空，则返回值为非零。如果矩形不为空，则返回值为零。</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.RECT.EqualRect(SpaceCG.WindowsAPI.RECT@,SpaceCG.WindowsAPI.RECT@)">
            <summary>
            确定两个指定的矩形是否通过比较它们的左上角和右下角的坐标相等。
            <para>该函数没有把空矩形作为平等的，如果它们的坐标是不同的。</para>
            <para>因为应用程序可以将矩形用于不同的目的，所以矩形函数不使用显式的度量单位。相反所有矩形坐标和尺寸均以带符号的逻辑值给出。映射模式和使用矩形的功能确定度量单位。</para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-equalrect </para>
            </summary>
            <param name="lprc1">指向 RECT 结构的指针，该结构包含第一个矩形的逻辑坐标。</param>
            <param name="lprc2">指向 RECT 结构的指针，该结构包含第二个矩形的逻辑坐标。</param>
            <returns>如果两个矩形相同，则返回值为非零。如果两个矩形不相同，则返回值为零。</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.RECT.PtInRect(SpaceCG.WindowsAPI.RECT@,SpaceCG.WindowsAPI.POINT)">
            <summary>
            确定是否指定的矩形内的指定点所在。如果一个点位于矩形的左侧或顶部，或者位于所有四个侧面，则该点位于矩形内。右侧或底部的一个点被认为是在矩形的外部。
            <para>必须在调用 <see cref="M:SpaceCG.WindowsAPI.RECT.PtInRect(SpaceCG.WindowsAPI.RECT@,SpaceCG.WindowsAPI.POINT)"/> 之前将矩形标准化。也就是说，lprc.right 必须大于 lprc.left，而 lprc.bottom 必须大于 lprc.top。如果矩形未标准化，则永远不会在矩形内部考虑点。</para>
            <para>因为应用程序可以将矩形用于不同的目的，所以矩形函数不使用显式的度量单位。相反，所有矩形坐标和尺寸均以带符号的逻辑值给出。映射模式和使用矩形的功能确定度量单位。</para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-ptinrect </para>
            </summary>
            <param name="lprc">指向包含指定矩形的 <see cref="T:SpaceCG.WindowsAPI.RECT"/> 结构的指针。</param>
            <param name="pt">一个 <see cref="T:SpaceCG.WindowsAPI.POINT"/> 结构，包含指定点。</param>
            <returns>如果指定点位于矩形内，则返回值为非零。如果指定的点不在矩形内，则返回值为零。</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.RECT.InflateRect(SpaceCG.WindowsAPI.RECT@,System.Int32,System.Int32)">
            <summary>
            增加或减少指定的矩形的宽度和高度。所述 <see cref="M:SpaceCG.WindowsAPI.RECT.InflateRect(SpaceCG.WindowsAPI.RECT@,System.Int32,System.Int32)"/> 函数添加 dx 单位矩形的和左和右端 dy 单元的顶部和底部。在 dx 和 dy 参数符号值; 正值增加宽度和高度，负值减小宽度和高度。
            <para>因为应用程序可以将矩形用于不同的目的，所以矩形函数不使用显式的度量单位。相反所有矩形坐标和尺寸均以带符号的逻辑值给出。映射模式和使用矩形的功能确定度量单位。</para>
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-inflaterect </para>
            </summary>
            <param name="lprc">[LPRECT] 指向大小增加或减小的 <see cref="T:SpaceCG.WindowsAPI.RECT"/> 结构的指针。</param>
            <param name="dx">增大或减小矩形宽度的量。此参数必须为负数以减小宽度。</param>
            <param name="dy">增加或减少矩形高度的数量。此参数必须为负数以减小高度。</param>
            <returns>如果函数成功，则返回值为非零。如果函数失败，则返回值为零。</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.RECT.OffsetRect(SpaceCG.WindowsAPI.RECT@,System.Int32,System.Int32)">
            <summary>
            由指定的偏移量移动指定的矩形。
            <para>因为应用程序可以将矩形用于不同的目的，所以矩形函数不使用显式的度量单位。相反，所有矩形坐标和尺寸均以带符号的逻辑值给出。映射模式和使用矩形的功能确定度量单位。</para>
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-offsetrect </para>
            </summary>
            <param name="lprc">指向 <see cref="T:SpaceCG.WindowsAPI.RECT"/> 结构的指针，该结构包含要移动的矩形的逻辑坐标。</param>
            <param name="dx">指定向左或向右移动矩形的量。此参数必须为负值，以将矩形向左移动。</param>
            <param name="dy">指定向上或向下移动矩形的量。此参数必须为负值才能向上移动矩形。</param>
            <returns>如果函数成功，则返回值为非零。如果函数失败，则返回值为零。</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.RECT.IntersectRect(SpaceCG.WindowsAPI.RECT@,SpaceCG.WindowsAPI.RECT@,SpaceCG.WindowsAPI.RECT@)">
            <summary>
            计算两个源矩形的交集与交点矩形的坐标放入目标矩形。如果源矩形不相交，则将一个空矩形（所有坐标均设置为零）放置到目标矩形中。
            <para>因为应用程序可以将矩形用于不同的目的，所以矩形函数不使用显式的度量单位。相反，所有矩形坐标和尺寸均以带符号的逻辑值给出。映射模式和使用矩形的功能确定度量单位。</para>
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-intersectrect </para>
            </summary>
            <param name="lprcDst">指向 <see cref="T:SpaceCG.WindowsAPI.RECT"/> 结构的指针，该结构将接收 lprcSrc1 和 lprcSrc2 参数指向的矩形的交集。此参数不能为 NULL。</param>
            <param name="lprc1">指向包含第一个源矩形的 <see cref="T:SpaceCG.WindowsAPI.RECT"/> 结构的指针。</param>
            <param name="lprc2">指向包含第二个源矩形的 <see cref="T:SpaceCG.WindowsAPI.RECT"/> 结构的指针。</param>
            <returns>如果矩形相交，则返回值为非零。如果矩形不相交，则返回值为零。</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.RECT.SubtractRect(SpaceCG.WindowsAPI.RECT@,SpaceCG.WindowsAPI.RECT@,SpaceCG.WindowsAPI.RECT@)">
            <summary>
            确定一个矩形的由从另一个中减去一个矩形形成的坐标。
            <para>该函数仅减去由指定的矩形 lprcSrc2 从由指定的矩形 lprcSrc1 当矩形无论是在X或Y方向上完全相交。
            例如，如果 lprcSrc1 具有坐标（10,10,100,100），而 lprcSrc2 具有坐标（50,50,150,150），则该函数会将 lprcDst 指向的矩形的坐标设置为（10,10,100,100）。
            如果 lprcSrc1 具有坐标（10,10,100,100）并且 lprcSrc2 具有坐标（50,10,150,150），但是，该函数设置 lprcDst 指向的矩形的坐标到（10,10,50,100）。换句话说，所得的矩形是几何差异的边界框。</para>
            <para>因为应用程序可以将矩形用于不同的目的，所以矩形函数不使用显式的度量单位。相反，所有矩形坐标和尺寸均以带符号的逻辑值给出。映射模式和使用矩形的功能确定度量单位。</para>
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-subtractrect </para>
            </summary>
            <param name="lprcDst">指向一个 <see cref="T:SpaceCG.WindowsAPI.RECT"/> 接收矩形的坐标结构减去由指向的矩形确定 lprcSrc2 从矩形指向 lprcSrc1。</param>
            <param name="lprc1">指向 <see cref="T:SpaceCG.WindowsAPI.RECT"/> 结构的指针，该函数从中减去 lprcSrc2 指向的矩形。</param>
            <param name="lprc2">该函数从 lprcSrc1 指向的矩形中减去的 <see cref="T:SpaceCG.WindowsAPI.RECT"/> 结构的指针。</param>
            <returns>如果结果矩形为空，则返回值为零。如果结果矩形不为空，则返回值为非零。</returns>
        </member>
        <member name="M:SpaceCG.WindowsAPI.RECT.UnionRect(SpaceCG.WindowsAPI.RECT@,SpaceCG.WindowsAPI.RECT@,SpaceCG.WindowsAPI.RECT@)">
            <summary>
            创建两个矩形的联合。联合是包含两个源矩形的最小矩形。
            <para>系统会忽略空矩形的尺寸，即所有坐标均设置为零的矩形，因此它没有高度或宽度。</para>
            <para>因为应用程序可以将矩形用于不同的目的，所以矩形函数不使用显式的度量单位。相反，所有矩形坐标和尺寸均以带符号的逻辑值给出。映射模式和使用矩形的功能确定度量单位。</para>
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-unionrect </para>
            </summary>
            <param name="lprcDst">指向 <see cref="T:SpaceCG.WindowsAPI.RECT"/> 结构的指针，该结构将接收一个包含 lprcSrc1 和 lprcSrc2 参数指向的矩形的矩形。</param>
            <param name="lprc1">指向包含第一个源矩形的 <see cref="T:SpaceCG.WindowsAPI.RECT"/> 结构的指针。</param>
            <param name="lprc2">指向包含第二个源矩形的 <see cref="T:SpaceCG.WindowsAPI.RECT"/> 结构的指针。</param>
            <returns>如果指定的结构包含非空矩形，则返回值为非零。如果指定的结构不包含非空矩形，则返回值为零。</returns>
        </member>
        <member name="T:SpaceCG.WindowsAPI.FILETIME">
            <summary>
            File Time (FILETIME, *PFILETIME, *LPFILETIME)
            File System time stamps are represented with the following structure:
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.FILETIME.dwLowDateTime">
            <summary>
            low date time
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.FILETIME.dwHighDateTime">
            <summary>
            high date time
            </summary>
        </member>
        <member name="M:SpaceCG.WindowsAPI.FILETIME.ToString">
            <summary>
            @ToString()
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpaceCG.WindowsAPI.WinDef">
            <summary>
            WinDef.h
            </summary>
        </member>
        <member name="F:SpaceCG.WindowsAPI.WinDef.MAX_PATH">
            <summary>
            path max chars 260
            </summary>
        </member>
        <member name="T:SpaceCG.Extension.ApplicationExtension">
            <summary>
            Application Extension
            </summary>
        </member>
        <member name="M:SpaceCG.Extension.ApplicationExtension.RunDefaultSetting(System.Windows.Application,System.Windows.ShutdownMode,System.Boolean,System.String)">
            <summary>
            运行设置是否只运行一个实例，以及启用 Application 的事件记录，和未处理的异常信息记录
            </summary>
            <param name="app"></param>
            <param name="shutdownmMode">Shutdown Mode </param>
            <param name="runOnlyOne">只运行一个应用实例</param>
            <param name="name">如果 runOnlyOne 为 true, 该参数有效，表示系统范围内同步事件的名称</param>
        </member>
        <member name="M:SpaceCG.Extension.ApplicationExtension.IsRunningInstance">
            <summary>
            指示应用程序是否正在运行实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.Extension.ApplicationExtension.ReadApplicationProperties(System.Windows.Application,System.String)">
            <summary>
            读取应用程序范围属性的集合，一般发生在 <see cref="M:System.Windows.Application.OnStartup(System.Windows.StartupEventArgs)"/> 处理
            </summary>
            <param name="app"></param>
            <param name="filename"></param>
        </member>
        <member name="M:SpaceCG.Extension.ApplicationExtension.WriteApplicationProperties(System.Windows.Application,System.String)">
            <summary>
            保存应用程序范围属性的集合，一般发生在 <see cref="M:System.Windows.Application.OnExit(System.Windows.ExitEventArgs)"/> 处理
            </summary>
            <param name="app"></param>
            <param name="filename"></param>
        </member>
        <member name="T:SpaceCG.Extension.HPSocketExtension">
            <summary>
            HPSocket 扩展类/功能
            </summary>
        </member>
        <member name="M:SpaceCG.Extension.HPSocketExtension.CreateClient``1(System.String,System.UInt16,System.Action{HPSocket.IClient,System.Byte[]},System.Boolean)">
            <summary>
            创建 HPSocket.IClient 客户端连接对象，并创建匿名监听事件。如果只关心数据的接收/处理，适用此方法，其它事件状态会记录在日志中。
            <para>建议使用 <see cref="!:DisposeClient(HPSocket.IClient, log4net.ILog)"/> 断开销毁客户端对象。 </para>
            <para> &lt;IClient&gt; 类型约束实现 <see cref="T:HPSocket.IClient"/> 接口，参考: <see cref="T:HPSocket.Tcp.TcpClient"/>, <see cref="T:HPSocket.Udp.UdpClient"/>, <see cref="T:HPSocket.Udp.UdpCast"/> ... </para>
            </summary>
            <typeparam name="IClient">&lt;IClient&gt; 类型约束实现 <see cref="T:HPSocket.IClient"/> 接口，参考: <see cref="T:HPSocket.Tcp.TcpClient"/>, <see cref="T:HPSocket.Udp.UdpClient"/>, <see cref="T:HPSocket.Udp.UdpCast"/> ...</typeparam>
            <param name="remoteAddress">远程服务端地址</param>
            <param name="remotePort">远程服务端端口</param>
            <param name="receivedCallback">数据接收回调</param>
            <param name="autoConnect">断开后是否自动连接，等待 3000ms 后重新连接</param>
            <exception cref="T:System.ArgumentException"></exception>
            <returns>返回 <see cref="T:HPSocket.IClient"/> 实例对象。</returns>
        </member>
        <member name="M:SpaceCG.Extension.HPSocketExtension.DisposeClient(HPSocket.IClient)">
            <summary>
            销毁由 <see cref="M:SpaceCG.Extension.HPSocketExtension.CreateClient``1(System.String,System.UInt16,System.Action{HPSocket.IClient,System.Byte[]},System.Boolean)"/> 创建的客户端对象
            <para>注意：静态函数，非引用参数 client, 需实例变量 设为 null </para>
            </summary>
            <param name="client"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:SpaceCG.Extension.HPSocketExtension.CreateServer``1(System.UInt16,System.Action{System.IntPtr,System.Byte[]})">
            <summary>
            创建简单 HPSocket.IServer 服务端对象，并创建匿名监听事件。
            <para>建议使用 <see cref="!:DisposeServer(HPSocket.IServer, log4net.ILog)"/> 断开销毁客户端对象。 </para>
            <para>&lt;IServer&gt; 类型约束实现 <see cref="T:HPSocket.IServer"/> 接口，参考: <see cref="T:HPSocket.Tcp.TcpServer"/>, <see cref="T:HPSocket.Udp.UdpServer"/> ... </para>
            </summary>
            <typeparam name="IServer">&lt;IServer&gt; 类型约束实现 <see cref="T:HPSocket.IServer"/> 接口，参考: <see cref="T:HPSocket.Tcp.TcpServer"/>, <see cref="T:HPSocket.Udp.UdpServer"/> ... </typeparam>
            <param name="localPort">绑定的本机端口号</param>
            <param name="receivedCallback">客户端数据接收回调函数</param>
            <exception cref="T:System.ArgumentException"></exception>
            <returns>返回 <see cref="T:HPSocket.IServer"/> 实例对象。</returns>
        </member>
        <member name="M:SpaceCG.Extension.HPSocketExtension.Broadcast(HPSocket.IServer,System.IntPtr,System.Byte[])">
            <summary>
            HPSokcet.IServer 广播数据
            </summary>
            <param name="server"></param>
            <param name="connId">不对此 connId 广播，或可为 null </param>
            <param name="bytes"></param>
        </member>
        <member name="M:SpaceCG.Extension.HPSocketExtension.DisposeServer(HPSocket.IServer)">
            <summary>
            销毁由 <see cref="M:SpaceCG.Extension.HPSocketExtension.CreateServer``1(System.UInt16,System.Action{System.IntPtr,System.Byte[]})"/> 创建的服务端对象
            <para>注意：静态函数，非引用参数 server, 需实例变量 设为 null </para>
            </summary>
            <param name="server"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:SpaceCG.Extension.ManagementExtension">
            <summary>
            System.Management 命名空间 扩展/实用/通用 函数
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/cimwin32prov/cimwin32-wmi-providers </para>
            <para>有关 WMI 类，参考：https://docs.microsoft.com/en-us/windows/win32/cimwin32prov/win32-provider </para>
            <para>有关 WMI Events，参考：https://docs.microsoft.com/zh-cn/windows/win32/wmisdk/determining-the-type-of-event-to-receive </para>
            <para>有关 WQL 语法，参考：https://docs.microsoft.com/zh-cn/windows/win32/wmisdk/wql-sql-for-wmi?redirectedfrom=MSDN </para>
            </summary>
        </member>
        <member name="F:SpaceCG.Extension.ManagementExtension.LocalPath">
            <summary>
            \\.\Root\CIMV2
            <para>System.Management.ManagementScope 的服务器和命名空间。</para>
            </summary>
        </member>
        <member name="F:SpaceCG.Extension.ManagementExtension.InstanceCreationEvent">
            <summary> ManagementEventWatcher Object </summary>
        </member>
        <member name="F:SpaceCG.Extension.ManagementExtension.InstanceDeletionEvent">
            <summary> ManagementEventWatcher Object </summary>
        </member>
        <member name="M:SpaceCG.Extension.ManagementExtension.ListenInstanceChange(System.String,System.TimeSpan,System.Action{System.Management.ManagementBaseObject})">
            <summary>
            监听 "__InstanceCreationEvent" AND "__InstanceDeletionEvent" 事件；请使用 <see cref="M:SpaceCG.Extension.ManagementExtension.RemoveInstanceChange"/> 移除监听
            <para>示例：$"TargetInstance ISA 'Win32_PnPEntity'"    //监听即插即用设备状态，有关 Win32_PnPEntity(WMI类) 属性参考：https://docs.microsoft.com/en-us/windows/win32/cimwin32prov/win32-pnpentity </para>
            <para>示例：$"TargetInstance ISA 'Win32_PnPEntity' AND TargetInstance.Name LIKE '%({Serial.PortName})'"    //监听即插即用设备状态，且名称为串口名称</para>
            <para>示例：$"TargetInstance ISA 'Win32_LogicalDisk' AND TargetInstance.DriveType = 2 OR TargetInstance.DriveType = 4"  //监听移动硬盘状态 </para>
            <para>更多 WMI 类，请参考：https://docs.microsoft.com/en-us/windows/win32/cimwin32prov/computer-system-hardware-classes </para>
            </summary>
            <param name="wql_condition">要应用到指定类的事件的条件。WQL 条件语句，关于 WQL 参考：https://docs.microsoft.com/zh-cn/windows/win32/wmisdk/wql-sql-for-wmi?redirectedfrom=MSDN </param>
            <param name="withinInterval">指定对于接收此事件而言所能接受的滞后时间。该值用于以下情况：对于所请求的查询没有显式事件提供程序，并且需要 WMI 轮询条件。该间隔是在必须发送事件通知之前可以经过的最长时间。</param>
            <param name="changeCallback"></param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:SpaceCG.Extension.ManagementExtension.ListenInstanceChange(System.String,System.Action{System.Management.ManagementBaseObject})">
            <summary>
            监听 "__InstanceCreationEvent" AND "__InstanceDeletionEvent" 事件；请使用 <see cref="M:SpaceCG.Extension.ManagementExtension.RemoveInstanceChange"/> 移除监听
            <para>示例：$"TargetInstance ISA 'Win32_PnPEntity'"    //监听即插即用设备状态，有关 Win32_PnPEntity(WMI类) 属性参考：https://docs.microsoft.com/en-us/windows/win32/cimwin32prov/win32-pnpentity </para>
            <para>示例：$"TargetInstance ISA 'Win32_PnPEntity' AND TargetInstance.Name LIKE '%({Serial.PortName})'"    //监听即插即用设备状态，且名称为串口名称</para>
            <para>示例：$"TargetInstance ISA 'Win32_LogicalDisk' AND TargetInstance.DriveType = 2 OR TargetInstance.DriveType = 4"  //监听移动硬盘状态 </para>
            <para>更多 WMI 类，请参考：https://docs.microsoft.com/en-us/windows/win32/cimwin32prov/computer-system-hardware-classes </para>
            </summary>
            <param name="wql_condition">要应用到指定类的事件的条件。WQL 条件语句，关于 WQL 参考：https://docs.microsoft.com/zh-cn/windows/win32/wmisdk/wql-sql-for-wmi?redirectedfrom=MSDN </param>
            <param name="changeCallback"></param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:SpaceCG.Extension.ManagementExtension.ListenInstanceChangeAsync(System.String,System.TimeSpan,System.Action{System.Management.ManagementBaseObject})">
            <summary>
            监听 "__InstanceCreationEvent" AND "__InstanceDeletionEvent" 事件；请使用 <see cref="M:SpaceCG.Extension.ManagementExtension.RemoveInstanceChange"/> 移除监听
            <para>示例：$"TargetInstance ISA 'Win32_PnPEntity'"    //监听即插即用设备状态，有关 Win32_PnPEntity(WMI类) 属性参考：https://docs.microsoft.com/en-us/windows/win32/cimwin32prov/win32-pnpentity </para>
            <para>示例：$"TargetInstance ISA 'Win32_PnPEntity' AND TargetInstance.Name LIKE '%({Serial.PortName})'"    //监听即插即用设备状态，且名称为串口名称</para>
            <para>示例：$"TargetInstance ISA 'Win32_LogicalDisk' AND TargetInstance.DriveType = 2 OR TargetInstance.DriveType = 4"  //监听移动硬盘状态 </para>
            <para>更多 WMI 类，请参考：https://docs.microsoft.com/en-us/windows/win32/cimwin32prov/computer-system-hardware-classes </para>
            </summary>
            <param name="wql_condition">要应用到指定类的事件的条件。WQL 条件语句，关于 WQL 参考：https://docs.microsoft.com/zh-cn/windows/win32/wmisdk/wql-sql-for-wmi?redirectedfrom=MSDN </param>
            <param name="withinInterval">指定对于接收此事件而言所能接受的滞后时间。该值用于以下情况：对于所请求的查询没有显式事件提供程序，并且需要 WMI 轮询条件。该间隔是在必须发送事件通知之前可以经过的最长时间。</param>
            <param name="changeCallback"></param>
            <param name="Log"></param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:SpaceCG.Extension.ManagementExtension.RemoveInstanceChange">
            <summary>
            移除并销毁 由 <see cref="!:ListenInstanceChange(string, TimeSpan, Action&lt;ManagementBaseObject&gt;, log4net.ILog)"/> 创建的监听。
            <para>移除监听 "__InstanceCreationEvent" AND "__InstanceDeletionEvent" 事件</para>
            </summary>
        </member>
        <member name="F:SpaceCG.Extension.ManagementExtension.InstanceModificationEvent">
            <summary> ManagementEventWatcher Object </summary>
        </member>
        <member name="M:SpaceCG.Extension.ManagementExtension.ListenInstanceModification(System.String,System.TimeSpan,System.Action{System.Management.ManagementBaseObject})">
            <summary>
            监听 "__InstanceModificationEvent" 事件 （持续监听事件，按自定义时间间隔查询）
            <para>请使用 <see cref="M:SpaceCG.Extension.ManagementExtension.RemoveInstanceModification"/> 移除监听 </para>
            <para>示例：$"TargetInstance ISA 'Win32_Battery'"    //持续监听电池状态，EstimatedChargeRemaining 表示电池电量；更多 Win32_Battery 类的属性，请参考：https://docs.microsoft.com/en-us/windows/win32/cimwin32prov/win32-battery </para>
            <para>更多 WMI 类，请参考：https://docs.microsoft.com/en-us/windows/win32/cimwin32prov/computer-system-hardware-classes </para>
            </summary>
            <param name="wql_condition">要应用到指定类的事件的条件。WQL 条件语句，关于 WQL 参考：https://docs.microsoft.com/zh-cn/windows/win32/wmisdk/wql-sql-for-wmi?redirectedfrom=MSDN </param>
            <param name="withinInterval">指定对于接收此事件而言所能接受的滞后时间。该值用于以下情况：对于所请求的查询没有显式事件提供程序，并且需要 WMI 轮询条件。该间隔是在必须发送事件通知之前可以经过的最长时间。</param>
            <param name="changeCallback"></param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:SpaceCG.Extension.ManagementExtension.ListenInstanceModification(System.String,System.Action{System.Management.ManagementBaseObject})">
            <summary>
            监听 "__InstanceModificationEvent"(继承 "__InstanceOperationEvent") 事件 （持续监听事件，按固定 1s 查询一次状态生成事件）；有关事件请参考：https://docs.microsoft.com/zh-cn/windows/win32/wmisdk/--instancemodificationevent 
            <para>请使用 RemoveInstanceModification 移除监听 </para>
            <para>示例：$"TargetInstance ISA 'Win32_Battery'"    //持续监听电池状态，EstimatedChargeRemaining 表示电池电量表示电池电量；更多 Win32_Battery 类的属性，请参考：https://docs.microsoft.com/en-us/windows/win32/cimwin32prov/win32-battery </para>
            <para>更多 WMI 类，请参考：https://docs.microsoft.com/en-us/windows/win32/cimwin32prov/computer-system-hardware-classes </para>
            </summary>
            <param name="wql_condition">要应用到指定类的事件的条件。WQL 条件语句，关于 WQL 参考：https://docs.microsoft.com/zh-cn/windows/win32/wmisdk/wql-sql-for-wmi?redirectedfrom=MSDN </param>
            <param name="changeCallback"></param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:SpaceCG.Extension.ManagementExtension.ListenInstanceModificationAsync(System.String,System.TimeSpan,System.Action{System.Management.ManagementBaseObject})">
            <summary>
            监听 "__InstanceModificationEvent" 事件 （持续监听事件，按自定义时间间隔查询）
            <para>请使用 <see cref="M:SpaceCG.Extension.ManagementExtension.RemoveInstanceModification"/> 移除监听 </para>
            <para>示例：$"TargetInstance ISA 'Win32_Battery'"    //持续监听电池状态，EstimatedChargeRemaining 表示电池电量；更多 Win32_Battery 类的属性，请参考：https://docs.microsoft.com/en-us/windows/win32/cimwin32prov/win32-battery </para>
            <para>更多 WMI 类，请参考：https://docs.microsoft.com/en-us/windows/win32/cimwin32prov/computer-system-hardware-classes </para>
            </summary>
            <param name="wql_condition">要应用到指定类的事件的条件。WQL 条件语句，关于 WQL 参考：https://docs.microsoft.com/zh-cn/windows/win32/wmisdk/wql-sql-for-wmi?redirectedfrom=MSDN </param>
            <param name="withinInterval">指定对于接收此事件而言所能接受的滞后时间。该值用于以下情况：对于所请求的查询没有显式事件提供程序，并且需要 WMI 轮询条件。该间隔是在必须发送事件通知之前可以经过的最长时间。</param>
            <param name="changeCallback"></param>
            <param name="Log"></param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:SpaceCG.Extension.ManagementExtension.RemoveInstanceModification">
            <summary>
            移除并销毁 由 <see cref="!:ListenInstanceChange(string, TimeSpan, Action&lt;ManagementBaseObject&gt;, log4net.ILog)"/> 创建的监听。
            <para>移除监听 "__InstanceModificationEvent" 事件</para>
            </summary>
        </member>
        <member name="M:SpaceCG.Extension.ManagementExtension.GetClassProperties(System.String)">
            <summary>
            获取 ManagementClass 的属性
            </summary>
            <param name="path">WMI 类的路径。该类表示 WMI 中的一个 CIM 管理类。CIM 类表示包括硬件、软件、进程等在内的管理信息。
                <para>系统硬件类参考：https://docs.microsoft.com/zh-cn/windows/win32/cimwin32prov/computer-system-hardware-classes </para>
                <para>操作系统类参考：https://docs.microsoft.com/zh-cn/windows/win32/cimwin32prov/operating-system-classes </para>
                <para>性能计数器类参考：https://docs.microsoft.com/zh-cn/windows/win32/cimwin32prov/performance-counter-classes </para>
                <para>WMI服务管理类参考：https://docs.microsoft.com/zh-cn/windows/win32/cimwin32prov/wmi-service-management-classes </para>
            </param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.Extension.ManagementExtension.Searcher(System.String)">
            <summary>
            调用指定的 WMI 查询并返回结果
            </summary>
            <param name="query">对象将调用的 WMI 查询</param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.Extension.ManagementExtension.Searcher(System.String,System.String,System.String[])">
            <summary>
            
            </summary>
            <param name="path">WMI 类的路径。该类表示 WMI 中的一个 CIM 管理类。CIM 类表示包括硬件、软件、进程等在内的管理信息。
                <para>系统硬件类参考：https://docs.microsoft.com/zh-cn/windows/win32/cimwin32prov/computer-system-hardware-classes </para>
                <para>操作系统类参考：https://docs.microsoft.com/zh-cn/windows/win32/cimwin32prov/operating-system-classes </para>
                <para>性能计数器类参考：https://docs.microsoft.com/zh-cn/windows/win32/cimwin32prov/performance-counter-classes </para>
                <para>WMI服务管理类参考：https://docs.microsoft.com/zh-cn/windows/win32/cimwin32prov/wmi-service-management-classes </para>
            </param>
            <param name="conditions"></param>
            <param name="properties">需要输出的 WMI 类的属性值，为空表示所有属性</param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.Extension.ManagementExtension.GetProcessorInfo">
            <summary>
            获取 CPU处理器 信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.Extension.ManagementExtension.GetBaseBoardInfo">
            <summary>
            获取主板信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.Extension.ManagementExtension.GetPortNames">
            <summary>
            获取当前计算机的 串行端口 完整名称 的数组
            <para>与 <see cref="M:System.IO.Ports.SerialPort.GetPortNames"/> 不同，SerialPort.GetPortNames() 只输出类似"COM3,COM4,COMn"，该函数输出串口对象的名称或是驱动名，类似："USB Serial Port (COM3)" ... </para>
            <para>这只是 WMI 示例应用函数，用于查询 串口名称 信息。更多应用参考 WMI。</para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.Extension.ManagementExtension.GetPortNamesAsync">
            <summary>
            获取当前计算机的 串行端口 完整名称 的数组
            <para>与 <see cref="M:System.IO.Ports.SerialPort.GetPortNames"/> 不同，SerialPort.GetPortNames() 只输出类似"COM3,COM4,COMn"，该函数输出串口对象的名称或是驱动名，类似："USB Serial Port (COM3)" ... </para>
            <para>这只是 WMI 示例应用函数，用于查询 串口名称 信息。更多应用参考 WMI。</para>
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpaceCG.Extension.PerformanceExtension">
            <summary>
            <see cref="T:System.Diagnostics.PerformanceCounter"/>, <see cref="T:System.Diagnostics.PerformanceCounterCategory"/>
            </summary>
        </member>
        <member name="M:SpaceCG.Extension.PerformanceExtension.ToDebugPCCs">
            <summary>
            检索输出本地计算机上注册的 性能计数器 类别的列表 PerformanceCounterCategory.GetCategories()。
            </summary>
        </member>
        <member name="M:SpaceCG.Extension.PerformanceExtension.ToDebug(System.Diagnostics.PerformanceCounter)">
            <summary>
            输出 性能计数器组件 信息
            </summary>
            <param name="pc"></param>
        </member>
        <member name="M:SpaceCG.Extension.PerformanceExtension.ToDebug(System.Diagnostics.PerformanceCounter[])">
            <summary>
            输出 性能计数器组件 信息
            </summary>
            <param name="pcs"></param>
        </member>
        <member name="M:SpaceCG.Extension.PerformanceExtension.ToDebug(System.Diagnostics.PerformanceCounterCategory)">
            <summary>
            输出 CategoryName(类别) 不能为空的 性能计数器组件 信息 
            </summary>
            <param name="pcc"></param>
        </member>
        <member name="T:SpaceCG.Extension.SerialPortExtension">
            <summary>
            SerialPort 串口 扩展/实用/通用 函数
            </summary>
        </member>
        <member name="F:SpaceCG.Extension.SerialPortExtension.SerialErrorDescriptions">
            <summary>
            串口 Serial_ErrorReceived 事件的错误描述信息
            </summary>
        </member>
        <member name="M:SpaceCG.Extension.SerialPortExtension.CreateInstance(System.String,System.Action{System.IO.Ports.SerialPort,System.Byte[]},System.Int32,System.Boolean)">
            <summary>
            根据构造函数配置，创建一个串口实例，并简单设置/监听相关参数。如果只关心数据的接收/处理，适用此方法，其它事件状态会记录在日志中。
            <para>建议使用 <see cref="!:CloseAndDispose(ref SerialPort, log4net.ILog)"/> 清理该实例。</para>
            </summary>
            <param name="config">串口构造函数参数，参见 <see cref="T:System.IO.Ports.SerialPort"/> 构造函数。
                <para>参数顺序："portName, baudRate, Parity, dataBits, StopBits"，按顺序不得少于 1 个参数，如果只有一个参数时，第二个参数 baudRate 将默认为 9600。示例："COM3", "COM3,115200", "COM3,9600,0"</para>
                <para>注意：如果构造函数参数不正确，或不规范，将抛出 <see cref="T:System.ArgumentNullException"/> 或 <see cref="T:System.ArgumentException"/> 异常信息。</para>
            </param>
            <param name="dataReceivedCallback">数据接收回调，为 null 时，不监听 <see cref="E:System.IO.Ports.SerialPort.DataReceived"/> 事件。</param>
            <param name="receivedBytesThreshold">接收字节阀值，对象在收到这样长度的数据之后会触发事件 (<see cref="E:System.IO.Ports.SerialPort.DataReceived"/>) 处理函数
                <para>获取或设置 <see cref="E:System.IO.Ports.SerialPort.DataReceived"/> 事件发生前内部输入缓冲区中的字节数。</para>
                <para><see cref="E:System.IO.Ports.SerialPort.DataReceived"/> 事件触发前内部输入缓冲区中的字节数；默认值为 1，可跟据数据设计大小定义。</para>
            </param>
            <param name="ignoreOpenError">是否忽略由 <see cref="M:System.IO.Ports.SerialPort.Open"/> 产生的异常，为监听设备热插拔自动重新连接做准备，参见：<see cref="M:SpaceCG.Extension.SerialPortExtension.AutoReconnection(System.IO.Ports.SerialPort)"/>。
                <para>如果为 true 则产生的异常信息会记录在日志中，否则会抛出异常信息。</para>
            </param>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns> 返回串口对象 </returns>
        </member>
        <member name="M:SpaceCG.Extension.SerialPortExtension.AutoReconnection(System.IO.Ports.SerialPort)">
            <summary>
            串口设备热插拔自动重新连接
            <para>使用 ManagementEventWatcher WQL 事件监听模式</para>
            </summary>
            <param name="serialPort"></param>
        </member>
        <member name="M:SpaceCG.Extension.SerialPortExtension.AutoReconnection(System.IO.Ports.SerialPort,System.Windows.Window)">
            <summary>
            串口设备热插拔自动重新连接
            <para>使用 HwndSource Hook Window Message #WM_DEVICECHANGE 事件监听模式</para>
            </summary>
            <param name="serialPort"></param>
            <param name="window">IsLoaded 为 True 的窗口对象</param>
        </member>
        <member name="M:SpaceCG.Extension.SerialPortExtension.CloseAndDispose(System.IO.Ports.SerialPort@)">
            <summary>
            关闭并清理 由 <see cref="M:SpaceCG.Extension.SerialPortExtension.CreateInstance(System.String,System.Action{System.IO.Ports.SerialPort,System.Byte[]},System.Int32,System.Boolean)"/> 创建的串口实例
            <para>注意：静态函数，引用参数 serialPort, 该方法会将 实例变量 设为 null </para>
            </summary>
            <param name="serialPort"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:SpaceCG.Extension.SerialPortExtension.CloseAndDispose(System.IO.Ports.SerialPort)">
            <summary>
            关闭并清理 由 <see cref="M:SpaceCG.Extension.SerialPortExtension.CreateInstance(System.String,System.Action{System.IO.Ports.SerialPort,System.Byte[]},System.Int32,System.Boolean)"/> 创建的串口实例
            <para>注意：扩展函数，需手动将实例变量设为 null</para>
            </summary>
            <param name="serialPort"></param>
        </member>
        <member name="M:SpaceCG.Extension.SerialPortExtension.GetPortNames">
            <summary>
            获取当前计算机的 串行端口 完整名称 的数组
            <para>与 <see cref="M:System.IO.Ports.SerialPort.GetPortNames"/> 函数不同，<see cref="M:System.IO.Ports.SerialPort.GetPortNames"/> 只输出类似"COM3,COM4,COMn"；该函数输出串口对象的名称或是驱动名，类似："USB Serial Port (COM3)" ... </para>
            <para>这只是 WMI 示例应用函数，用于查询 串口名称 信息。更多应用参考 WMI。</para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.Extension.SerialPortExtension.GetPortNamesAsync">
            <summary>
            获取当前计算机的 串行端口 完整名称 的数组
            <para><see cref="M:SpaceCG.Extension.SerialPortExtension.GetPortNames"/> 的异步方法</para>
            <para>这只是 WMI 示例应用函数，用于查询 串口名称 信息。更多应用参考 WMI。</para>
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpaceCG.Extension.IEnumerableExtension">
            <summary>
            LINQ 扩展 扩展/实用/通用
            </summary>
        </member>
        <member name="M:SpaceCG.Extension.IEnumerableExtension.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            获取指定对象在此集合中的位置索引
            <para>注意：该函数是直接使用泛型类的 Equals 方法比较对象</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.Extension.IEnumerableExtension.Median(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            迭代中间值
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="T:SpaceCG.Extension.WindowExtension">
            <summary>
            窗体 扩展/实用/通用 函数
            </summary>
        </member>
        <member name="M:SpaceCG.Extension.WindowExtension.SettingWindowState(System.Windows.Window,System.String)">
            <summary>
            设置窗体显示状态，主要用于 <code>ConfigurationManager.AppSettings["WindowState"]</code> 配置使用；例 SettingWindowState("1,0,0,2");
            <para>读取配置文件 key:WindowState，值是数值数组 [Topmost, WindowStyle, ResizeMode, WindowState]，对应转换为枚举值和Boolean值</para>
            <para>【Topmost】窗口是否显示在最顶层 z 顺序；  
                0：窗口不置顶；
                1：窗口置顶
            </para>  
            <para>【WindowStyle】窗口的边框样式；
                0：全屏，仅工作区可见(该标题栏和边框不会显示)；
                1：有一个边框的窗口；
                2：具有 三维 边框的窗口；
                3：内置的工具窗口；
            </para>
            <para>【ResizeMode】窗口大小调整模式；
                0：窗口不能调整大小；
                1：只能将和还原窗口；
                2：窗口的大小进行调整；
                3：窗口的大小进行调整；
            </para>
            <para>【WindowState】是否还原窗口中，最小化、最大化；
                0：还原窗口
                1：窗口最小化
                2：窗口最大化
            </para>
            </summary>
            <param name="window"></param>
            <param name="config">配置参数值</param>
            <exception cref="T:System.OverflowException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:SpaceCG.Extension.WindowExtension.SettingWindowState(System.Windows.Window,System.Boolean,System.Windows.WindowStyle,System.Windows.ResizeMode,System.Windows.WindowState)">
            <summary>
            设置窗体的基本显示参数
            </summary>
            <param name="window"></param>
            <param name="topmost">窗口是否出现在 Z 顺序的最顶层 </param>
            <param name="style">窗口的边框样式</param>
            <param name="mode">窗口大小调整模式</param>
            <param name="state">窗口是处于还原、最小化还是最大化状态</param>
        </member>
        <member name="T:SpaceCG.General.BetweenAndDataAnalysePattern`2">
            <summary>
            在 包头 和 包尾 之间，数据分析模式适配器基类
            </summary>
            <typeparam name="TChannelKey"></typeparam>
            <typeparam name="TResultType"></typeparam>
        </member>
        <member name="F:SpaceCG.General.BetweenAndDataAnalysePattern`2.StartBoyerMoore">
            <summary>
            Start Boyer Moore
            </summary>
        </member>
        <member name="F:SpaceCG.General.BetweenAndDataAnalysePattern`2.EndBoyerMoore">
            <summary>
            End Boyer Moore
            </summary>
        </member>
        <member name="M:SpaceCG.General.BetweenAndDataAnalysePattern`2.#ctor(System.Collections.Generic.IReadOnlyList{System.Byte},System.Collections.Generic.IReadOnlyList{System.Byte})">
            <summary>
            在 包头 和 包尾 之间，数据分析适配器
            </summary>
            <param name="start">包头数据</param>
            <param name="end">包尾数据</param>
        </member>
        <member name="M:SpaceCG.General.BetweenAndDataAnalysePattern`2.AnalyseChannel(`0,System.Collections.Generic.IReadOnlyList{System.Byte},SpaceCG.General.AnalyseResultHandler{`0,`1})">
            <inheritdoc/>
        </member>
        <member name="M:SpaceCG.General.BetweenAndDataAnalysePattern`2.ConvertResultType(System.Collections.Generic.List{System.Byte})">
            <summary>
            通道数据块转换数据类型
            </summary>
            <param name="body">主体源数据</param>
            <returns></returns>
        </member>
        <member name="T:SpaceCG.General.BetweenAndDataAnalyse`1">
            <summary>
            在 包头 和 包尾 之间，原始数据分析模式适配器
            </summary>
            <typeparam name="TChannelKey"></typeparam>
        </member>
        <member name="M:SpaceCG.General.BetweenAndDataAnalyse`1.#ctor(System.Collections.Generic.IReadOnlyList{System.Byte},System.Collections.Generic.IReadOnlyList{System.Byte})">
            <summary>
            在 包头 和 包尾 之间，数据分析适配器
            </summary>
            <param name="start">包头数据</param>
            <param name="end">包尾数据</param>
        </member>
        <member name="M:SpaceCG.General.BetweenAndDataAnalyse`1.ConvertResultType(System.Collections.Generic.List{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="T:SpaceCG.General.BetweenAndStringAnalyse`1">
            <summary>
            在 包头 和 包尾 之间，字符分析模式适配器
            </summary>
            <typeparam name="TChannelKey"></typeparam>
        </member>
        <member name="M:SpaceCG.General.BetweenAndStringAnalyse`1.#ctor(System.String,System.String)">
            <summary>
            两端字符分析模式适配器
            </summary>
            <param name="start">开始字符</param>
            <param name="end">结束字符</param>
        </member>
        <member name="M:SpaceCG.General.BetweenAndStringAnalyse`1.ConvertResultType(System.Collections.Generic.List{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="T:SpaceCG.General.Channel`2">
            <summary>
            数据通道对象
            </summary>
            <typeparam name="TChannelKey">通道键类型</typeparam>
            <typeparam name="TDataType">数据类型</typeparam>
        </member>
        <member name="P:SpaceCG.General.Channel`2.Key">
            <summary>
            通道的唯一标识键
            </summary>
        </member>
        <member name="P:SpaceCG.General.Channel`2.Cache">
            <summary>
            缓存容器实例
            <para>不建议直接操作该实例，而是调用 <see cref="T:SpaceCG.General.Channel`2"/> 的方法操作缓存实例</para>
            </summary>
        </member>
        <member name="P:SpaceCG.General.Channel`2.MaxSize">
            <summary>
            最大缓存数据大小
            </summary>
        </member>
        <member name="P:SpaceCG.General.Channel`2.Offset">
            <summary>
            数据处理的偏移量 (内部索引)
            <para>在 <see cref="P:SpaceCG.General.Channel`2.Offset"/> 左侧的数据不会处理，只会溢出移除</para>
            <para>函数 <see cref="M:SpaceCG.General.Channel`2.GetRange(System.Int32,System.Int32,System.Boolean)"/>, <see cref="M:SpaceCG.General.Channel`2.RemoveRange(System.Int32,System.Int32)"/> ... 的参数 index 属于外部索引</para>
            </summary>
        </member>
        <member name="P:SpaceCG.General.Channel`2.Available">
            <summary>
            有效元素大小/可读取的数据大小
            <para> <see cref="P:SpaceCG.General.Channel`2.Available"/> = <see cref="!:Cache.Count"/> - <see cref="P:SpaceCG.General.Channel`2.Offset"/></para>
            </summary>
        </member>
        <member name="M:SpaceCG.General.Channel`2.#ctor(`0)">
            <summary>
            数据通道对象，默认最大缓存元素大小 1024 
            </summary>
            <param name="key">通道键类型</param>
        </member>
        <member name="M:SpaceCG.General.Channel`2.#ctor(`0,System.Int32)">
            <summary>
            数据通道对象
            </summary>
            <param name="key">通道键类型</param>
            <param name="maxSize">通道缓存大小</param>
        </member>
        <member name="M:SpaceCG.General.Channel`2.CheckOverflow">
            <summary>
            检查溢出。如果溢出，则清除多余的数据，从最先入缓存处计算
            <para> 如果有清除数据，则 <see cref="P:SpaceCG.General.Channel`2.Offset"/> 也会向左移动，移动范围为清除数据的大小</para>
            </summary>
        </member>
        <member name="M:SpaceCG.General.Channel`2.Add(`1)">
            <summary>
            添加数据到缓存结尾
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:SpaceCG.General.Channel`2.AddRange(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            添加数据到缓存结尾
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:SpaceCG.General.Channel`2.GetRange(System.Int32,System.Boolean)">
            <summary>
            获取部份缓存数据，从 <see cref="P:SpaceCG.General.Channel`2.Offset"/> 处开始的 size 大小，移除会修改 <see cref="P:SpaceCG.General.Channel`2.Offset"/> 值。
            <para>如果参数错误，则返回 null ；如果可读取的数据小于 size ，则返回可读取的数据部份</para>
            </summary>
            <param name="size">从 <see cref="P:SpaceCG.General.Channel`2.Offset"/> 处开始的元素数量</param>
            <param name="remove">是否从缓存中移除返回的数据大小，实则调用 <see cref="M:SpaceCG.General.Channel`2.RemoveRange(System.Int32)"/></param>
            <returns>返回从 <see cref="P:SpaceCG.General.Channel`2.Offset"/> 处开始的元素数量</returns>
        </member>
        <member name="M:SpaceCG.General.Channel`2.GetRange(System.Int32,System.Int32,System.Boolean)">
            <summary>
            获取部份缓存数据，从 index 处开始的 size 元素数量，移除不会修改 <see cref="P:SpaceCG.General.Channel`2.Offset"/> 值。
            <para>如果参数错误，则返回 null ；如果可读取的数据小于 size ，则返回可读取的数据部份</para>
            </summary>
            <param name="index">范围开始处的从零开始的索引</param>
            <param name="size">范围中的元素数量</param>
            <param name="remove">是否从缓存中移除返回的数据大小，实则调用 <see cref="M:SpaceCG.General.Channel`2.RemoveRange(System.Int32,System.Int32)"/></param>
            <returns>返回从 index 处开始的 size 元素数量</returns>
        </member>
        <member name="M:SpaceCG.General.Channel`2.RemoveRange(System.Int32)">
            <summary>
            从缓存中移除部份数据，从 <see cref="P:SpaceCG.General.Channel`2.Offset"/> 处开始移除数据，<see cref="P:SpaceCG.General.Channel`2.Offset"/> 会向左偏移被移除的数量
            </summary>
            <param name="size">移除数据的数量</param>
        </member>
        <member name="M:SpaceCG.General.Channel`2.RemoveRange(System.Int32,System.Int32)">
            <summary>
            从缓存中移除部份数据，从 index 处开始移除数据，<see cref="P:SpaceCG.General.Channel`2.Offset"/> 不会被修改
            </summary>
            <param name="index">范围开始处的从零开始的索引</param>
            <param name="size">移除数据的数量</param>
        </member>
        <member name="M:SpaceCG.General.Channel`2.Clear">
            <summary>
            清除通道所有缓存的数据，设置 <see cref="P:SpaceCG.General.Channel`2.Offset"/> 为 0
            </summary>
        </member>
        <member name="M:SpaceCG.General.Channel`2.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="T:SpaceCG.General.AnalyseResultHandler`2">
            <summary>
            数据分析产生结果时调用的代理函数
            <para>返回结果如果 true 表示清除这部份的缓存数据，否则会存储在缓存中，直到缓存大小超出 最大缓存 才会被移除</para>
            </summary>
            <typeparam name="TChannelKey">通道键类型</typeparam>
            <typeparam name="TResultType">返回的数据结果类型</typeparam>
            <param name="key">通道的唯一标识键</param>
            <param name="result">分析产生的数据结果</param>
            <returns> 返回结果如果 true 表示清除这部份的缓存数据，否则会存储在缓存中，直到缓存大小超出 最大缓存 才会被移除 </returns>
        </member>
        <member name="T:SpaceCG.General.AbstractDataAnalyseAdapter`3">
            <summary>
            抽象类，多通道数据分析适配器(支持多线程)
            <para>该类为抽象类，需继承实现 <see cref="M:SpaceCG.General.AbstractDataAnalyseAdapter`3.AnalyseChannel(`0,System.Collections.Generic.IReadOnlyList{`1},SpaceCG.General.AnalyseResultHandler{`0,`2})"/>, <see cref="M:SpaceCG.General.AbstractDataAnalyseAdapter`3.ConvertResultType(System.Collections.Generic.IReadOnlyList{`1},System.Object[])"/> 函数</para>
            </summary>
            <typeparam name="TChannelKey">通道键类型</typeparam>
            <typeparam name="TDataType">数据类型</typeparam>
            <typeparam name="TResultType">数据结果封装类型</typeparam>
        </member>
        <member name="F:SpaceCG.General.AbstractDataAnalyseAdapter`3.Channels">
            <summary>
            多通道数据缓存字典
            </summary>
        </member>
        <member name="M:SpaceCG.General.AbstractDataAnalyseAdapter`3.AddChannel(`0)">
            <summary>
            添加一个数据分析通道
            </summary>
            <param name="key">通道的唯一标识键，不能为 null 值，或无效引用</param>
            <returns>添加成功返回 true </returns>
        </member>
        <member name="M:SpaceCG.General.AbstractDataAnalyseAdapter`3.AddChannel(`0,System.Int32)">
            <summary>
            添加一个数据分析通道
            </summary>
            <param name="key">通道的唯一标识键，不能为 null 值，或无效引用</param>
            <param name="maxSize">缓存数据的最大容量</param>
            <returns> 添加成功返回 true </returns>
        </member>
        <member name="M:SpaceCG.General.AbstractDataAnalyseAdapter`3.GetChannel(`0)">
            <summary>
            获取数据通道对象；不会抛出异常信息，如果通道不存在，则返回 null 值
            </summary>
            <param name="key">通道的唯一标识键，不能为 null 值，或无效引用</param>
            <returns> </returns>
        </member>
        <member name="M:SpaceCG.General.AbstractDataAnalyseAdapter`3.RemoveChannel(`0)">
            <summary>
            移除一个数据分析通道，移除会清除缓存数据
            </summary>
            <param name="key">通道的唯一标识键，不能为 null 值，或无效引用</param>
            <returns>移除成功返回 true </returns>
        </member>
        <member name="M:SpaceCG.General.AbstractDataAnalyseAdapter`3.ClearChannels">
            <summary>
            清除所有通道，及其通道缓存数据
            </summary>
        </member>
        <member name="M:SpaceCG.General.AbstractDataAnalyseAdapter`3.AnalyseChannel(`0,System.Collections.Generic.IReadOnlyList{`1},SpaceCG.General.AnalyseResultHandler{`0,`2})">
            <summary>
            分析指定通道的数据
            <para>考虑到如果在线程中运行，不建议抛出异常信息，直接返回 bool 值，参数错误 或 数据错误 返回 false</para>
            </summary>
            <param name="key">通道的唯一标识键，不能为 null 值，或无效引用</param>
            <param name="data">需要分析或缓存的数据</param>
            <param name="analyseResultHandler">分析产生结果时的代理调用</param>
            <exception cref="T:System.ArgumentNullException">参数不能为空</exception>
            <returns> 返回数据分析状态 </returns>
        </member>
        <member name="M:SpaceCG.General.AbstractDataAnalyseAdapter`3.ConvertResultType(System.Collections.Generic.IReadOnlyList{`1},System.Object[])">
            <summary>
            通道数据块转换数据类型
            </summary>
            <param name="packet">数据包</param>
            <param name="args">更多数据包</param>
            <returns> 返回数据结果 </returns>
        </member>
        <member name="T:SpaceCG.General.BoyerMoore">
            <summary>
            Boyer-Moore 算法实现。该算法查找原始 单字节(Max 0xFF)集合 效率非常非常高；如果匹配的 pattern 集合长度为 1 或很少，也不建议使用该方法
            <para>字符匹配查找：类方法 (Search*) 使用的是数组，类静态方法 (BoyerMoore.Search*) 参数 tSize 大于 0xFF 时使用字典，小于等于 0xFF 时使用数组</para>
            <para>类查找函数会检查参数，但不会抛出异常，结果返回 索引或索引集合，-1 表示没查找到；适合在 for, while, 等循环体或重复搜索 对性能要求较高的环境中使用；
                静态查找函数会检查参数类型并抛出异常，不生成使用好后缀表，只使用坏字符表。
            </para>
            <para>参考：https://baike.baidu.com/item/Boyer-%20Moore%E7%AE%97%E6%B3%95/16548374?fr=aladdin </para>
            <para>参考：https://www.cnblogs.com/gaochundong/p/boyer_moore_string_matching_algorithm.html </para>
            </summary>
        </member>
        <member name="F:SpaceCG.General.BoyerMoore.CAPACITY">
            <summary>
            返回的索引集合列表，默认初使最大可以存储的元素数量
            </summary>
        </member>
        <member name="P:SpaceCG.General.BoyerMoore.PatternLength">
            <summary>
            匹配数据的长度
            </summary>
        </member>
        <member name="F:SpaceCG.General.BoyerMoore.badTable">
            <summary>
            能过 <see cref="M:SpaceCG.General.BoyerMoore.GetBadCharacterShift(System.Collections.Generic.IReadOnlyList{System.Byte})"/> 生成的 坏字符表 (Bad Character Heuristic)
            </summary>
        </member>
        <member name="F:SpaceCG.General.BoyerMoore.goodTable">
            <summary>
            通过 <see cref="M:SpaceCG.General.BoyerMoore.GetGoodSuffixShift``1(System.Collections.Generic.IReadOnlyList{``0})"/> 生成的 好后缀表 (Good Suffix Heuristic)
            </summary>
        </member>
        <member name="F:SpaceCG.General.BoyerMoore.patternChars">
            <summary>
            需要匹配的字符数据
            </summary>
        </member>
        <member name="F:SpaceCG.General.BoyerMoore.patternBytes">
            <summary>
            需要匹配的字节数据
            </summary>
        </member>
        <member name="M:SpaceCG.General.BoyerMoore.#ctor">
            <summary>
            Boyer-Moore (BM) 匹配查找算法
            <para>适合大量数据匹配查找，数据量越大，效率越高</para>
            </summary>
        </member>
        <member name="M:SpaceCG.General.BoyerMoore.#ctor(System.Collections.Generic.IReadOnlyList{System.Byte})">
            <summary>
            Boyer-Moore (BM) 匹配查找算法
            <para>适合大量数据匹配查找，数据量越大，效率越高</para>
            </summary>
            <param name="pattern">需要匹配的数据</param>
        </member>
        <member name="M:SpaceCG.General.BoyerMoore.#ctor(System.String@,System.UInt32)">
            <summary>
            Boyer-Moore (BM) 匹配查找算法
            <para>适合大量数据匹配查找，数据量越大，效率越高</para>
            </summary>
            <param name="pattern">需要匹配的数据</param>
            <param name="tSize">坏字符 (Bad Character Heuristic) 表的大小，取决于字符 (Unicode 字符的16位值序列) 的最大值，如果是英文和符号字符的全集是 0xFF 大小，中文字符的全集就是 0xFFFF 大小；
                <para>建议全英文符号字符集可直接设置为 0xFF 大小；中文字符两种方案：1.取中文字符的最大值 2.使用中文字符字典；如果使用中文字符全集，将会达到 0xFFFF 大小的数组</para>
                <para>类方法使用的是数组，类静态方法小于等于 0xFF 使用字典，大于 0xFF 使用字典</para>
            </param>
        </member>
        <member name="M:SpaceCG.General.BoyerMoore.Finalize">
            <summary>
            析构函数
            </summary>
        </member>
        <member name="M:SpaceCG.General.BoyerMoore.ClearParams">
            <summary>
            清理一些变量和数组
            </summary>
        </member>
        <member name="M:SpaceCG.General.BoyerMoore.ResetPattern(System.String@,System.UInt32)">
            <summary>
            设置需要匹配数据
            </summary>
            <param name="pattern"></param>
            <param name="tSize">坏字符 (Bad Character Heuristic) 表的大小，取决于字符 (Unicode 字符的16位值序列) 的最大值，如果是英文和符号字符的全集是 0xFF 大小，中文字符的全集就是 0xFFFF 大小；
                <para>建议全英文符号字符集可直接设置为 0xFF 大小；中文字符两种方案：1.取中文字符的最大值 2.使用中文字符字典；如果使用中文字符全集，将会达到 0xFFFF 大小的数组</para>
                <para>构造函数方法使用的是数组</para>
            </param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:SpaceCG.General.BoyerMoore.ResetPattern(System.Collections.Generic.IReadOnlyList{System.Byte})">
            <summary>
            设置需要匹配数据
            </summary>
            <param name="pattern"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:SpaceCG.General.BoyerMoore.Search(System.String@,System.Int32,System.Int32)">
            <summary>
            在 source 中的 start 到 end 的位置中查找匹配 pattern 第一次出现的位置并返回，如果返回 -1 表示跟据参数条件没匹配到
            <para>Boyer-Moore 算法实现，与静态方法 <see cref="M:SpaceCG.General.BoyerMoore.Search(System.String@,System.String@,System.UInt32,System.Int32,System.Int32)"/> 不一样，该方法同时生成并使用了 坏字符（Bad Character Heuristic） 和 好后缀（Good Suffix Heuristic）表</para>
            </summary>
            <param name="source">数据源</param>
            <param name="start">从 source 指定的起始位置开始匹配查找</param>
            <param name="end">到 source 指定的结束位置停止匹配查找</param>
            <returns> 返回 -1 表示没匹配到 </returns>
        </member>
        <member name="M:SpaceCG.General.BoyerMoore.Search(System.Collections.Generic.IReadOnlyList{System.Byte},System.Int32,System.Int32)">
            <summary>
            在 source 中的 start 到 end 的位置中查找匹配 pattern 第一次出现的位置并返回，如果返回 -1 表示跟据参数条件没匹配到
            <para>Boyer-Moore 算法实现，与静态方法 <see cref="M:SpaceCG.General.BoyerMoore.Search(System.Collections.Generic.IReadOnlyList{System.Byte},System.Collections.Generic.IReadOnlyList{System.Byte},System.Int32,System.Int32)"/> 不一样，该方法同时生成并使用了 坏字符（Bad Character Heuristic） 和 好后缀（Good Suffix Heuristic）表</para>
            </summary>
            <param name="source">数据源</param>
            <param name="start">从 source 指定的起始位置开始匹配查找</param>
            <param name="end">到 source 指定的结束位置停止匹配查找</param>
            <returns> 返回 -1 表示没匹配到 </returns>
        </member>
        <member name="M:SpaceCG.General.BoyerMoore.SearchAt(System.String@,System.Int32,System.Int32,System.Int32)">
            <summary>
            查找第 rCount 次匹配到的位置索引，如果第 rCount 次的匹配不存在，则返回 -1
            <para> 相当于 <see cref="M:SpaceCG.General.BoyerMoore.SearchAll(System.String@,System.Int32,System.Int32)"/>[rCount - 1]，但不做全面查找；如果 rCount = 1 则与 <see cref="M:SpaceCG.General.BoyerMoore.Search(System.String@,System.Int32,System.Int32)"/> 相同 </para>
            </summary>
            <param name="source">数据源</param>
            <param name="rCount">如果存在匹配项，则匹配到第 rCount 次后结束</param>
            <param name="start">从 source 指定的起始位置开始匹配查找</param>
            <param name="end">到 source 指定的结束位置停止匹配查找</param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.General.BoyerMoore.SearchAt(System.Collections.Generic.IReadOnlyList{System.Byte},System.Int32,System.Int32,System.Int32)">
            <summary>
            查找第 rCount 次匹配到的位置索引，如果第 rCount 次的匹配不存在，则返回 -1 
            <para> 相当于 <see cref="M:SpaceCG.General.BoyerMoore.SearchAll(System.Collections.Generic.IReadOnlyList{System.Byte},System.Int32,System.Int32)"/>[rCount - 1]，但不做全面查找；如果 rCount = 1 则与 <see cref="M:SpaceCG.General.BoyerMoore.Search(System.Collections.Generic.IReadOnlyList{System.Byte},System.Int32,System.Int32)"/> 相同 </para>
            </summary>
            <param name="source">数据源</param>
            <param name="rCount">如果存在匹配项，则匹配到第 rCount 次后结束</param>
            <param name="start">从 source 指定的起始位置开始匹配查找</param>
            <param name="end">到 source 指定的结束位置停止匹配查找</param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.General.BoyerMoore.SearchAll(System.String@,System.Int32,System.Int32)">
            <summary>
            在 source 中查找匹配 pattern 的所有位置的集合，返回 空集合 表示没匹配到
            <para>Boyer-Moore 算法实现，与静态方法 <see cref="M:SpaceCG.General.BoyerMoore.SearchAll(System.String@,System.String@,System.UInt32,System.Int32,System.Int32)"/> 不一样，该方法同时生成并使用了 坏字符（Bad Character Heuristic） 和 好后缀（Good Suffix Heuristic）表</para>
            </summary>
            <param name="source">数据源</param>
            <param name="start">从 source 指定的起始位置开始匹配查找</param>
            <param name="end">到 source 指定的结束位置停止匹配查找</param>
            <returns> 返回 空集合 表示没匹配到 </returns>
        </member>
        <member name="M:SpaceCG.General.BoyerMoore.SearchAll(System.Collections.Generic.IReadOnlyList{System.Byte},System.Int32,System.Int32)">
            <summary>
            在 source 中查找匹配 pattern 的所有位置的集合，返回 空集合 表示没匹配到
            <para>Boyer-Moore 算法实现，与静态方法 <see cref="M:SpaceCG.General.BoyerMoore.SearchAll(System.Collections.Generic.IReadOnlyList{System.Byte},System.Collections.Generic.IReadOnlyList{System.Byte},System.Int32,System.Int32)"/> 不一样，该方法同时生成并使用了 坏字符（Bad Character Heuristic） 和 好后缀（Good Suffix Heuristic）表</para>
            </summary>
            <param name="source">数据源</param>
            <param name="start">从 source 指定的起始位置开始匹配查找</param>
            <param name="end">到 source 指定的结束位置停止匹配查找</param>
            <returns> 返回 空集合 表示没匹配到 </returns>
        </member>
        <member name="M:SpaceCG.General.BoyerMoore.DebugTrace(System.String@,System.String@,System.Int32)">
            <summary>
            调试输出匹配过程
            </summary>
            <param name="source"></param>
            <param name="pattern"></param>
            <param name="index"></param>
        </member>
        <member name="M:SpaceCG.General.BoyerMoore.DebugTrace``1(System.Collections.Generic.IReadOnlyList{``0},System.Collections.Generic.IReadOnlyList{``0},System.Int32)">
            <summary>
            调试输出匹配过程
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="pattern"></param>
            <param name="index"></param>
        </member>
        <member name="M:SpaceCG.General.BoyerMoore.GetBadCharacterShift(System.String@,System.UInt32)">
            <summary>
            获取 坏字符 (Bad Character Heuristic) 表
            </summary>
            <param name="pattern">需要匹配的数据内容</param>
            <param name="size">坏字符 (Bad Character Heuristic) 表的大小，取决于字符 (Unicode 字符的16位值序列) 的最大值，如果是英文和符号字符的全集，是 0xFF 大小；如果是中文字符的全集就是 0xFFFF 大小；
                <para>建议全英文符号字符集可直接设置为 0xFF 大小；中文字符两种方案：1.取中文字符的最大值 2.使用中文字符字典；如果使用中文字符全集，将会达到 0xFFFF 大小的数组</para>
            </param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.General.BoyerMoore.GetBadCharacterShift(System.Collections.Generic.IReadOnlyList{System.Byte})">
            <summary>
            获取 坏字符 (Bad Character Heuristic) 表
            </summary>
            <param name="pattern">需要匹配的数据内容</param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.General.BoyerMoore.GetBadCharacterShift``1(System.Collections.Generic.IReadOnlyList{``0},System.Boolean)">
            <summary>
            获取 坏字符 (Bad Character Heuristic) 表，该方法返回的是字典类型集合
            </summary>
            <typeparam name="T">基数据类型</typeparam>
            <param name="pattern">需要匹配的数据内容</param>
            <param name="useThreadSafe">是否使用 可由多个线程同时访问的 键/值对 的 线程安全集合</param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.General.BoyerMoore.GetGoodSuffixShift(System.String@)">
            <summary>
            获取 好后缀 (Good Suffix Heuristic) 表
            </summary>
            <param name="pattern">需要匹配的数据内容</param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.General.BoyerMoore.GetGoodSuffixShift``1(System.Collections.Generic.IReadOnlyList{``0})">
            <summary>
            获取 好后缀 (Good Suffix Heuristic) 表
            </summary>
            <param name="pattern">需要匹配的数据内容</param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.General.BoyerMoore.Search(System.String@,System.String@,System.UInt32,System.Int32,System.Int32)">
            <summary>
            在 source 中的 start 到 end 的位置中查找匹配 pattern 第一次出现的位置并返回，如果返回 -1 表示跟据参数条件没匹配到；tSize 大于 0xFF 时会使用字典做为表
            <para>Boyer-Moore-Horspool 算法实现，是 Boyer-Moore 算法 的简化版本，只用到了 坏字符（Bad Character Heuristic）表</para>
            </summary>
            <param name="source">数据源</param>
            <param name="pattern">需要匹配的数据</param>
            <param name="tSize">坏字符 (Bad Character Heuristic) 表的大小，取决于字符 (Unicode 字符的16位值序列) 的最大值；如果是英文和符号字符的全集是 0xFF 大小，中文字符的全集就是 0xFFFF 大小；
                <para>建议全英文符号字符集可直接设置为 0xFF 大小；中文字符两种方案：1.取中文字符的最大值 2.使用中文字符字典；如果使用中文字符全集，将会达到 0xFFFF 大小的数组</para>
                <para>静态函数使用的是综合方案：即大于 0xFF 就会使用字典表；构造函数方法使用的是数组；</para>
            </param>
            <param name="start">从 source 指定的起始位置开始匹配查找</param>
            <param name="end">到 source 指定的结束位置停止匹配查找</param>
            <exception cref="T:System.ArgumentNullException">空参数错误</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">起始结束匹配位置设置错误，超出查找匹配界限范围</exception>
            <returns> 返回 -1 表示没匹配到 </returns>        
        </member>
        <member name="M:SpaceCG.General.BoyerMoore.Search(System.Collections.Generic.IReadOnlyList{System.Byte},System.Collections.Generic.IReadOnlyList{System.Byte},System.Int32,System.Int32)">
            <summary>
            在 source 中的 start 到 end 的位置中查找匹配 pattern 第一次出现的位置并返回，如果返回 -1 表示跟据参数条件没匹配到
            <para>Boyer-Moore-Horspool 算法实现，是 Boyer-Moore 算法 的简化版本，只用到了 坏字符（Bad Character Heuristic）表</para>
            </summary>
            <param name="source">数据源</param>
            <param name="pattern">需要匹配的数据</param>
            <param name="start">从 source 指定的起始位置开始匹配查找</param>
            <param name="end">到 source 指定的结束位置停止匹配查找</param>
            <exception cref="T:System.ArgumentNullException">空参数错误</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">起始结束匹配位置设置错误，超出查找匹配界限范围</exception>
            <returns> 返回 -1 表示没匹配到 </returns>
        </member>
        <member name="M:SpaceCG.General.BoyerMoore.SearchAll(System.String@,System.String@,System.UInt32,System.Int32,System.Int32)">
            <summary>
            在 source 中查找匹配 pattern 的所有位置的集合，返回 空集合 表示没匹配到；tSize 大于 0xFF 时会使用字典做为表
            <para>Boyer-Moore-Horspool 算法实现，是 Boyer-Moore 算法 的简化版本，只用到了 坏字符（Bad Character Heuristic）表</para>
            </summary>
            <param name="source">数据源</param>
            <param name="pattern">需要匹配的数据</param>
            <param name="tSize">坏字符 (Bad Character Heuristic) 表的大小，取决于字符 (Unicode 字符的16位值序列) 的最大值；如果是英文和符号字符的全集是 0xFF 大小，中文字符的全集就是 0xFFFF 大小；
                <para>建议全英文符号字符集可直接设置为 0xFF 大小；中文字符两种方案：1.取中文字符的最大值 2.使用中文字符字典；如果使用中文字符全集，将会达到 0xFFFF 大小的数组</para>
                <para>静态函数使用的是综合方案：即大于 0xFF 就会使用字典表；构造函数方法使用的是数组；</para>
            </param>
            <param name="start">从 source 指定的起始位置开始匹配查找</param>
            <param name="end">到 source 指定的结束位置停止匹配查找</param>
            <exception cref="T:System.ArgumentNullException">空参数错误</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">起始结束匹配位置设置错误，超出查找匹配界限范围</exception>
            <returns> 返回 空集合 表示没匹配到 </returns>
        </member>
        <member name="M:SpaceCG.General.BoyerMoore.SearchAll(System.Collections.Generic.IReadOnlyList{System.Byte},System.Collections.Generic.IReadOnlyList{System.Byte},System.Int32,System.Int32)">
            <summary>
            在 source 中查找匹配 pattern 的所有位置的集合，返回 空集合 表示没匹配到
            <para>Boyer-Moore-Horspool 算法实现，是 Boyer-Moore 算法 的简化版本，只用到了 坏字符（Bad Character Heuristic）表</para>
            </summary>
            <param name="source">数据源</param>
            <param name="pattern">需要匹配的数据</param>
            <param name="start">从 source 指定的起始位置开始匹配查找</param>
            <param name="end">到 source 指定的结束位置停止匹配查找</param>
            <exception cref="T:System.ArgumentNullException">空参数错误</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">起始结束匹配位置设置错误，超出查找匹配界限范围</exception>
            <returns> 返回 空集合 表示没匹配到 </returns>
        </member>
        <member name="T:SpaceCG.General.BoyerMoore`1">
            <summary>
            Boyer-Moore 算法实现，<see cref="T:SpaceCG.General.BoyerMoore"/> 的泛型版本，泛型版本使用的是字典作为 好字符 表，而不是使用数组
            <para>适合 集合数据 与 集合数据 的查找，在 source 集合中查找 pattern 集合相同位置、相同数据的索引；与 <see cref="T:SpaceCG.General.BoyerMoore"/> 类一样 Search*() 方法不会抛出异常信息，只会返回结果</para>
            <para>集合数据的元素对比 是使用 <see cref="M:System.Object.Equals(System.Object)"/> 的方法，所以自定义基数据类型(比如自定义结构数据类型)，需要实现应该方法</para>
            </summary>
            <typeparam name="T">基本数据类型，自定义基数据类型(比如自定义结构数据类型)，需要实现 <see cref="M:System.Object.Equals(System.Object)"/> 方法</typeparam>
        </member>
        <member name="P:SpaceCG.General.BoyerMoore`1.PatternLength">
            <summary>
            匹配数据的长度
            </summary>
        </member>
        <member name="F:SpaceCG.General.BoyerMoore`1.pattern">
            <summary>
            需要匹配的数据
            </summary>
        </member>
        <member name="F:SpaceCG.General.BoyerMoore`1.badTable">
            <summary>
            通过 <see cref="M:SpaceCG.General.BoyerMoore.GetBadCharacterShift``1(System.Collections.Generic.IReadOnlyList{``0},System.Boolean)"/> 生成的 坏字符表 (Bad Character Heuristic)
            </summary>
        </member>
        <member name="F:SpaceCG.General.BoyerMoore`1.goodTable">
            <summary>
            通过 <see cref="M:SpaceCG.General.BoyerMoore.GetGoodSuffixShift``1(System.Collections.Generic.IReadOnlyList{``0})"/> 生成的 好后缀表 (Good Suffix Heuristic)
            </summary>
        </member>
        <member name="F:SpaceCG.General.BoyerMoore`1.useThreadSafe">
            <summary>
            是否使用 可由多个线程同时访问的 键/值对 的 线程安全集合
            </summary>
        </member>
        <member name="M:SpaceCG.General.BoyerMoore`1.#ctor">
            <summary>
            BoyerMoore 泛型版本
            </summary>
        </member>
        <member name="M:SpaceCG.General.BoyerMoore`1.Finalize">
            <summary>
            析构函数
            </summary>
        </member>
        <member name="M:SpaceCG.General.BoyerMoore`1.ClearParams">
            <summary>
            清理参数
            </summary>
        </member>
        <member name="M:SpaceCG.General.BoyerMoore`1.#ctor(System.Collections.Generic.IReadOnlyList{`0})">
            <summary>
            BoyerMoore 泛型版本
            </summary>
        </member>
        <member name="M:SpaceCG.General.BoyerMoore`1.ResetPattern(System.Collections.Generic.IReadOnlyList{`0},System.Boolean)">
            <summary>
            设置需要匹配数据
            </summary>
            <param name="pattern"></param>
            <param name="useThreadSafe">是否使用 可由多个线程同时访问的 键/值对 的 线程安全集合</param>
        </member>
        <member name="M:SpaceCG.General.BoyerMoore`1.Search(System.Collections.Generic.IReadOnlyList{`0},System.Int32,System.Int32)">
            <summary>
            在 source 中的 start 到 end 的位置中查找匹配 pattern 第一次出现的位置并返回，如果返回 -1 表示跟据参数条件没匹配到
            </summary>
            <param name="source">数据源</param>
            <param name="start">从 source 指定的起始位置开始匹配查找</param>
            <param name="end">到 source 指定的结束位置停止匹配查找</param>
            <returns> 返回 -1 表示没匹配到 </returns>
        </member>
        <member name="M:SpaceCG.General.BoyerMoore`1.SearchAt(System.Collections.Generic.IReadOnlyList{`0},System.Int32,System.Int32,System.Int32)">
            <summary>
            查找第 rCount 次匹配到的位置索引，如果第 rCount 次的匹配不存在，则返回 -1 
            <para> 相当于 <see cref="M:SpaceCG.General.BoyerMoore`1.SearchAll(System.Collections.Generic.IReadOnlyList{`0},System.Int32,System.Int32)"/>[rCount - 1]，但不做全面查找；如果 rCount = 1 则与 <see cref="M:SpaceCG.General.BoyerMoore`1.Search(System.Collections.Generic.IReadOnlyList{`0},System.Int32,System.Int32)"/> 相同 </para>
            </summary>
            <param name="source">数据源</param>
            <param name="rCount">如果存在匹配项，则匹配到第 rCount 次后结束</param>
            <param name="start">从 source 指定的起始位置开始匹配查找</param>
            <param name="end">到 source 指定的结束位置停止匹配查找</param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.General.BoyerMoore`1.SearchAll(System.Collections.Generic.IReadOnlyList{`0},System.Int32,System.Int32)">
            <summary>
            在 source 中查找匹配 pattern 的所有位置的集合，返回 空集合 表示没匹配到
            </summary>
            <param name="source">数据源</param>
            <param name="start">从 source 指定的起始位置开始匹配查找</param>
            <param name="end">到 source 指定的结束位置停止匹配查找</param>
            <exception cref="T:System.InvalidOperationException">未设置需要匹配的数据</exception>
            <exception cref="T:System.ArgumentNullException">数据源不能为空，长度不得小于需要匹配数据长度</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">起始结束匹配位置设置错误，超出查找匹配界限范围</exception>
            <returns> 返回 空集合 表示没匹配到 </returns>
        </member>
        <member name="T:SpaceCG.General.FixedHeadDataAnalysePattern`2">
            <summary>
            数据包大小 = 固定包头大小 + 动态包体大小，固定包头数据分析模式适配器基类
            <para>跟据读取的包头(固定字节大小)内容，获取包体大小</para>
            </summary>
            <typeparam name="TChannelKey">通道键类型</typeparam>
            <typeparam name="TResultType">数据结果封装类型</typeparam>
        </member>
        <member name="F:SpaceCG.General.FixedHeadDataAnalysePattern`2.HeadSize">
            <summary>
            包头大小, 调用 <see cref="M:SpaceCG.General.FixedHeadDataAnalysePattern`2.GetBodySize(System.Collections.Generic.List{System.Byte})"/> 方法时候会返回动态包体大小；需要继承当前接口的类在构造函数中设置包头长度
            </summary>
        </member>
        <member name="F:SpaceCG.General.FixedHeadDataAnalysePattern`2.MaxPacketSize">
            <summary>
             数据包最大大小，如果 数据包大小(包头长度 + 包体长度) 大于该值，表示数据错误
            </summary>
        </member>
        <member name="M:SpaceCG.General.FixedHeadDataAnalysePattern`2.#ctor(System.Int32,System.Int32)">
            <summary>
            固定包头数据分析适配器
            <para>参数 headSize 必须大于 0, 参数 maxPacketSize 必须小于 最大缓存大小，且大于 动态包体大小，否则算数据异常，但不抛出异常，返回 false</para>
            </summary>
            <param name="headSize">包头字节 占 整体数据包的大小</param>
            <param name="maxPacketSize">整体数据包 预计 最大字节大小，超出则清除处理；注意：最大包大小不得超出最大缓存大小</param>
            <exception cref="T:System.ArgumentException">参数错误，参数 headSize 必须大于 0, 参数 maxPacketSize 必须小于缓存大小，且大于动态包体大小 + HeadSize </exception>
        </member>
        <member name="M:SpaceCG.General.FixedHeadDataAnalysePattern`2.AnalyseChannel(`0,System.Collections.Generic.IReadOnlyList{System.Byte},SpaceCG.General.AnalyseResultHandler{`0,`1})">
            <inheritdoc/>
        </member>
        <member name="M:SpaceCG.General.FixedHeadDataAnalysePattern`2.GetBodySize(System.Collections.Generic.List{System.Byte})">
            <summary>
            分析头部字节数据
            <para>因为字节端不确定，或是头部信息不确定，所以需要在这里实现分析头部数据并返回一个值</para>
            </summary>
            <param name="head">头部源数据</param>
            <returns>返回包主体字节大小</returns>
        </member>
        <member name="M:SpaceCG.General.FixedHeadDataAnalysePattern`2.ConvertResultType(System.Collections.Generic.List{System.Byte},System.Collections.Generic.List{System.Byte})">
            <summary>
            通道数据块转换数据类型
            </summary>
            <param name="head">头部源数据</param>
            <param name="body">主体源数据</param>
            <returns></returns>
        </member>
        <member name="T:SpaceCG.General.FixedHeadDataAnalyse`1">
            <summary>
            数据包大小 = 固定包头大小 + 动态包体大小，固定包头数据分析
            <para>跟据读取的包头(固定字节大小)内容，获取包体大小</para>
            </summary>
            <typeparam name="TChannelKey">通道键类型</typeparam>
        </member>
        <member name="M:SpaceCG.General.FixedHeadDataAnalyse`1.#ctor(System.Int32,System.Int32)">
            <summary>
            固定包头数据分析
            </summary>
            <param name="headSize">包头字节 占 整体数据包的大小</param>
            <param name="maxPacketSize">整体数据包 预计 最大字节大小，超出则清除处理，为 0 表示不做包的超出检测比较</param>
        </member>
        <member name="M:SpaceCG.General.FixedHeadDataAnalyse`1.GetBodySize(System.Collections.Generic.List{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:SpaceCG.General.FixedHeadDataAnalyse`1.ConvertResultType(System.Collections.Generic.List{System.Byte},System.Collections.Generic.List{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="T:SpaceCG.General.FixedSizeDataAnalysePattern`2">
            <summary>
            固定大小的数据分析模式适配器基类
            <para>按固定大小的字节数据做为一个数据包分析，无头无尾，按字节大小封包转换</para>
            </summary>
            <typeparam name="TChannelKey">通道键类型</typeparam>
            <typeparam name="TResultType">数据结果封装类型</typeparam>
        </member>
        <member name="F:SpaceCG.General.FixedSizeDataAnalysePattern`2.PacketSize">
            <summary>
            数据包固定大小
            </summary>
        </member>
        <member name="M:SpaceCG.General.FixedSizeDataAnalysePattern`2.#ctor(System.Int32)">
            <summary>
            固定包大小数据分析适配器
            </summary>
            <param name="packetSize">整体数据包固定大小</param>
            <exception cref="T:System.ArgumentException"> 参数错误，数据包不得小于 1 </exception>
        </member>
        <member name="M:SpaceCG.General.FixedSizeDataAnalysePattern`2.AnalyseChannel(`0,System.Collections.Generic.IReadOnlyList{System.Byte},SpaceCG.General.AnalyseResultHandler{`0,`1})">
            <inheritdoc/>
        </member>
        <member name="M:SpaceCG.General.FixedSizeDataAnalysePattern`2.ConvertResultType(System.Collections.Generic.List{System.Byte})">
            <summary>
            通道数据块转换数据类型
            </summary>
            <param name="packet">源数据包内容</param>
            <returns> 返回数据结果 </returns>
        </member>
        <member name="T:SpaceCG.General.FixedSizeDataAnalyse`1">
            <summary>
            固定大小的原始字节数据分析
            <para>按固定大小的字节数据做为一个数据包分析，无头无尾，按字节大小封包转换</para>
            </summary>
            <typeparam name="TChannelKey">通道键类型</typeparam>
        </member>
        <member name="M:SpaceCG.General.FixedSizeDataAnalyse`1.#ctor(System.Int32)">
            <summary>
            固定大小的原始字节数据分析
            </summary>
            <param name="packetSize">整体数据包固定大小</param>
        </member>
        <member name="M:SpaceCG.General.FixedSizeDataAnalyse`1.ConvertResultType(System.Collections.Generic.List{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="T:SpaceCG.General.FixedSizeStringAnalyse`1">
            <summary>
            固定长度的字符数据分析
            <para>按固定长度的字符做为一个数据包分析，无头无尾，按字节大小封包转换</para>
            </summary>
            <typeparam name="TChannelKey">通道键类型</typeparam>
        </member>
        <member name="M:SpaceCG.General.FixedSizeStringAnalyse`1.#ctor(System.Int32)">
            <summary>
            固定长度的字符数据分析
            </summary>
            <param name="packetSize">字符长度</param>
        </member>
        <member name="M:SpaceCG.General.FixedSizeStringAnalyse`1.ConvertResultType(System.Collections.Generic.List{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="T:SpaceCG.General.TerminatorDataAnalysePattern`2">
            <summary>
            跟据终止字节数据分割数据包的分析模式适配器基类
            </summary>
            <typeparam name="TChannelKey">通道键类型</typeparam>
            <typeparam name="TResultType">返回的数据结果类型</typeparam>
        </member>
        <member name="F:SpaceCG.General.TerminatorDataAnalysePattern`2.BoyerMoore">
            <summary>
            Terminator Boyer - Moore
            </summary>
        </member>
        <member name="M:SpaceCG.General.TerminatorDataAnalysePattern`2.#ctor(System.Collections.Generic.IReadOnlyList{System.Byte})">
            <summary>
            跟据终止字节数据，分割数据包分析适配器
            </summary>
            <param name="terminator">终止字节数据</param>
            <exception cref="T:System.ArgumentNullException">参数错误，参数 terminator 不能为空</exception>
        </member>
        <member name="M:SpaceCG.General.TerminatorDataAnalysePattern`2.AnalyseChannel(`0,System.Collections.Generic.IReadOnlyList{System.Byte},SpaceCG.General.AnalyseResultHandler{`0,`1})">
            <inheritdoc/>
        </member>
        <member name="M:SpaceCG.General.TerminatorDataAnalysePattern`2.ConvertResultType(System.Collections.Generic.List{System.Byte})">
            <summary>
            通道数据块转换数据类型
            </summary>
            <param name="packet">源数据包内容</param>
            <returns> 返回数据结果 </returns>
        </member>
        <member name="T:SpaceCG.General.TerminatorDataAnalyse`1">
            <summary>
            跟据终原始止字节数据分割数据包的分析模式适配器
            </summary>
            <typeparam name="TChannelKey">通道键类型</typeparam>
        </member>
        <member name="M:SpaceCG.General.TerminatorDataAnalyse`1.#ctor(System.Collections.Generic.IReadOnlyList{System.Byte})">
            <summary>
            跟据终止字节数据，分割数据包分析适配器
            </summary>
            <param name="terminator">终止字节数据</param>
            <exception cref="T:System.ArgumentNullException">参数错误，参数 terminator 不能为空</exception>
        </member>
        <member name="M:SpaceCG.General.TerminatorDataAnalyse`1.ConvertResultType(System.Collections.Generic.List{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="T:SpaceCG.General.TerminatorStringAnalyse`1">
            <summary>
            跟据终止字符数据分割数据包的分析模式适配器
            </summary>
            <typeparam name="TChannelKey"></typeparam>
        </member>
        <member name="M:SpaceCG.General.TerminatorStringAnalyse`1.#ctor(System.String)">
            <summary>
            跟据终止字符数据，分割数据包分析适配器
            </summary>
            <param name="terminator">终止字符数据</param>
            <exception cref="T:System.ArgumentNullException">参数错误，参数 terminator 不能为空</exception>
        </member>
        <member name="M:SpaceCG.General.TerminatorStringAnalyse`1.ConvertResultType(System.Collections.Generic.List{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="T:SpaceCG.Log4Net.Controls.MultiStringConverter">
            <summary>
            多字符值转换
            </summary>
        </member>
        <member name="T:SpaceCG.Log4Net.Controls.WidthConverter">
            <summary>
            ba la ba la
            </summary>
        </member>
        <member name="T:SpaceCG.Log4Net.Controls.ListBoxAppender">
            <summary>
            Log4Net WPF ListBox/ListView Appender
            </summary>
        </member>
        <member name="F:SpaceCG.Log4Net.Controls.ListBoxAppender.MaxLines">
            <summary>
            获取或设置最大可见行数
            </summary>
        </member>
        <member name="F:SpaceCG.Log4Net.Controls.ListBoxAppender.ListBox">
            <summary> ListBox </summary>
        </member>
        <member name="F:SpaceCG.Log4Net.Controls.ListBoxAppender.ListView">
            <summary> ListView </summary>
        </member>
        <member name="F:SpaceCG.Log4Net.Controls.ListBoxAppender.AppendHandlerDelegate">
            <summary> TextBox.AppendText Delegate Function </summary>
        </member>
        <member name="F:SpaceCG.Log4Net.Controls.ListBoxAppender.view">
            <summary>
            表格视图列的容器
            </summary>
        </member>
        <member name="F:SpaceCG.Log4Net.Controls.ListBoxAppender.ViewColumns">
            <summary>
            所有视图列的容器
            </summary>
        </member>
        <member name="M:SpaceCG.Log4Net.Controls.ListBoxAppender.#ctor(System.Windows.Controls.ListBox)">
            <summary>
            Log4Net Appender for WPF ListBox and ListView
            </summary>
            <param name="listBox"></param>
        </member>
        <member name="M:SpaceCG.Log4Net.Controls.ListBoxAppender.DefaultStyle(System.Windows.Controls.ListBox)">
            <summary>
            设置控件默认样式
            </summary>
            <param name="listBox"></param>
        </member>
        <member name="M:SpaceCG.Log4Net.Controls.ListBoxAppender.ListBox_MouseDoubleClick(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Mouse Double Cliek Copy to Clipboard
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SpaceCG.Log4Net.Controls.ListBoxAppender.#ctor(System.Windows.Controls.ListBox,System.Int32)">
            <summary>
            Log4Net Appender for WPF ListBox and ListView
            </summary>
            <param name="listBox"></param>
            <param name="maxLines">最大行数为 1024 行，默认为 512 行</param>
        </member>
        <member name="M:SpaceCG.Log4Net.Controls.ListBoxAppender.AppendLoggingEvent(log4net.Core.LoggingEvent)">
            <summary>
            添加日志事件对象
            </summary>
            <param name="loggingEvent"></param>
        </member>
        <member name="M:SpaceCG.Log4Net.Controls.ListBoxAppender.Append(log4net.Core.LoggingEvent)">
            <summary>
            @override
            </summary>
            <param name="loggingEvent"></param>
        </member>
        <member name="M:SpaceCG.Log4Net.Controls.ListBoxAppender.AppendHandler(log4net.Core.LoggingEvent)">
            <summary>
            Addend Logging Event
            </summary>
            <param name="loggingEvent"></param>
        </member>
        <member name="M:SpaceCG.Log4Net.Controls.ListBoxAppender.MenuItem_ClickHandler(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            MenuItem Click Handler
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SpaceCG.Log4Net.Controls.ListBoxAppender.CreateListViewContextMenu">
            <summary>
            Create ListView ContextMenu
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.Log4Net.Controls.ListBoxAppender.CreateColumn(System.String,System.String,System.Int32)">
            <summary>
            创建简单的 GridViewColumn 对象
            </summary>
            <param name="header"></param>
            <param name="path"></param>
            <param name="width"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.Log4Net.Controls.ListBoxAppender.CreateColumn(System.String,System.String[],System.String)">
            <summary>
            创建简单的 GridViewColumn 对象
            </summary>
            <param name="header"></param>
            <param name="paths"></param>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="T:SpaceCG.Log4Net.Controls.LoggerWindow">
            <summary>
            独立的日志窗体对象
            </summary>
        </member>
        <member name="F:SpaceCG.Log4Net.Controls.LoggerWindow.TextBox">
            <summary> TextBox </summary>
        </member>
        <member name="F:SpaceCG.Log4Net.Controls.LoggerWindow.ListView">
            <summary> ListView </summary>
        </member>
        <member name="F:SpaceCG.Log4Net.Controls.LoggerWindow.ListBoxAppender">
            <summary> ListBoxAppender </summary>
        </member>
        <member name="F:SpaceCG.Log4Net.Controls.LoggerWindow.MaxLines">
            <summary>
            最大显示行数
            </summary>
        </member>
        <member name="M:SpaceCG.Log4Net.Controls.LoggerWindow.#ctor(System.Int32)">
            <summary>
            Logger Window
            </summary>
            <param name="maxLines"></param>
        </member>
        <member name="M:SpaceCG.Log4Net.Controls.LoggerWindow.OnClosing(System.ComponentModel.CancelEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:SpaceCG.Log4Net.Controls.LoggerWindow.OnClosed(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:SpaceCG.Log4Net.Controls.LoggerWindow.OnInitializeControls">
            <summary>
            初使化 UI 控件
            </summary>
        </member>
        <member name="M:SpaceCG.Log4Net.Controls.LoggerWindow.AppendLoggingEvent(log4net.Core.LoggingEvent)">
            <summary>
            添加日志事件对象
            </summary>
            <param name="loggingEvent"></param>
        </member>
        <member name="M:SpaceCG.Log4Net.Controls.LoggerWindow.ClearLogger">
            <summary>
            清除日志列表内容
            </summary>
        </member>
        <member name="M:SpaceCG.Log4Net.Controls.LoggerWindow.ClearTextBox">
            <summary>
            清除 TextBox 内容
            </summary>
        </member>
        <member name="M:SpaceCG.Log4Net.Controls.LoggerWindow.ListView_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            ListView Select Changed Handler
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SpaceCG.Log4Net.Controls.LoggerWindow.LoggerWindow_Loaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Window Loaded Event Handler
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SpaceCG.Log4Net.Controls.LoggerWindow.WindowProcHandler(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Boolean@)">
            <summary>
            Window Process Handler
            </summary>
            <param name="hwnd"></param>
            <param name="msg"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <param name="handled"></param>
            <returns></returns>
        </member>
        <member name="T:SpaceCG.Log4Net.Controls.TextBoxAppender">
            <summary>
            Log4Net WPF TextBoxBase/TextBox/RichTextBox Appender
            </summary>
        </member>
        <member name="F:SpaceCG.Log4Net.Controls.TextBoxAppender.BgColor1">
            <summary> Backgroud Color 1 </summary>
        </member>
        <member name="F:SpaceCG.Log4Net.Controls.TextBoxAppender.BgColor2">
            <summary> Backgroud Color 2 </summary>
        </member>
        <member name="F:SpaceCG.Log4Net.Controls.TextBoxAppender.TextColor">
            <summary> Default Text Color 3 </summary>
        </member>
        <member name="F:SpaceCG.Log4Net.Controls.TextBoxAppender.InfoColor">
            <summary> Info Color </summary>
        </member>
        <member name="F:SpaceCG.Log4Net.Controls.TextBoxAppender.WarnColor">
            <summary> Warn Color </summary>
        </member>
        <member name="F:SpaceCG.Log4Net.Controls.TextBoxAppender.ErrorColor">
            <summary> Error Color </summary>
        </member>
        <member name="F:SpaceCG.Log4Net.Controls.TextBoxAppender.FatalColor">
            <summary> Fatal Color </summary>
        </member>
        <member name="F:SpaceCG.Log4Net.Controls.TextBoxAppender.MaxLines">
            <summary>
            获取或设置最大可见行数
            </summary>
        </member>
        <member name="F:SpaceCG.Log4Net.Controls.TextBoxAppender.TextBoxBase">
            <summary> TextBoxBase </summary>
        </member>
        <member name="F:SpaceCG.Log4Net.Controls.TextBoxAppender.AppendLoggingEventDelegate">
            <summary> TextBox.AppendText Delegate Function </summary>
        </member>
        <member name="M:SpaceCG.Log4Net.Controls.TextBoxAppender.#ctor(System.Windows.Controls.Primitives.TextBoxBase)">
            <summary>
            Log4Net Appender for WPF TextBoxBase(TextBox and RichTextBox)
            </summary>
            <param name="textBox"></param>
        </member>
        <member name="M:SpaceCG.Log4Net.Controls.TextBoxAppender.DefaultStyle(System.Windows.Controls.Primitives.TextBoxBase)">
            <summary>
            设置控件默认样式
            </summary>
            <param name="textBox"></param>
        </member>
        <member name="M:SpaceCG.Log4Net.Controls.TextBoxAppender.#ctor(System.Windows.Controls.Primitives.TextBoxBase,System.UInt32)">
            <summary>
            Log4Net Appender for WPF TextBoxBase 
            </summary>
            <param name="textBox"></param>
            <param name="maxLines">最大行数为 1024 行，默认为 512 行</param>
        </member>
        <member name="M:SpaceCG.Log4Net.Controls.TextBoxAppender.Append(log4net.Core.LoggingEvent)">
            <summary>
            @override
            </summary>
            <param name="loggingEvent"></param>
        </member>
        <member name="M:SpaceCG.Log4Net.Controls.TextBoxAppender.AppendLoggingEvent(log4net.Core.LoggingEvent)">
            <summary>
            TextBox Append LoggingEvent
            </summary>
            <param name="loggingEvent"></param>
        </member>
        <member name="M:SpaceCG.Log4Net.Controls.TextBoxAppender.GetColorBrush(log4net.Core.Level)">
            <summary>
            跟据 Level 获取颜色
            </summary>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.Log4Net.Controls.TextBoxAppender.GetBgColorBrush(log4net.Core.Level,System.Int32)">
            <summary>
            跟据 Level and Line 获取背景颜色
            </summary>
            <param name="level"></param>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.Log4Net.Controls.TextBoxAppender.GetBgColorBrush(log4net.Core.Level,System.Boolean)">
            <summary>
            跟据 Level and Change 获取背景颜色
            </summary>
            <param name="level"></param>
            <param name="change"></param>
            <returns></returns>
        </member>
        <member name="T:SpaceCG.Log4Net.Log4NetUtils">
            <summary>
            Log4Net 实用/通用 函数
            </summary>
        </member>
        <member name="M:SpaceCG.Log4Net.Log4NetUtils.ReserveFileCount(System.Int32,System.String,System.String)">
            <summary>
            保留目录中的文件数量
            <para>跟据文件创建日期排序，保留 count 个最新文件，超出 count 数量的文件删除</para>
            <para>注意：该函数是比较文件的创建日期</para>
            </summary>
            <param name="count">要保留的数量</param>
            <param name="path">文件目录，当前目录 "/" 表示，不可为空</param>
            <param name="searchPattern">只在目录中(不包括子目录)，查找匹配的文件；例如："*.jpg" 或 "temp_*.png"</param>
        </member>
        <member name="M:SpaceCG.Log4Net.Log4NetUtils.ReserveFileDays(System.Int32,System.String,System.String)">
            <summary>
            保留目录中的文件天数
            <para>跟据文件上次修时间起计算，保留 days 天的文件，超出 days 天的文件删除</para>
            <para>注意：该函数是比较文件的上次修改日期</para>
            </summary>
            <param name="days">保留天数</param>
            <param name="path">文件夹目录</param>
            <param name="searchPattern">文件匹配类型</param>
        </member>
        <member name="M:SpaceCG.Log4Net.Log4NetUtils.SerializeLoggingEvent(log4net.Core.LoggingEvent)">
            <summary>
            序列化 <see cref="T:log4net.Core.LoggingEvent"/> 对象
            </summary>
            <param name="logger">需要序列化的 <see cref="T:log4net.Core.LoggingEvent"/> 对象</param>
            <returns> 返回序列化后的字节数据 </returns>
        </member>
        <member name="M:SpaceCG.Log4Net.Log4NetUtils.DeserializeLoggingEvent(System.Byte[])">
            <summary>
            反序列化 <see cref="T:log4net.Core.LoggingEvent"/> 对象
            </summary>
            <param name="buffer">要反序列化的数据的流</param>
            <returns>返回 <see cref="T:log4net.Core.LoggingEvent"/> 对象</returns>
        </member>
        <member name="T:SpaceCG.SpaceCGUtils">
            <summary>
            SpaceCG 实用/通用 函数
            </summary>
        </member>
        <member name="F:SpaceCG.SpaceCGUtils.Log">
            <summary>
            SpaceCG Library Logger
            </summary>
        </member>
        <member name="M:SpaceCG.SpaceCGUtils.#cctor">
            <summary>
            静态构造函数
            </summary>
        </member>
        <member name="M:SpaceCG.SpaceCGUtils.RemoveAnonymousEvents(System.Object,System.String)">
            <summary>
            移除对象的匿名委托事件（Lambda 表达式 或 匿名方法来创建 的 匿名函数）
            </summary>
            <param name="instanceObj">对象实例</param>
            <param name="eventName">对象事件名称</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Examples.KeyboardHookEx.Initialize">
            <summary>
            initizlize
            </summary>
        </member>
        <member name="M:Examples.KeyboardHookEx.HookProcHandler(System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            
            </summary>
            <param name="nCode"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <returns></returns>
        </member>
        <member name="M:Examples.KeyboardHookEx.GetDownKeys">
            <summary>
            根据已经按下的控制键生成key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Examples.KeyboardHookEx.IsCtrlAltShiftKeys(SpaceCG.WindowsAPI.User32.VirtualKeyCode)">
            <summary>
            是否按下Ctrl,Alt,Shift等功能键
            </summary>
            <param name="vkCey"></param>
            <returns></returns>
        </member>
    </members>
</doc>
