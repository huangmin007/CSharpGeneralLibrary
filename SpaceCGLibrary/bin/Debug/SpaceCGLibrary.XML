<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SpaceCGLibrary</name>
    </assembly>
    <members>
        <member name="T:SpaceCG.Extension.ManagementExtension">
            <summary>
            System.Management 命名空间 扩展/实用/通用 函数
            <para>有关 WMI 类，请参考：https://docs.microsoft.com/en-us/windows/win32/cimwin32prov/computer-system-hardware-classes </para>
            <para>有关 WMI Events，请参考：https://docs.microsoft.com/zh-cn/windows/win32/wmisdk/determining-the-type-of-event-to-receive </para>
            <para>有关 WQL 语法，请参考：https://docs.microsoft.com/zh-cn/windows/win32/wmisdk/wql-sql-for-wmi?redirectedfrom=MSDN </para>
            </summary>
        </member>
        <member name="F:SpaceCG.Extension.ManagementExtension.InstanceCreationEvent">
            <summary> ManagementEventWatcher Object </summary>
        </member>
        <member name="F:SpaceCG.Extension.ManagementExtension.InstanceDeletionEvent">
            <summary> ManagementEventWatcher Object </summary>
        </member>
        <member name="M:SpaceCG.Extension.ManagementExtension.ListenInstanceChanged(System.String,System.Action{System.Management.ManagementBaseObject},log4net.ILog)">
            <summary>
            监听 "__InstanceCreationEvent" AND "__InstanceDeletionEvent" 事件；有关事件请参考：https://docs.microsoft.com/zh-cn/windows/win32/wmisdk/determining-the-type-of-event-to-receive
            <para>示例：$"TargetInstance ISA 'Win32_PnPEntity'"    //监听即插即用设备状态，有关 Win32_PnPEntity(WMI类) 属性参考：https://docs.microsoft.com/en-us/windows/win32/cimwin32prov/win32-pnpentity </para>
            <para>示例：$"TargetInstance ISA 'Win32_PnPEntity' AND TargetInstance.Name LIKE '%({Serial.PortName})'"    //监听即插即用设备状态，且名称为串口名称</para>
            <para>示例：$"TargetInstance ISA 'Win32_LogicalDisk' AND TargetInstance.DriveType = 2 OR TargetInstance.DriveType = 4"  //监听移动硬盘状态 </para>
            <para>更多 WMI 类，请参考：https://docs.microsoft.com/en-us/windows/win32/cimwin32prov/computer-system-hardware-classes </para>
            </summary>
            <param name="wql_condition">WQL 条件语句，关于 WQL 参考：https://docs.microsoft.com/zh-cn/windows/win32/wmisdk/wql-sql-for-wmi?redirectedfrom=MSDN </param>
            <param name="changedCallback"></param>
            <param name="Log"></param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:SpaceCG.Extension.ManagementExtension.RemoveInstanceChange">
            <summary>
            移除监听 "__InstanceCreationEvent" AND "__InstanceDeletionEvent" 事件
            </summary>
        </member>
        <member name="F:SpaceCG.Extension.ManagementExtension.InstanceModificationEvent">
            <summary> ManagementEventWatcher Object </summary>
        </member>
        <member name="M:SpaceCG.Extension.ManagementExtension.ListenInstanceModification(System.String,System.Action{System.Management.ManagementBaseObject},log4net.ILog)">
            <summary>
            监听 "__InstanceModificationEvent"(继承 "__InstanceOperationEvent") 事件 （持续监听事件，按固定 1s 查询一次状态生成事件）；有关事件请参考：https://docs.microsoft.com/zh-cn/windows/win32/wmisdk/--instancemodificationevent 
            <para>示例：$"TargetInstance ISA 'Win32_Battery'"    //持续监听电池状态，EstimatedChargeRemaining 表示电池电量表示电池电量；更多 Win32_Battery 类的属性，请参考：https://docs.microsoft.com/en-us/windows/win32/cimwin32prov/win32-battery </para>
            <para>更多 WMI 类，请参考：https://docs.microsoft.com/en-us/windows/win32/cimwin32prov/computer-system-hardware-classes </para>
            </summary>
            <param name="wql_condition">WQL 条件语句，关于 WQL 参考：https://docs.microsoft.com/zh-cn/windows/win32/wmisdk/wql-sql-for-wmi?redirectedfrom=MSDN </param>
            <param name="changedCallback"></param>
            <param name="Log"></param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:SpaceCG.Extension.ManagementExtension.ListenInstanceModification(System.String,System.TimeSpan,System.Action{System.Management.ManagementBaseObject},log4net.ILog)">
            <summary>
            监听 "__InstanceModificationEvent" 事件 （持续监听事件，按自定义时间间隔查询）
            <para>示例：$"TargetInstance ISA 'Win32_Battery'"    //持续监听电池状态，EstimatedChargeRemaining 表示电池电量；更多 Win32_Battery 类的属性，请参考：https://docs.microsoft.com/en-us/windows/win32/cimwin32prov/win32-battery </para>
            <para>更多 WMI 类，请参考：https://docs.microsoft.com/en-us/windows/win32/cimwin32prov/computer-system-hardware-classes </para>
            </summary>
            <param name="wql_condition">WQL 条件语句，关于 WQL 参考：https://docs.microsoft.com/zh-cn/windows/win32/wmisdk/wql-sql-for-wmi?redirectedfrom=MSDN </param>
            <param name="interval">按指定的间隔时间查询</param>
            <param name="changedCallback"></param>
            <param name="Log"></param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:SpaceCG.Extension.ManagementExtension.RemoveInstanceModification">
            <summary>
            移除监听 "__InstanceModificationEvent" 事件
            </summary>
        </member>
        <member name="M:SpaceCG.Extension.ManagementExtension.ListenWMIEvents(System.String,System.String,System.Action{System.Management.ManagementBaseObject},log4net.ILog)">
            <summary>
            
            </summary>
            <param name="wmi_event"></param>
            <param name="wql_condition"></param>
            <param name="changedCallback"></param>
            <param name="Log"></param>
        </member>
        <member name="M:SpaceCG.Extension.ManagementExtension.GetPortNames">
            <summary>
            这只是示例函数代码，用于查询 WMI 信息。更多 WMI 应用需自行思考。
            <para>获取当前计算机的串行端口名的数组，请使用 SerialPort.GetPortNames(); </para>
            </summary>
            <returns></returns>
        </member>
        <member name="T:SpaceCG.Extension.SerialPortExtension">
            <summary>
            SerialPort 串口 扩展/实用/通用 函数
            </summary>
        </member>
        <member name="F:SpaceCG.Extension.SerialPortExtension.SerialErrorDescriptions">
            <summary>
            串口 Serial_ErrorReceived 事件的错误描述信息
            </summary>
        </member>
        <member name="M:SpaceCG.Extension.SerialPortExtension.Create(System.String,System.Int32,log4net.ILog)">
            <summary>
            创建串口对象(根据配置)
            </summary>
            <param name="config">串口配置；示例："COM3,9600", "COM3,9600,0," 参数顺序："portName, baudRate, Parity, dataBits, StopBits"</param>
            <param name="receivedBytesThreshold">接收字节阀值，对象在收到这样长度的数据之后会触发事件处理函数
            <para>获取或设置 System.IO.Ports.SerialPort.DataReceived 事件发生前内部输入缓冲区中的字节数。</para>
            <para>System.IO.Ports.SerialPort.DataReceived 事件触发前内部输入缓冲区中的字节数，默认值为 1。</para>
            </param>
            <param name="Log">日志记录对象</param>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns> 返回一个根据配置设置好的串口对象 </returns>
        </member>
        <member name="M:SpaceCG.Extension.SerialPortExtension.OpenAndListen(System.IO.Ports.SerialPort,System.Action{System.Byte[]},log4net.ILog)">
            <summary>
            打开串口连接/数据接收。
            </summary>
            <param name="serialPort"></param>
            <param name="receivedCallback"></param>
            <param name="Log"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:SpaceCG.Extension.SerialPortExtension.CloseAndDispose(System.IO.Ports.SerialPort,log4net.ILog)">
            <summary>
            关闭清理串口
            </summary>
            <param name="serialPort"></param>
            <param name="Log">日志记录对象</param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:SpaceCG.Extension.IEnumerableExtension">
            <summary>
            LINQ 扩展 扩展/实用/通用
            </summary>
        </member>
        <member name="M:SpaceCG.Extension.IEnumerableExtension.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            获取指定对象在此集合中的位置索引
            <para>注意：该函数是直接使用泛型类的 Equals 方法比较对象</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.Extension.IEnumerableExtension.Median(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            迭代中间值
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="T:SpaceCG.Extension.WindowExtension">
            <summary>
            窗体 扩展/实用/通用 函数
            </summary>
        </member>
        <member name="M:SpaceCG.Extension.WindowExtension.SettingWindowState(System.Windows.Window,System.String)">
            <summary>
            设置窗体显示状态，主要用于 <code>ConfigurationManager.AppSettings["WindowState"]</code> 配置使用；例 SettingWindowState("1,0,0,2");
            <para>读取配置文件 key:WindowState，值是数值数组[Topmost,WindowStyle,ResizeMode,WindowState]，对应转换为枚举值和Boolean值</para>
            <para>【Topmost】窗口是否显示在最顶层 z 顺序；  
                0：窗口不置顶；
                1：窗口置顶
            </para>  
            <para>【WindowStyle】窗口的边框样式；
                0：全屏，仅工作区可见(该标题栏和边框不会显示)；
                1：有一个边框的窗口；
                2：具有 三维 边框的窗口；
                3：内置的工具窗口；
            </para>
            <para>【ResizeMode】窗口大小调整模式；
                0：窗口不能调整大小；
                1：只能将和还原窗口；
                2：窗口的大小进行调整；
                3：窗口的大小进行调整；
            </para>
            <para>【WindowState】是否还原窗口中，最小化、最大化；
                0：还原窗口
                1：窗口最小化
                2：窗口最大化
            </para>
            </summary>
            <param name="config">配置参数值</param>
            <exception cref="T:System.OverflowException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:SpaceCG.HPSocket.Common.PtrToAnsiString(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="P:SpaceCG.HPSocket.ErrorInfo.ErrorCode">
            <summary>
            错误码
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.ErrorInfo.ErrorMsg">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="M:SpaceCG.HPSocket.Extra`1.Get(System.IntPtr)">
            <summary>
            获取附加数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.Extra`1.Set(System.IntPtr,`0)">
            <summary>
            设置附加数据
            
            </summary>
            <param name="key"></param>
            <param name="newValue"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.Extra`1.Remove(System.IntPtr)">
            <summary>
            删除附加数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.ConnectionExtra.GetExtra(System.IntPtr)">
            <summary>
            获取附加数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.ConnectionExtra.GetExtra``1(System.IntPtr)">
            <summary>
            获取附加数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.ConnectionExtra.SetExtra(System.IntPtr,System.Object)">
            <summary>
            设置附加数据
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.ConnectionExtra.RemoveExtra(System.IntPtr)">
            <summary>
            删除附加数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HPThreadPool.Start(System.UInt32,SpaceCG.HPSocket.RejectedPolicy,System.UInt32,System.UInt32)">
            <summary>
            启动线程池组件
            </summary>
            <param name="threadCount">线程数量, 大于0 -> dwThreadCount, 等于0 -> (CPU核数* 2 + 2), 小于0 -> (CPU核数* (-threadCount))</param>
            <param name="policy">任务拒绝处理策略</param>
            <param name="maxQueueSize">任务队列最大容量（0：不限制，默认：0）</param>
            <param name="stackSize">线程堆栈空间大小（默认：0 -> 操作系统默认）</param>
            <returns>TRUE -- 成功,FALSE -- 失败，可通过 SYS_GetLastError() 获取系统错误代码</returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HPThreadPool.Stop(System.Int32)">
            <summary>
            在规定时间内关闭线程池组件，如果工作线程在最大等待时间内未能正常关闭，会尝试强制关闭，这种情况下很可能会造成系统资源泄漏
            </summary>
            <param name="maxWait">最大等待时间（毫秒，默认：INFINITE即-1，一直等待）</param>
            <returns>TRUE -- 成功,FALSE -- 失败，可通过 SYS_GetLastError() 获取系统错误代码</returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HPThreadPool.Submit(SpaceCG.HPSocket.TaskProc,System.IntPtr,System.Int32)">
            <summary>
            向线程池提交异步任务
            </summary>
            <param name="fnTaskProc">任务处理函数</param>
            <param name="args">任务参数</param>
            <param name="maxWait">最大等待时间（毫秒，默认：INFINITE即-1，一直等待）</param>
            <returns>TRUE -- 成功,FALSE -- 失败，可通过 SYS_GetLastError() 获取系统错误代码,其中，错误码 #ERROR_DESTINATION_ELEMENT_FULL 表示任务队列已满</returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HPThreadPool.CreateSocketTask(SpaceCG.HPSocket.SocketTaskProc,System.IntPtr,System.IntPtr,System.Byte[],System.Int32,SpaceCG.HPSocket.TaskBufferType,System.IntPtr,System.IntPtr)">
            <summary>
            创建 TSocketTask 对象
            创建任务对象，该对象最终需由 DestroySocketTask() 销毁
            </summary>
            <param name="socketTaskProc">任务入口函数</param>
            <param name="sender">发起对象, 如server, client,agent对象</param>
            <param name="connId">连接id</param>
            <param name="buffer">数据</param>
            <param name="bufferSize">数据长度</param>
            <param name="taskBufferType">数据类型</param>
            <param name="wParam">自定义参数</param>
            <param name="lParam">自定义参数</param>
            <returns>TRUE -- 成功,FALSE -- 失败，可通过 SYS_GetLastError() 获取系统错误代码,其中，错误码 ERROR_DESTINATION_ELEMENT_FULL 表示任务队列已满</returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HPThreadPool.DestroySocketTask(System.IntPtr)">
            <summary>
            销毁 TSocketTask 对象
            </summary>
            <param name="task"></param>
        </member>
        <member name="M:SpaceCG.HPSocket.HPThreadPool.SubmitSocketTask(System.IntPtr,System.Int32)">
            <summary>
             提交 Socket 任务
             向线程池提交异步 Socket 任务
            </summary>
            <param name="task">任务参数 HP_LPTSocketTask</param>
            <param name="maxWait">最大等待时间（毫秒，默认：INFINITE即-1，一直等待）</param>
            <returns>TRUE -- 成功,FALSE -- 失败，可通过 SYS_GetLastError() 获取系统错误代码,其中，错误码 ERROR_DESTINATION_ELEMENT_FULL 表示任务队列已满</returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HPThreadPool.SubmitSocketTask(SpaceCG.HPSocket.SocketTaskProc,System.IntPtr,System.IntPtr,System.Byte[],System.Int32,SpaceCG.HPSocket.TaskBufferType,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            创建 TSocketTask 对象并向线程池提交异步 Socket 任务
            </summary>
            <param name="socketTaskProc">任务入口函数</param>
            <param name="sender">发起对象, 如server, client,agent对象</param>
            <param name="connId">连接id</param>
            <param name="buffer">数据</param>
            <param name="bufferSize">数据长度</param>
            <param name="taskBufferType">数据类型</param>
            <param name="wParam">自定义参数</param>
            <param name="lParam">自定义参数</param>
            <param name="maxWait">最大等待时间（毫秒，默认：INFINITE即-1，一直等待）</param>
            <returns>TRUE -- 成功,FALSE -- 失败，可通过 SYS_GetLastError() 获取系统错误代码,其中，错误码 ERROR_DESTINATION_ELEMENT_FULL 表示任务队列已满</returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HPThreadPool.AdjustThreadCount(System.Int32)">
            <summary>
            增加或减少线程池的工作线程数量
            </summary>
            <param name="newThreadCount">线程数量, 大于0 -> dwNewThreadCount, 等于0 -> (CPU核数 * 2 + 2),小于0 -> (CPU核数 * (-dwNewThreadCount))</param>
            <returns>TRUE -- 成功,FALSE -- 失败，可通过 SYS_GetLastError() 获取系统错误代码</returns>
        </member>
        <member name="P:SpaceCG.HPSocket.HPThreadPool.ThreadCount">
            <summary>
            获取或设置线程池数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HPThreadPool.HasStarted">
            <summary>
            检查线程池组件是否已启动
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpaceCG.HPSocket.HPThreadPool.State">
            <summary>
            查看线程池组件当前状态
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.HPThreadPool.QueueSize">
            <summary>
            获取当前任务队列大小
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.HPThreadPool.MaxQueueSize">
            <summary>
            获取任务队列最大容量
            </summary>
        </member>
        <member name="M:SpaceCG.HPSocket.HPThreadPool.SYSGetLastError">
            <summary>
            获取系统返回的错误码
            </summary>
            <returns></returns>
        </member>
        <member name="E:SpaceCG.HPSocket.HttpAgent.OnMessageBegin">
            <summary>
            【可选】开始解析
            </summary>
        </member>
        <member name="E:SpaceCG.HPSocket.HttpAgent.OnHeader">
            <summary>
            【可选】请求头通知
            </summary>
        </member>
        <member name="E:SpaceCG.HPSocket.HttpAgent.OnChunkHeader">
            <summary>
            【可选】Chunked 报文头通知
            </summary>
        </member>
        <member name="E:SpaceCG.HPSocket.HttpAgent.OnChunkComplete">
            <summary>
            【可选】Chunked 报文结束通知
            </summary>
        </member>
        <member name="E:SpaceCG.HPSocket.HttpAgent.OnUpgrade">
            <summary>
            【可选】升级协议通知
            </summary>
        </member>
        <member name="E:SpaceCG.HPSocket.HttpAgent.OnStatusLine">
            <summary>
            【可选】状态行解析完成（仅用于 HTTP 客户端）
            </summary>
        </member>
        <member name="E:SpaceCG.HPSocket.HttpAgent.OnHeadersComplete">
            <summary>
            【必须】请求头完成通知
            </summary>
        </member>
        <member name="E:SpaceCG.HPSocket.HttpAgent.OnBody">
            <summary>
            【必须】请求体报文通知
            </summary>
        </member>
        <member name="E:SpaceCG.HPSocket.HttpAgent.OnPointerDataBody">
            <summary>
            【必须】请求体报文通知
            </summary>
        </member>
        <member name="E:SpaceCG.HPSocket.HttpAgent.OnMessageComplete">
            <summary>
            【必须】完成解析通知
            </summary>
        </member>
        <member name="E:SpaceCG.HPSocket.HttpAgent.OnParseError">
            <summary>
            【必须】解析错误通知
            </summary>
        </member>
        <member name="E:SpaceCG.HPSocket.HttpAgent.OnWSMessageBody">
            <summary>
            【必须】WebSocket数据包体通知(byte)
            </summary>
        </member>
        <member name="E:SpaceCG.HPSocket.HttpAgent.OnPointerWSMessageBody">
            <summary>
            【必须】WebSocket数据包体通知(指针)
            </summary>
        </member>
        <member name="E:SpaceCG.HPSocket.HttpAgent.OnWSMessageComplete">
            <summary>
            【必须】WebSocket数据完成解析通知
            </summary>
        </member>
        <member name="E:SpaceCG.HPSocket.HttpAgent.OnWSMessageHeader">
            <summary>
            【必须】WebSocket数据头通知
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SpaceCG.HPSocket.HttpAgent.CreateListener" -->
        <member name="M:SpaceCG.HPSocket.HttpAgent.Destroy">
            <summary>
            终止服务并释放资源
            </summary>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpAgent.SendRequest(System.IntPtr,SpaceCG.HPSocket.HttpMethod,System.String,SpaceCG.HPSocket.THeader[],System.Byte[],System.Int32)">
            <summary>
            发送请求
            </summary>
            <param name="connId"></param>
            <param name="method">请求方法</param>
            <param name="path">请求路径</param>
            <param name="headers">请求头</param>
            <param name="body">请求体</param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpAgent.SendLocalFile(System.IntPtr,System.String,SpaceCG.HPSocket.HttpMethod,System.String,SpaceCG.HPSocket.THeader[])">
            <summary>
            名称：发送本地文件
            描述：向指定连接发送 4096 KB 以下的小文件
            </summary>
            <param name="connId"></param>
            <param name="fileName"></param>
            <param name="method"></param>
            <param name="path"></param>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpAgent.SendPost(System.IntPtr,System.String,SpaceCG.HPSocket.THeader[],System.String)">
            <summary>
            发送 POST 请求
            </summary>
            <param name="connId"></param>
            <param name="path"></param>
            <param name="headers"></param>
            <param name="body"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpAgent.SendPut(System.IntPtr,System.String,SpaceCG.HPSocket.THeader[],System.String)">
            <summary>
            发送 PUT 请求
            </summary>
            <param name="connId"></param>
            <param name="path"></param>
            <param name="headers"></param>
            <param name="body"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpAgent.SendPatch(System.IntPtr,System.String,SpaceCG.HPSocket.THeader[],System.String)">
            <summary>
            发送 PATCH 请求
            </summary>
            <param name="connId"></param>
            <param name="path"></param>
            <param name="headers"></param>
            <param name="body"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpAgent.SendGet(System.IntPtr,System.String,SpaceCG.HPSocket.THeader[])">
            <summary>
            发送 GET 请求
            </summary>
            <param name="connId"></param>
            <param name="path"></param>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpAgent.SendDelete(System.IntPtr,System.String,SpaceCG.HPSocket.THeader[])">
            <summary>
            发送 DELETE 请求
            </summary>
            <param name="connId"></param>
            <param name="path"></param>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpAgent.SendHead(System.IntPtr,System.String,SpaceCG.HPSocket.THeader[])">
            <summary>
            发送 HEAD 请求
            </summary>
            <param name="connId"></param>
            <param name="path"></param>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpAgent.SendTrace(System.IntPtr,System.String,SpaceCG.HPSocket.THeader[])">
            <summary>
            发送 TRACE 请求
            </summary>
            <param name="connId"></param>
            <param name="path"></param>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpAgent.SendOptions(System.IntPtr,System.String,SpaceCG.HPSocket.THeader[])">
            <summary>
            发送 OPTIONS 请求
            </summary>
            <param name="connId"></param>
            <param name="path"></param>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpAgent.SendWSMessage(System.IntPtr,System.Boolean,System.Byte,System.Byte,System.Byte[],System.Byte[],System.UInt64)">
            <summary>
            发送 WSMessage 请求
            </summary>
            <param name="dwConnID"></param>
            <param name="bFinal"></param>
            <param name="iReserved"></param>
            <param name="iOperationCode"></param>
            <param name="lpszMask"></param>
            <param name="Data"></param>
            <param name="ullBodyLen"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpAgent.SendConnect(System.IntPtr,System.String,SpaceCG.HPSocket.THeader[])">
            <summary>
            发送 CONNECT 请求
            </summary>
            <param name="connId"></param>
            <param name="path"></param>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="P:SpaceCG.HPSocket.HttpAgent.UseCookie">
            <summary>
            获取或设置是否使用 Cookie
            </summary>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpAgent.GetStatusCode(System.IntPtr)">
            <summary>
            获取 HTTP 状态码
            </summary>
            <param name="connId"></param>
            <returns></returns>
        </member>
        <member name="P:SpaceCG.HPSocket.HttpAgent.LocalVersion">
            <summary>
            获取或设置本地协议版本
            </summary>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpAgent.IsUpgrade(System.IntPtr)">
            <summary>
            检查是否升级协议
            </summary>
            <param name="connId"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpAgent.IsKeepAlive(System.IntPtr)">
            <summary>
            检查是否有 Keep-Alive 标识
            </summary>
            <param name="connId"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpAgent.GetVersion(System.IntPtr)">
            <summary>
            获取协议版本
            </summary>
            <param name="connId"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpAgent.GetContentLength(System.IntPtr)">
            <summary>
            获取内容长度
            </summary>
            <param name="connId"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpAgent.GetContentType(System.IntPtr)">
            <summary>
            获取内容类型
            </summary>
            <param name="connId"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpAgent.GetContentEncoding(System.IntPtr)">
            <summary>
            获取内容类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpAgent.GetTransferEncoding(System.IntPtr)">
            <summary>
            获取传输编码
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpAgent.GetUpgradeType(System.IntPtr)">
            <summary>
            获取协议升级类型
            </summary>
            <param name="connId"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpAgent.GetParseErrorInfo(System.IntPtr)">
            <summary>
            获取解析错误代码
            </summary>
            <param name="connId"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpAgent.GetHeader(System.IntPtr,System.String)">
            <summary>
            获取某个请求头（单值）
            </summary>
            <param name="connId"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpAgent.GetHeaders(System.IntPtr,System.String)">
            <summary>
            获取某个请求头（多值）
            </summary>
            <param name="connId"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpAgent.GetAllHeaders(System.IntPtr)">
            <summary>
            获取所有请求头
            </summary>
            <param name="connId"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpAgent.GetAllHeaderNames(System.IntPtr)">
            <summary>
            获取所有请求头名称
            </summary>
            <param name="connId"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpAgent.GetCookie(System.IntPtr,System.String)">
            <summary>
            获取Cookie
            </summary>
            <param name="connId"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpAgent.GetAllCookies(System.IntPtr)">
            <summary>
            获取所有 Cookie
            </summary>
            <param name="connId"></param>
            <param name="lpCookies"></param>
            <param name="pdwCount"></param>
            <returns></returns>
        </member>
        <member name="E:SpaceCG.HPSocket.HttpClient.OnMessageBegin">
            <summary>
            【可选】开始解析
            </summary>
        </member>
        <member name="E:SpaceCG.HPSocket.HttpClient.OnHeader">
            <summary>
            【可选】请求头通知
            </summary>
        </member>
        <member name="E:SpaceCG.HPSocket.HttpClient.OnChunkHeader">
            <summary>
            【可选】Chunked 报文头通知
            </summary>
        </member>
        <member name="E:SpaceCG.HPSocket.HttpClient.OnChunkComplete">
            <summary>
            【可选】Chunked 报文结束通知
            </summary>
        </member>
        <member name="E:SpaceCG.HPSocket.HttpClient.OnUpgrade">
            <summary>
            【可选】升级协议通知
            </summary>
        </member>
        <member name="E:SpaceCG.HPSocket.HttpClient.OnStatusLine">
            <summary>
            【可选】状态行解析完成（仅用于 HTTP 客户端）
            </summary>
        </member>
        <member name="E:SpaceCG.HPSocket.HttpClient.OnHeadersComplete">
            <summary>
            【必须】请求头完成通知
            </summary>
        </member>
        <member name="E:SpaceCG.HPSocket.HttpClient.OnBody">
            <summary>
            【必须】请求体报文通知
            </summary>
        </member>
        <member name="E:SpaceCG.HPSocket.HttpClient.OnPointerDataBody">
            <summary>
            【必须】请求体报文通知
            </summary>
        </member>
        <member name="E:SpaceCG.HPSocket.HttpClient.OnMessageComplete">
            <summary>
            【必须】完成解析通知
            </summary>
        </member>
        <member name="E:SpaceCG.HPSocket.HttpClient.OnParseError">
            <summary>
            【必须】解析错误通知
            </summary>
        </member>
        <member name="E:SpaceCG.HPSocket.HttpClient.OnWSMessageBody">
            <summary>
            【必须】WebSocket数据包体通知(byte)
            </summary>
        </member>
        <member name="E:SpaceCG.HPSocket.HttpClient.OnPointerWSMessageBody">
            <summary>
            【必须】WebSocket数据包体通知(指针)
            </summary>
        </member>
        <member name="E:SpaceCG.HPSocket.HttpClient.OnWSMessageComplete">
            <summary>
            【必须】WebSocket数据完成解析通知
            </summary>
        </member>
        <member name="E:SpaceCG.HPSocket.HttpClient.OnWSMessageHeader">
            <summary>
            【必须】WebSocket数据头通知
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SpaceCG.HPSocket.HttpClient.CreateListener" -->
        <member name="M:SpaceCG.HPSocket.HttpClient.Destroy">
            <summary>
            终止服务并释放资源
            </summary>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpClient.SendRequest(SpaceCG.HPSocket.HttpMethod,System.String,SpaceCG.HPSocket.THeader[],System.Byte[],System.Int32)">
            <summary>
            发送请求
            </summary>
            <param name="connId"></param>
            <param name="method">请求方法</param>
            <param name="path">请求路径</param>
            <param name="headers">请求头</param>
            <param name="body">请求体</param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpClient.SendLocalFile(System.String,SpaceCG.HPSocket.HttpMethod,System.String,SpaceCG.HPSocket.THeader[])">
            <summary>
            名称：发送本地文件
            描述：向指定连接发送 4096 KB 以下的小文件
            </summary>
            <param name="connId"></param>
            <param name="fileName"></param>
            <param name="method"></param>
            <param name="path"></param>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpClient.SendPost(System.String,SpaceCG.HPSocket.THeader[],System.String)">
            <summary>
            发送 POST 请求
            </summary>
            <param name="connId"></param>
            <param name="path"></param>
            <param name="headers"></param>
            <param name="body"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpClient.SendPut(System.String,SpaceCG.HPSocket.THeader[],System.String)">
            <summary>
            发送 PUT 请求
            </summary>
            <param name="connId"></param>
            <param name="path"></param>
            <param name="headers"></param>
            <param name="body"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpClient.SendPatch(System.String,SpaceCG.HPSocket.THeader[],System.String)">
            <summary>
            发送 PATCH 请求
            </summary>
            <param name="connId"></param>
            <param name="path"></param>
            <param name="headers"></param>
            <param name="body"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpClient.SendGet(System.String,SpaceCG.HPSocket.THeader[])">
            <summary>
            发送 GET 请求
            </summary>
            <param name="connId"></param>
            <param name="path"></param>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpClient.SendDelete(System.String,SpaceCG.HPSocket.THeader[])">
            <summary>
            发送 DELETE 请求
            </summary>
            <param name="connId"></param>
            <param name="path"></param>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpClient.SendHead(System.String,SpaceCG.HPSocket.THeader[])">
            <summary>
            发送 HEAD 请求
            </summary>
            <param name="connId"></param>
            <param name="path"></param>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpClient.SendTrace(System.String,SpaceCG.HPSocket.THeader[])">
            <summary>
            发送 TRACE 请求
            </summary>
            <param name="connId"></param>
            <param name="path"></param>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpClient.SendWSMessage(System.Boolean,System.Byte,System.Byte,System.Byte[],System.Byte[],System.UInt64)">
            <summary>
            发送 WSMessage 请求
            </summary>
            <param name="dwConnID"></param>
            <param name="bFinal"></param>
            <param name="iReserved"></param>
            <param name="iOperationCode"></param>
            <param name="lpszMask"></param>
            <param name="Data"></param>
            <param name="ullBodyLen"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpClient.SendOptions(System.String,SpaceCG.HPSocket.THeader[])">
            <summary>
            发送 OPTIONS 请求
            </summary>
            <param name="connId"></param>
            <param name="path"></param>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpClient.SendConnect(System.String,SpaceCG.HPSocket.THeader[])">
            <summary>
            发送 CONNECT 请求
            </summary>
            <param name="connId"></param>
            <param name="path"></param>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="P:SpaceCG.HPSocket.HttpClient.UseCookie">
            <summary>
            获取或设置是否使用 Cookie
            </summary>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpClient.GetStatusCode(System.IntPtr)">
            <summary>
            获取 HTTP 状态码
            </summary>
            <param name="connId"></param>
            <returns></returns>
        </member>
        <member name="P:SpaceCG.HPSocket.HttpClient.LocalVersion">
            <summary>
            获取或设置本地协议版本
            </summary>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpClient.IsUpgrade(System.IntPtr)">
            <summary>
            检查是否升级协议
            </summary>
            <param name="connId"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpClient.IsKeepAlive(System.IntPtr)">
            <summary>
            检查是否有 Keep-Alive 标识
            </summary>
            <param name="connId"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpClient.GetVersion(System.IntPtr)">
            <summary>
            获取协议版本
            </summary>
            <param name="connId"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpClient.GetContentLength(System.IntPtr)">
            <summary>
            获取内容长度
            </summary>
            <param name="connId"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpClient.GetContentType(System.IntPtr)">
            <summary>
            获取内容类型
            </summary>
            <param name="connId"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpClient.GetContentEncoding(System.IntPtr)">
            <summary>
            获取内容类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpClient.GetTransferEncoding(System.IntPtr)">
            <summary>
            获取传输编码
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpClient.GetUpgradeType(System.IntPtr)">
            <summary>
            获取协议升级类型
            </summary>
            <param name="connId"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpClient.GetParseErrorInfo(System.IntPtr)">
            <summary>
            获取解析错误代码
            </summary>
            <param name="connId"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpClient.GetHeader(System.String)">
            <summary>
            获取某个请求头（单值）
            </summary>
            <param name="connId"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpClient.GetHeaders(System.String)">
            <summary>
            获取某个请求头（多值）
            </summary>
            <param name="connId"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpClient.GetAllHeaders(System.IntPtr)">
            <summary>
            获取所有请求头
            </summary>
            <param name="connId"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpClient.GetAllHeaderNames(System.IntPtr)">
            <summary>
            获取所有请求头名称
            </summary>
            <param name="connId"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpClient.GetCookie(System.String)">
            <summary>
            获取Cookie
            </summary>
            <param name="connId"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpClient.GetAllCookies(System.IntPtr)">
            <summary>
            获取所有 Cookie
            </summary>
            <param name="connId"></param>
            <param name="lpCookies"></param>
            <param name="pdwCount"></param>
            <returns></returns>
        </member>
        <member name="T:SpaceCG.HPSocket.HttpVersion">
            <summary>
            http版本号
            </summary>
        </member>
        <member name="F:SpaceCG.HPSocket.HttpVersion.V1_0">
            <summary>
            http 1.0
            </summary>
        </member>
        <member name="F:SpaceCG.HPSocket.HttpVersion.v1_1">
            <summary>
            http 1.1
            </summary>
        </member>
        <member name="T:SpaceCG.HPSocket.HttpUrlField">
            <summary>
            URL 域
            HTTP 请求行中 URL 段位的域定义
            </summary>
        </member>
        <member name="F:SpaceCG.HPSocket.HttpUrlField.Max">
            <summary>
            Field Count
            </summary>
        </member>
        <member name="T:SpaceCG.HPSocket.HttpParseResult">
            <summary>
            HTTP 解析结果标识
            指示 HTTP 解析器是否继续执行解析操作
            </summary>
        </member>
        <member name="F:SpaceCG.HPSocket.HttpParseResult.Error">
            <summary>
            终止解析，断开连接
            </summary>
        </member>
        <member name="F:SpaceCG.HPSocket.HttpParseResult.Ok">
            <summary>
            继续解析
            </summary>
        </member>
        <member name="T:SpaceCG.HPSocket.HttpParseResultEx">
            <summary>
            HTTP 解析结果标识
            指示 HTTP 解析器是否继续执行解析操作
            </summary>
        </member>
        <member name="F:SpaceCG.HPSocket.HttpParseResultEx.Error">
            <summary>
            终止解析，断开连接
            </summary>
        </member>
        <member name="F:SpaceCG.HPSocket.HttpParseResultEx.Ok">
            <summary>
            继续解析
            </summary>
        </member>
        <member name="F:SpaceCG.HPSocket.HttpParseResultEx.SkipBody">
            <summary>
            跳过当前请求 BODY
            </summary>
        </member>
        <member name="F:SpaceCG.HPSocket.HttpParseResultEx.Upgrade">
            <summary>
            升级协议
            </summary>
        </member>
        <member name="F:SpaceCG.HPSocket.HttpUpgradeType.None">
            <summary>
            没有升级
            </summary>
        </member>
        <member name="F:SpaceCG.HPSocket.HttpUpgradeType.WebSocket">
            <summary>
            WebSocket
            </summary>
        </member>
        <member name="F:SpaceCG.HPSocket.HttpUpgradeType.HttpTunnel">
            <summary>
            HTTP 隧道
            </summary>
        </member>
        <member name="F:SpaceCG.HPSocket.HttpUpgradeType.Unknown">
            <summary>
            未知类型
            </summary>
        </member>
        <member name="T:SpaceCG.HPSocket.HttpMethod">
            <summary>
            HttpMethod
            </summary>
        </member>
        <member name="T:SpaceCG.HPSocket.TNVPair">
            <summary>
            Name/Value 结构体
            字符串名值对结构体
            </summary>
        </member>
        <member name="T:SpaceCG.HPSocket.HttpEvent">
            <summary>
            http事件
            </summary>
        </member>
        <member name="T:SpaceCG.HPSocket.HttpServerEvent">
            <summary>
            http server 事件
            </summary>
        </member>
        <member name="T:SpaceCG.HPSocket.HttpClientEvent">
            <summary>
            http cilent 事件
            </summary>
        </member>
        <member name="T:SpaceCG.HPSocket.HttpAgentEvent">
            <summary>
            http agent 事件
            </summary>
        </member>
        <member name="T:SpaceCG.HPSocket.WebSocketEvent">
            <summary>
            websocket 事件
            </summary>
        </member>
        <member name="F:SpaceCG.HPSocket.HttpSdk.HPSOCKET_HTTP_DLL_PATH">
            <summary>
            HPSocket的文件路径
            </summary>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpSdk.Create_HP_HttpServer(System.IntPtr)">
            <summary>
            创建 HP_HttpServer 对象
            </summary>
            <param name="pListener"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpSdk.Create_HP_HttpAgent(System.IntPtr)">
            <summary>
             创建 HP_HttpAgent 对象
            </summary>
            <param name="pListener"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpSdk.Create_HP_HttpClient(System.IntPtr)">
            <summary>
             创建 HP_HttpClient 对象
            </summary>
            <param name="pListener"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpSdk.Create_HP_HttpSyncClient(System.IntPtr)">
            <summary>
            创建 HP_HttpSyncClient 对象
            </summary>
            <param name="pListener"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpSdk.Destroy_HP_HttpServer(System.IntPtr)">
            <summary>
             销毁 HP_HttpServer 对象
            </summary>
            <param name="pServer"></param>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpSdk.Destroy_HP_HttpAgent(System.IntPtr)">
            <summary>
             销毁 HP_HttpAgent 对象
            </summary>
            <param name="pAgent"></param>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpSdk.Destroy_HP_HttpClient(System.IntPtr)">
            <summary>
             销毁 HP_HttpClient 对象
            </summary>
            <param name="pClient"></param>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpSdk.Destroy_HP_HttpSyncClient(System.IntPtr)">
            <summary>
            销毁 HP_HttpSyncClient 对象
            </summary>
            <param name="pClient"></param>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpSdk.Create_HP_HttpServerListener">
            <summary>
             创建 HP_HttpServerListener 对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpSdk.Create_HP_HttpAgentListener">
            <summary>
             创建 HP_HttpAgentListener 对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpSdk.Create_HP_HttpClientListener">
            <summary>
            创建 HP_HttpClientListener 对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpSdk.Destroy_HP_HttpServerListener(System.IntPtr)">
            <summary>
             销毁 HP_HttpServerListener 对象
            </summary>
            <param name="pListener"></param>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpSdk.Destroy_HP_HttpAgentListener(System.IntPtr)">
            <summary>
             销毁 HP_HttpAgentListener 对象
            </summary>
            <param name="pListener"></param>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpSdk.Destroy_HP_HttpClientListener(System.IntPtr)">
            <summary>
             销毁 HP_HttpClientListener 对象
            </summary>
            <param name="pListener"></param>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpSdk.HP_HttpSyncClient_OpenUrl(System.IntPtr,System.String,System.String,SpaceCG.HPSocket.THeader[],System.Int32,System.String,System.Int32,System.Boolean)">
            <summary>
            名称：发送 URL 请求
            描述：向服务端发送 HTTP URL 请求
            </summary>
            <param name="pClient"></param>
            <param name="lpszMethod">请求方法</param>
            <param name="lpszUrl">请求 URL</param>
            <param name="lpHeaders">请求头</param>
            <param name="iHeaderCount">请求头数量</param>
            <param name="pBody">请求体</param>
            <param name="iLength">请求体长度</param>
            <param name="bForceReconnect">强制重新连接（默认：FALSE，当请求 URL 的主机和端口与现有连接一致时，重用现有连接）</param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpSdk.HP_HttpSyncClient_CleanupRequestResult(System.IntPtr)">
            <summary>
            名称：清除请求结果
            描述：清除上一次请求的响应头和响应体等结果信息（该方法会在每次发送请求前自动调用）
            </summary>
            <param name="pClient"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpSdk.HP_HttpSyncClient_SetConnectTimeout(System.IntPtr,System.UInt32)">
            <summary>
            设置连接超时（毫秒，0：系统默认超时，默认：5000）
            </summary>
            <param name="pClient"></param>
            <param name="dwConnectTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpSdk.HP_HttpSyncClient_SetRequestTimeout(System.IntPtr,System.UInt32)">
            <summary>
            设置请求超时（毫秒，0：无限等待，默认：10000）
            </summary>
            <param name="pClient"></param>
            <param name="dwConnectTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpSdk.HP_HttpSyncClient_GetConnectTimeout(System.IntPtr)">
            <summary>
            获取连接超时
            </summary>
            <param name="pClient"></param>
            <param name="dwConnectTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpSdk.HP_HttpSyncClient_GetRequestTimeout(System.IntPtr)">
            <summary>
            获取请求超时
            </summary>
            <param name="pClient"></param>
            <param name="dwConnectTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpSdk.HP_HttpSyncClient_GetResponseBody(System.IntPtr,System.IntPtr@,System.Int32@)">
            <summary>
            获取响应体
            </summary>
            <param name="pClient"></param>
            <param name="dwConnectTimeout"></param>
            <returns></returns>
        </member>
        <member name="E:SpaceCG.HPSocket.HttpServer.OnMessageBegin">
            <summary>
            【可选】开始解析
            </summary>
        </member>
        <member name="E:SpaceCG.HPSocket.HttpServer.OnHeader">
            <summary>
            【可选】请求头通知
            </summary>
        </member>
        <member name="E:SpaceCG.HPSocket.HttpServer.OnChunkHeader">
            <summary>
            【可选】Chunked 报文头通知
            </summary>
        </member>
        <member name="E:SpaceCG.HPSocket.HttpServer.OnChunkComplete">
            <summary>
            【可选】Chunked 报文结束通知
            </summary>
        </member>
        <member name="E:SpaceCG.HPSocket.HttpServer.OnUpgrade">
            <summary>
            【可选】升级协议通知
            </summary>
        </member>
        <member name="E:SpaceCG.HPSocket.HttpServer.OnRequestLine">
            <summary>
            【可选】请求行解析完成（仅用于 HTTP 服务端）
            </summary>
        </member>
        <member name="E:SpaceCG.HPSocket.HttpServer.OnHeadersComplete">
            <summary>
            【必须】请求头完成通知
            </summary>
        </member>
        <member name="E:SpaceCG.HPSocket.HttpServer.OnBody">
            <summary>
            【必须】请求体报文通知
            </summary>
        </member>
        <member name="E:SpaceCG.HPSocket.HttpServer.OnPointerDataBody">
            <summary>
            【必须】请求体报文通知
            </summary>
        </member>
        <member name="E:SpaceCG.HPSocket.HttpServer.OnMessageComplete">
            <summary>
            【必须】完成解析通知
            </summary>
        </member>
        <member name="E:SpaceCG.HPSocket.HttpServer.OnParseError">
            <summary>
            【必须】解析错误通知
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SpaceCG.HPSocket.HttpServer.CreateListener" -->
        <member name="M:SpaceCG.HPSocket.HttpServer.Destroy">
            <summary>
            终止服务并释放资源
            </summary>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpServer.SendResponse(System.IntPtr,SpaceCG.HPSocket.HttpStatusCode,System.String,SpaceCG.HPSocket.THeader[],System.Byte[],System.Int32)">
            <summary>
            名称：回复请求
            描述：向客户端回复 HTTP 请求
            </summary>
            <param name="connId">连接 ID</param>
            <param name="httpStatusCode">HTTP 状态码</param>
            <param name="desc">HTTP 状态描述</param>
            <param name="headers">回复请求头</param>
            <param name="body">回复请求体</param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpServer.SendLocalFile(System.IntPtr,System.String,SpaceCG.HPSocket.HttpStatusCode,System.String,SpaceCG.HPSocket.THeader[])">
            <summary>
            名称：发送本地文件
            描述：向指定连接发送 4096 KB 以下的小文件
            </summary>
            <param name="connId"></param>
            <param name="fileName"></param>
            <param name="httpStatusCode"></param>
            <param name="desc"></param>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpServer.Release(System.IntPtr)">
            <summary>
            名称：释放连接
            描述：把连接放入释放队列，等待某个时间（通过 SetReleaseDelay() 设置）关闭连接
            </summary>
            <param name="connId">连接 ID</param>
            <returns></returns>
        </member>
        <member name="P:SpaceCG.HPSocket.HttpServer.ReleaseDelay">
            <summary>
            获取或设置连接释放延时（默认：3000 毫秒）
            </summary>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpServer.GetUrlFieldSet(System.IntPtr)">
            <summary>
            获取请求行 URL 域掩码（URL 域参考：HttpUrlField）
            </summary>
            <param name="connId"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpServer.GetUrlField(System.IntPtr,SpaceCG.HPSocket.HttpUrlField)">
            <summary>
            获取某个 URL 域值
            </summary>
            <param name="connId"></param>
            <param name="enField"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpServer.GetMethod(System.IntPtr)">
            <summary>
            获取请求方法
            </summary>
            <param name="connId"></param>
            <returns></returns>
        </member>
        <member name="P:SpaceCG.HPSocket.HttpServer.LocalVersion">
            <summary>
            获取或设置本地协议版本
            </summary>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpServer.IsUpgrade(System.IntPtr)">
            <summary>
            检查是否升级协议
            </summary>
            <param name="connId"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpServer.IsKeepAlive(System.IntPtr)">
            <summary>
            检查是否有 Keep-Alive 标识
            </summary>
            <param name="connId"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpServer.GetVersion(System.IntPtr)">
            <summary>
            获取协议版本
            </summary>
            <param name="connId"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpServer.GetHost(System.IntPtr)">
            <summary>
            获取主机
            </summary>
            <param name="connId"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpServer.GetContentLength(System.IntPtr)">
            <summary>
            获取内容长度
            </summary>
            <param name="connId"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpServer.GetContentType(System.IntPtr)">
            <summary>
            获取内容类型
            </summary>
            <param name="connId"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpServer.GetContentEncoding(System.IntPtr)">
            <summary>
            获取内容类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpServer.GetTransferEncoding(System.IntPtr)">
            <summary>
            获取传输编码
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpServer.GetUpgradeType(System.IntPtr)">
            <summary>
            获取协议升级类型
            </summary>
            <param name="connId"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpServer.GetParseErrorInfo(System.IntPtr)">
            <summary>
            获取解析错误代码
            </summary>
            <param name="connId"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpServer.GetHeader(System.IntPtr,System.String)">
            <summary>
            获取某个请求头（单值）
            </summary>
            <param name="connId"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpServer.GetHeaders(System.IntPtr,System.String)">
            <summary>
            获取某个请求头（多值）
            </summary>
            <param name="connId"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpServer.GetAllHeaders(System.IntPtr)">
            <summary>
            获取所有请求头
            </summary>
            <param name="connId"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpServer.GetAllHeaderNames(System.IntPtr)">
            <summary>
            获取所有请求头名称
            </summary>
            <param name="connId"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpServer.GetCookie(System.IntPtr,System.String)">
            <summary>
            获取Cookie
            </summary>
            <param name="connId"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpServer.GetAllCookies(System.IntPtr)">
            <summary>
            获取所有 Cookie
            </summary>
            <param name="connId"></param>
            <param name="lpCookies"></param>
            <param name="pdwCount"></param>
            <returns></returns>
        </member>
        <member name="T:SpaceCG.HPSocket.ServerEvent.OnAcceptEventHandler">
            <summary>
            连接进入
            </summary>
            <param name="sender"></param>
            <param name="connId"></param>
            <param name="pClient">如果为 TCP 连接，pClient为 SOCKET 句柄；如果为 UDP 连接，pClient为 SOCKADDR 指针；</param>
            <returns></returns>
        </member>
        <member name="T:SpaceCG.HPSocket.ServiceState">
            <summary>
            通信组件服务状态,用程序可以通过通信组件的 GetState() 方法获取组件当前服务状态
            </summary>
        </member>
        <member name="F:SpaceCG.HPSocket.ServiceState.Starting">
            <summary>
            正在启动
            </summary>
        </member>
        <member name="F:SpaceCG.HPSocket.ServiceState.Started">
            <summary>
            已经启动
            </summary>
        </member>
        <member name="F:SpaceCG.HPSocket.ServiceState.Stopping">
            <summary>
            正在停止
            </summary>
        </member>
        <member name="F:SpaceCG.HPSocket.ServiceState.Stopped">
            <summary>
            已经启动
            </summary>
        </member>
        <member name="T:SpaceCG.HPSocket.SocketOperation">
            <summary>
            Socket 操作类型,应用程序的 OnErrror() 事件中通过该参数标识是哪种操作导致的错误
            </summary>
        </member>
        <member name="T:SpaceCG.HPSocket.HandleResult">
            <summary>
            事件通知处理结果,事件通知的返回值，不同的返回值会影响通信组件的后续行为
            </summary>
        </member>
        <member name="F:SpaceCG.HPSocket.HandleResult.Ok">
            <summary>
            成功
            </summary>
        </member>
        <member name="F:SpaceCG.HPSocket.HandleResult.Ignore">
            <summary>
            忽略
            </summary>
        </member>
        <member name="F:SpaceCG.HPSocket.HandleResult.Error">
            <summary>
            错误
            </summary>
        </member>
        <member name="T:SpaceCG.HPSocket.SocketError">
            <summary>
            名称：操作结果代码
            描述：组件 Start() / Stop() 方法执行失败时，可通过 GetLastError() 获取错误代码
            </summary>
        </member>
        <member name="F:SpaceCG.HPSocket.SocketError.Ok">
            <summary>
            成功
            </summary>
        </member>
        <member name="F:SpaceCG.HPSocket.SocketError.IllegalState">
            <summary>
            当前状态不允许操作
            </summary>
        </member>
        <member name="F:SpaceCG.HPSocket.SocketError.InvalidParam">
            <summary>
            非法参数
            </summary>
        </member>
        <member name="F:SpaceCG.HPSocket.SocketError.SocketCreate">
            <summary>
            创建 SOCKET 失败
            </summary>
        </member>
        <member name="F:SpaceCG.HPSocket.SocketError.SocketBind">
            <summary>
            绑定 SOCKET 失败
            </summary>
        </member>
        <member name="F:SpaceCG.HPSocket.SocketError.SocketPrepare">
            <summary>
            设置 SOCKET 失败
            </summary>
        </member>
        <member name="F:SpaceCG.HPSocket.SocketError.SocketListen">
            <summary>
            监听 SOCKET 失败
            </summary>
        </member>
        <member name="F:SpaceCG.HPSocket.SocketError.CPCreate">
            <summary>
            创建完成端口失败
            </summary>
        </member>
        <member name="F:SpaceCG.HPSocket.SocketError.WorkerThreadCreate">
            <summary>
            创建工作线程失败
            </summary>
        </member>
        <member name="F:SpaceCG.HPSocket.SocketError.DetectThreadCreate">
            <summary>
            创建监测线程失败
            </summary>
        </member>
        <member name="F:SpaceCG.HPSocket.SocketError.SocketAttachToCP">
            <summary>
            绑定完成端口失败
            </summary>
        </member>
        <member name="F:SpaceCG.HPSocket.SocketError.ConnectServer">
            <summary>
            连接服务器失败
            </summary>
        </member>
        <member name="F:SpaceCG.HPSocket.SocketError.Network">
            <summary>
            网络错误
            </summary>
        </member>
        <member name="F:SpaceCG.HPSocket.SocketError.DataProc">
            <summary>
            数据处理错误
            </summary>
        </member>
        <member name="F:SpaceCG.HPSocket.SocketError.DataSend">
            <summary>
            数据发送失败
            </summary>
        </member>
        <member name="F:SpaceCG.HPSocket.SocketError.SSLEnvNotReady">
            <summary>
            SSL 环境未就绪
            </summary>
        </member>
        <member name="T:SpaceCG.HPSocket.FetchResult">
            <summary>
            数据抓取结果,数据抓取操作的返回值
            </summary>
        </member>
        <member name="F:SpaceCG.HPSocket.FetchResult.Ok">
            <summary>
            成功
            </summary>
        </member>
        <member name="F:SpaceCG.HPSocket.FetchResult.LengthTooLong">
            <summary>
            抓取长度过大
            </summary>
        </member>
        <member name="F:SpaceCG.HPSocket.FetchResult.DataNotFound">
            <summary>
            找不到 ConnID 对应的数据
            </summary>
        </member>
        <member name="T:SpaceCG.HPSocket.SendPolicy">
            <summary>
            发送策略
            </summary>
        </member>
        <member name="F:SpaceCG.HPSocket.SendPolicy.Pack">
            <summary>
            打包模式（默认）
            </summary>
        </member>
        <member name="F:SpaceCG.HPSocket.SendPolicy.Safe">
            <summary>
            安全模式
            </summary>
        </member>
        <member name="F:SpaceCG.HPSocket.SendPolicy.Direct">
            <summary>
            直接模式
            </summary>
        </member>
        <member name="T:SpaceCG.HPSocket.OnSendSyncPolicy">
            <summary>
            OnSend 事件同步策略
            Server 组件和 Agent 组件的 OnSend 事件同步策略
            </summary>
        </member>
        <member name="F:SpaceCG.HPSocket.OnSendSyncPolicy.OSSP_NONE">
            <summary>
            不同步（默认）	：不同步 OnSend 事件，此时可能同时触发 OnReceive 和 OnClose 事件
            </summary>
        </member>
        <member name="F:SpaceCG.HPSocket.OnSendSyncPolicy.OSSP_CLOSE">
            <summary>
            同步 OnClose	：只同步 OnClose 事件，此时可能同时触发 OnReceive 事件
            </summary>
        </member>
        <member name="F:SpaceCG.HPSocket.OnSendSyncPolicy.OSSP_RECEIVE">
            <summary>
            同步 OnReceive	：（只用于 TCP 组件）同步 OnReceive 和 OnClose 事件，此处不可能同时触发 OnReceive 或 OnClose 事件
            </summary>
        </member>
        <member name="T:SpaceCG.HPSocket.CastMode">
            <summary>
            播送模式  UDP 组件的播送模式（组播或广播）
            </summary>
        </member>
        <member name="F:SpaceCG.HPSocket.CastMode.Multicast">
            <summary>
            组播
            </summary>
        </member>
        <member name="F:SpaceCG.HPSocket.CastMode.Broadcast">
            <summary>
            广播
            </summary>
        </member>
        <member name="T:SpaceCG.HPSocket.IPAddrType">
            <summary>
            名称：IP 地址类型
            描述：IP 地址类型枚举值
            </summary>
        </member>
        <member name="F:SpaceCG.HPSocket.IPAddrType.All">
            <summary>
            所有
            </summary>
        </member>
        <member name="F:SpaceCG.HPSocket.IPAddrType.IPV4">
            <summary>
            IPv4
            </summary>
        </member>
        <member name="F:SpaceCG.HPSocket.IPAddrType.IPV6">
            <summary>
            IPv6
            </summary>
        </member>
        <member name="F:SpaceCG.HPSocket.IPAddrType.Other">
            <summary>
            其他
            </summary>
        </member>
        <member name="T:SpaceCG.HPSocket.ReceiveState">
            <summary>
            接收状态
            </summary>
        </member>
        <member name="F:SpaceCG.HPSocket.ReceiveState.Unknown">
            <summary>
            未知
            </summary>
        </member>
        <member name="F:SpaceCG.HPSocket.ReceiveState.Resume">
            <summary>
            唤醒状态
            </summary>
        </member>
        <member name="F:SpaceCG.HPSocket.ReceiveState.Pause">
            <summary>
            暂停状态
            </summary>
        </member>
        <member name="T:SpaceCG.HPSocket.IPAddr">
            <summary>
            名称：IP 地址条目结构体
            描述：IP 地址的地址簇/地址值结构体
            </summary>
        </member>
        <member name="T:SpaceCG.HPSocket.DnsHelper">
            <summary>
            DnsHelper
            </summary>
        </member>
        <member name="M:SpaceCG.HPSocket.DnsHelper.GetLocalHostAddressesToIPAddrList">
            <summary>
            获取本机ipv4+ipv6地址
            hp-socket可用的ip地址结构
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.DnsHelper.GetLocalHostAddresses">
            <summary>
            获取本机ipv4+ipv6地址
            .net自带的ip地址结构
            </summary>
            <returns></returns>
        </member>
        <member name="P:SpaceCG.HPSocket.SSLAgent.VerifyMode">
            <summary>
            验证模式
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.SSLAgent.PemCertFile">
            <summary>
            证书文件（客户端可选）
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.SSLAgent.PemKeyFile">
            <summary>
            私钥文件（客户端可选）
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.SSLAgent.KeyPasswod">
            <summary>
            私钥密码（没有密码则为空）
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.SSLAgent.CAPemCertFileOrPath">
            <summary>
            CA 证书文件或目录（单向验证或客户端可选）
            </summary>
        </member>
        <member name="M:SpaceCG.HPSocket.SSLAgent.#ctor(SpaceCG.HPSocket.SSLVerifyMode,System.String,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="_verifyModel">验证模式</param>
            <param name="_pemCertFile">证书文件</param>
            <param name="_pemKeyFile">私钥文件</param>
            <param name="_keyPasswod">私钥密码（没有密码则为空）</param>
            <param name="_caPemCertFileOrPath">CA 证书文件或目录（单向验证或客户端可选）</param>
        </member>
        <member name="M:SpaceCG.HPSocket.SSLAgent.Initialize">
            <summary>
            初始化SSL环境
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.SSLAgent.Uninitialize">
            <summary>
            反初始化SSL环境
            </summary>
        </member>
        <member name="M:SpaceCG.HPSocket.SSLAgent.Start(System.String,System.Boolean)">
            <summary>
            启动通讯组件
            启动完成后可开始连接远程服务器
            </summary>
            <param name="address">绑定地址</param>
            <param name="async">是否异步</param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.SSLAgent.StartSSLHandShake(System.IntPtr)">
            <summary>
            启动 SSL 握手
            当通信组件设置为非自动握手时，需要调用本方法启动 SSL 握手
            </summary>
            <param name="connId"></param>
            <returns></returns>
        </member>
        <member name="P:SpaceCG.HPSocket.SSLAgent.AutoHandShake">
            <summary>
            获取或设置通信组件握手方式（默认：TRUE，自动握手)
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.SSLClient.VerifyMode">
            <summary>
            验证模式
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.SSLClient.PemCertFile">
            <summary>
            证书文件（客户端可选）
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.SSLClient.PemKeyFile">
            <summary>
            私钥文件（客户端可选）
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.SSLClient.KeyPasswod">
            <summary>
            私钥密码（没有密码则为空）
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.SSLClient.CAPemCertFileOrPath">
            <summary>
            CA 证书文件或目录（单向验证或客户端可选）
            </summary>
        </member>
        <member name="M:SpaceCG.HPSocket.SSLClient.#ctor(SpaceCG.HPSocket.SSLVerifyMode,System.String,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="verifyModel">验证模式</param>
            <param name="pemCertFile">证书文件（客户端可选）</param>
            <param name="pemKeyFile">私钥文件（客户端可选）</param>
            <param name="keyPasswod">私钥密码（没有密码则为空）</param>
            <param name="caPemCertFileOrPath">CA 证书文件或目录（单向验证或客户端可选）</param>
        </member>
        <member name="M:SpaceCG.HPSocket.SSLClient.Initialize">
            <summary>
            初始化SSL环境
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.SSLClient.Uninitialize">
            <summary>
            反初始化SSL环境
            </summary>
        </member>
        <member name="M:SpaceCG.HPSocket.SSLClient.StartSSLHandShake">
            <summary>
            启动 SSL 握手
            当通信组件设置为非自动握手时，需要调用本方法启动 SSL 握手
            </summary>
            <param name="connId"></param>
            <returns></returns>
        </member>
        <member name="P:SpaceCG.HPSocket.SSLClient.AutoHandShake">
            <summary>
            获取或设置通信组件握手方式（默认：TRUE，自动握手)
            </summary>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpsAgent.#ctor(SpaceCG.HPSocket.SSLVerifyMode,System.String,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="verifyModel">验证模式</param>
            <param name="pemCertFile">证书文件</param>
            <param name="pemKeyFile">私钥文件</param>
            <param name="keyPasswod">私钥密码（没有密码则为空）</param>
            <param name="caPemCertFileOrPath">CA 证书文件或目录（单向验证或客户端可选）</param>
        </member>
        <member name="P:SpaceCG.HPSocket.SSLHttpAgent.VerifyMode">
            <summary>
            验证模式
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.SSLHttpAgent.PemCertFile">
            <summary>
            证书文件（客户端可选）
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.SSLHttpAgent.PemKeyFile">
            <summary>
            私钥文件（客户端可选）
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.SSLHttpAgent.KeyPasswod">
            <summary>
            私钥密码（没有密码则为空）
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.SSLHttpAgent.CAPemCertFileOrPath">
            <summary>
            CA 证书文件或目录（单向验证或客户端可选）
            </summary>
        </member>
        <member name="M:SpaceCG.HPSocket.SSLHttpAgent.#ctor(SpaceCG.HPSocket.SSLVerifyMode,System.String,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="verifyModel">验证模式</param>
            <param name="pemCertFile">证书文件</param>
            <param name="pemKeyFile">私钥文件</param>
            <param name="keyPasswod">私钥密码（没有密码则为空）</param>
            <param name="caPemCertFileOrPath">CA 证书文件或目录（单向验证或客户端可选）</param>
        </member>
        <member name="M:SpaceCG.HPSocket.SSLHttpAgent.Initialize">
            <summary>
            初始化SSL环境
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.SSLHttpAgent.Uninitialize">
            <summary>
            反初始化SSL环境
            </summary>
        </member>
        <member name="M:SpaceCG.HPSocket.HttpsClient.#ctor(SpaceCG.HPSocket.SSLVerifyMode,System.String,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="verifyModel">验证模式</param>
            <param name="pemCertFile">证书文件</param>
            <param name="pemKeyFile">私钥文件</param>
            <param name="keyPasswod">私钥密码（没有密码则为空）</param>
            <param name="caPemCertFileOrPath">CA 证书文件或目录（单向验证或客户端可选）</param>
        </member>
        <member name="P:SpaceCG.HPSocket.SSLHttpClient.VerifyMode">
            <summary>
            验证模式
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.SSLHttpClient.PemCertFile">
            <summary>
            证书文件（客户端可选）
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.SSLHttpClient.PemKeyFile">
            <summary>
            私钥文件（客户端可选）
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.SSLHttpClient.KeyPasswod">
            <summary>
            私钥密码（没有密码则为空）
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.SSLHttpClient.CAPemCertFileOrPath">
            <summary>
            CA 证书文件或目录（单向验证或客户端可选）
            </summary>
        </member>
        <member name="M:SpaceCG.HPSocket.SSLHttpClient.#ctor(SpaceCG.HPSocket.SSLVerifyMode,System.String,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="verifyModel">验证模式</param>
            <param name="pemCertFile">证书文件（客户端可选）</param>
            <param name="pemKeyFile">私钥文件（客户端可选）</param>
            <param name="keyPasswod">私钥密码（没有密码则为空）</param>
            <param name="caPemCertFileOrPath">CA 证书文件或目录（单向验证或客户端可选）</param>
        </member>
        <member name="M:SpaceCG.HPSocket.SSLHttpClient.Initialize">
            <summary>
            初始化SSL环境
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.SSLHttpClient.Uninitialize">
            <summary>
            反初始化SSL环境
            </summary>
        </member>
        <member name="F:SpaceCG.HPSocket.SSLHttpSdk.HPSOCKET_SSL_HTTP_DLL_PATH">
            <summary>
            HPSocket的文件路径
            </summary>
        </member>
        <member name="M:SpaceCG.HPSocket.SSLHttpSdk.Create_HP_HttpsServer(System.IntPtr)">
            <summary>
            创建 HP_HttpsServer 对象
            </summary>
            <param name="pListener"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.SSLHttpSdk.Create_HP_HttpsAgent(System.IntPtr)">
            <summary>
            创建 HP_HttpsAgent 对象
            </summary>
            <param name="pListener"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.SSLHttpSdk.Create_HP_HttpsClient(System.IntPtr)">
            <summary>
            创建 HP_HttpsClient 对象
            </summary>
            <param name="pListener"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.SSLHttpSdk.Create_HP_HttpsSyncClient(System.IntPtr)">
            <summary>
            创建 HP_HttpsSyncClient 对象
            </summary>
            <param name="pListener"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.SSLHttpSdk.Destroy_HP_HttpsServer(System.IntPtr)">
            <summary>
            销毁 HP_HttpsServer 对象
            </summary>
            <param name="pServer"></param>
        </member>
        <member name="M:SpaceCG.HPSocket.SSLHttpSdk.Destroy_HP_HttpsAgent(System.IntPtr)">
            <summary>
            销毁 HP_HttpsAgent 对象
            </summary>
            <param name="pAgent"></param>
        </member>
        <member name="M:SpaceCG.HPSocket.SSLHttpSdk.Destroy_HP_HttpsClient(System.IntPtr)">
            <summary>
            销毁 HP_HttpsClient 对象
            </summary>
            <param name="pClient"></param>
        </member>
        <member name="M:SpaceCG.HPSocket.SSLHttpSdk.Destroy_HP_HttpsSyncClient(System.IntPtr)">
            <summary>
            销毁 HP_HttpsSyncClient 对象
            </summary>
            <param name="pClient"></param>
        </member>
        <member name="P:SpaceCG.HPSocket.SSLHttpServer.VerifyMode">
            <summary>
            验证模式
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.SSLHttpServer.PemCertFile">
            <summary>
            证书文件（客户端可选）
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.SSLHttpServer.PemKeyFile">
            <summary>
            私钥文件（客户端可选）
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.SSLHttpServer.KeyPasswod">
            <summary>
            私钥密码（没有密码则为空）
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.SSLHttpServer.CAPemCertFileOrPath">
            <summary>
            CA 证书文件或目录（单向验证或客户端可选）
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.SSLHttpServer.SNIServerNameCallback">
            <summary>
            名称：SNI 服务名称回调函数
            描述：根据服务器名称选择 SSL 证书
            返回值：
            0	 -- 成功，使用默认 SSL 证书
            正数	 -- 成功，使用返回值对应的 SNI 主机证书
            负数	 -- 失败，中断 SSL 握手
            </summary>
            <param name="serverName"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.SSLHttpServer.#ctor(SpaceCG.HPSocket.SSLVerifyMode,System.String,System.String,System.String,System.String,SpaceCG.HPSocket.SSLSdk.SNIServerNameCallback)">
            <summary>
            
            </summary>
            <param name="verifyModel">验证模式</param>
            <param name="pemCertFile">证书文件</param>
            <param name="pemKeyFile">私钥文件</param>
            <param name="keyPasswod">私钥密码（没有密码则为空）</param>
            <param name="caPemCertFileOrPath">CA 证书文件或目录（单向验证或客户端可选）</param>
        </member>
        <member name="M:SpaceCG.HPSocket.SSLHttpServer.Initialize">
            <summary>
            初始化SSL环境
            </summary>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.SSLHttpServer.Uninitialize">
            <summary>
            反初始化SSL环境
            </summary>
        </member>
        <member name="M:SpaceCG.HPSocket.SSLHttpServer.AddServerContext(SpaceCG.HPSocket.SSLVerifyMode,System.String,System.String,System.String,System.String)">
            <summary>
            名称：增加 SNI 主机证书（只用于服务端）
            描述：SSL 服务端在 SetupSSLContext() 成功后可以调用本方法增加多个 SNI 主机证书
            返回值：正数		-- 成功，并返回 SNI 主机证书对应的索引，该索引用于在 SNI 回调函数中定位 SNI 主机
            返回值：负数		-- 失败，可通过 SYS_GetLastError() 获取失败原因
            </summary>
            <param name="verifyMode">SSL 验证模式（参考 EnSSLVerifyMode）</param>
            <param name="pemCertFile">证书文件</param>
            <param name="pemKeyFile">私钥文件</param>
            <param name="keyPasswod">私钥密码（没有密码则为空）</param>
            <param name="caPemCertFileOrPath">CA 证书文件或目录（单向验证可选）</param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.SSLPackAgent.#ctor(SpaceCG.HPSocket.SSLVerifyMode,System.String,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="verifyModel">验证模式</param>
            <param name="pemCertFile">证书文件（客户端可选）</param>
            <param name="pemKeyFile">私钥文件（客户端可选）</param>
            <param name="keyPasswod">私钥密码（没有密码则为空）</param>
            <param name="caPemCertFileOrPath">CA 证书文件或目录（单向验证或客户端可选）</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SpaceCG.HPSocket.SSLPackAgent.CreateListener" -->
        <member name="M:SpaceCG.HPSocket.SSLPackAgent.Destroy">
            <summary>
            终止服务并释放资源
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.SSLPackAgent.MaxPackSize">
            <summary>
            读取或设置数据包最大长度
            有效数据包最大长度不能超过 524287/0x7FFFF 字节，默认：262144/0x40000
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.SSLPackAgent.PackHeaderFlag">
            <summary>
            读取或设置包头标识
            有效包头标识取值范围 0 ~ 8191/0x1FFF，当包头标识为 0 时不校验包头，默认：0
            </summary>
        </member>
        <member name="M:SpaceCG.HPSocket.SSLPackClient.#ctor(SpaceCG.HPSocket.SSLVerifyMode,System.String,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="verifyModel">验证模式</param>
            <param name="pemCertFile">证书文件（客户端可选）</param>
            <param name="pemKeyFile">私钥文件（客户端可选）</param>
            <param name="keyPasswod">私钥密码（没有密码则为空）</param>
            <param name="caPemCertFileOrPath">CA 证书文件或目录（单向验证或客户端可选）</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SpaceCG.HPSocket.SSLPackClient.CreateListener" -->
        <member name="M:SpaceCG.HPSocket.SSLPackClient.Destroy">
            <summary>
            终止服务并释放资源
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.SSLPackClient.MaxPackSize">
            <summary>
            读取或设置数据包最大长度
            有效数据包最大长度不能超过 524287/0x7FFFF 字节，默认：262144/0x40000
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.SSLPackClient.PackHeaderFlag">
            <summary>
            读取或设置包头标识
            有效包头标识取值范围 0 ~ 8191/0x1FFF，当包头标识为 0 时不校验包头，默认：0
            </summary>
        </member>
        <member name="M:SpaceCG.HPSocket.SSLPackServer.#ctor(SpaceCG.HPSocket.SSLVerifyMode,System.String,System.String,System.String,System.String,SpaceCG.HPSocket.SSLSdk.SNIServerNameCallback)">
            <summary>
            
            </summary>
            <param name="verifyModel">验证模式</param>
            <param name="pemCertFile">证书文件（客户端可选）</param>
            <param name="pemKeyFile">私钥文件（客户端可选）</param>
            <param name="keyPasswod">私钥密码（没有密码则为空）</param>
            <param name="caPemCertFileOrPath">CA 证书文件或目录（单向验证或客户端可选）</param>
            <param name="sniServerNameCallback">SNI 回调函数指针（可选）</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SpaceCG.HPSocket.SSLPackServer.CreateListener" -->
        <member name="M:SpaceCG.HPSocket.SSLPackServer.Destroy">
            <summary>
            终止服务并释放资源
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.SSLPackServer.MaxPackSize">
            <summary>
            读取或设置数据包最大长度
            有效数据包最大长度不能超过 4194303/0x3FFFFF 字节，默认：262144/0x40000
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.SSLPackServer.PackHeaderFlag">
            <summary>
            读取或设置包头标识
            有效包头标识取值范围  0 ~ 1023/0x3FF，当包头标识为 0 时不校验包头，默认：0
            </summary>
        </member>
        <member name="M:SpaceCG.HPSocket.SSLPullAgent.#ctor(SpaceCG.HPSocket.SSLVerifyMode,System.String,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="verifyModel">验证模式</param>
            <param name="pemCertFile">证书文件（客户端可选）</param>
            <param name="pemKeyFile">私钥文件（客户端可选）</param>
            <param name="keyPasswod">私钥密码（没有密码则为空）</param>
            <param name="caPemCertFileOrPath">CA 证书文件或目录（单向验证或客户端可选）</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SpaceCG.HPSocket.SSLPullAgent.CreateListener" -->
        <member name="M:SpaceCG.HPSocket.SSLPullAgent.Fetch(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            抓取数据
            用户通过该方法从 Socket 组件中抓取数据
            </summary>
            <param name="connId"></param>
            <param name="pBuffer"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.SSLPullAgent.Peek(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            抓取数据
            用户通过该方法从 Socket 组件中抓取数据
            </summary>
            <param name="connId"></param>
            <param name="pBuffer"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.SSLPullAgent.SetCallback">
            <summary>
            设置回调函数
            </summary>
            <param name="prepareConnect"></param>
            <param name="connect"></param>
            <param name="send"></param>
            <param name="recv"></param>
            <param name="close"></param>
            <param name="error"></param>
            <param name="agentShutdown"></param>
        </member>
        <member name="M:SpaceCG.HPSocket.SSLPullAgent.Destroy">
            <summary>
            终止服务并释放资源
            </summary>
        </member>
        <member name="E:SpaceCG.HPSocket.SSLPullClient.OnReceive">
            <summary>
            数据到达事件
            </summary>
        </member>
        <member name="M:SpaceCG.HPSocket.SSLPullClient.#ctor(SpaceCG.HPSocket.SSLVerifyMode,System.String,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="verifyModel">验证模式</param>
            <param name="pemCertFile">证书文件（客户端可选）</param>
            <param name="pemKeyFile">私钥文件（客户端可选）</param>
            <param name="keyPasswod">私钥密码（没有密码则为空）</param>
            <param name="caPemCertFileOrPath">CA 证书文件或目录（单向验证或客户端可选）</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SpaceCG.HPSocket.SSLPullClient.CreateListener" -->
        <member name="M:SpaceCG.HPSocket.SSLPullClient.Fetch(System.IntPtr,System.Int32)">
            <summary>
            抓取数据
            用户通过该方法从 Socket 组件中抓取数据
            </summary>
            <param name="connId"></param>
            <param name="pBuffer"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.SSLPullClient.Peek(System.IntPtr,System.Int32)">
            <summary>
            抓取数据
            用户通过该方法从 Socket 组件中抓取数据
            </summary>
            <param name="connId"></param>
            <param name="pBuffer"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.SSLPullClient.SetCallback">
            <summary>
            设置回调函数
            </summary>
        </member>
        <member name="M:SpaceCG.HPSocket.SSLPullClient.Destroy">
            <summary>
            终止服务并释放资源
            </summary>
        </member>
        <member name="E:SpaceCG.HPSocket.SSLPullServer.OnReceive">
            <summary>
            数据到达事件
            </summary>
        </member>
        <member name="M:SpaceCG.HPSocket.SSLPullServer.#ctor(SpaceCG.HPSocket.SSLVerifyMode,System.String,System.String,System.String,System.String,SpaceCG.HPSocket.SSLSdk.SNIServerNameCallback)">
            <summary>
            
            </summary>
            <param name="verifyModel">验证模式</param>
            <param name="pemCertFile">证书文件（客户端可选）</param>
            <param name="pemKeyFile">私钥文件（客户端可选）</param>
            <param name="keyPasswod">私钥密码（没有密码则为空）</param>
            <param name="caPemCertFileOrPath">CA 证书文件或目录（单向验证或客户端可选）</param>
            <param name="sniServerNameCallback">SNI 回调函数指针（可选）</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SpaceCG.HPSocket.SSLPullServer.CreateListener" -->
        <member name="M:SpaceCG.HPSocket.SSLPullServer.Fetch(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            抓取数据
            用户通过该方法从 Socket 组件中抓取数据
            </summary>
            <param name="connId"></param>
            <param name="pBuffer"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.SSLPullServer.Peek(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            抓取数据
            用户通过该方法从 Socket 组件中抓取数据
            </summary>
            <param name="connId"></param>
            <param name="pBuffer"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.SSLPullServer.Destroy">
            <summary>
            终止服务并释放资源
            </summary>
        </member>
        <member name="T:SpaceCG.HPSocket.SSLSessionMode">
            <summary>
            SSL 工作模式
            描述：标识 SSL 的工作模式，客户端模式或服务端模式
            </summary>
        </member>
        <member name="F:SpaceCG.HPSocket.SSLSessionMode.Client">
            <summary>
            客户端模式
            </summary>
        </member>
        <member name="F:SpaceCG.HPSocket.SSLSessionMode.Server">
            <summary>
            服务端模式
            </summary>
        </member>
        <member name="T:SpaceCG.HPSocket.SSLVerifyMode">
            <summary>
            名称：SSL 验证模式
            描述：SSL 验证模式选项，SSL_VM_PEER 可以和后面两个选项组合一起
            </summary>
        </member>
        <member name="F:SpaceCG.HPSocket.SSLVerifyMode.None">
            <summary>
            SSL_VERIFY_NONE
            </summary>
        </member>
        <member name="F:SpaceCG.HPSocket.SSLVerifyMode.Peer">
            <summary>
            SSL_VERIFY_PEER
            </summary>
        </member>
        <member name="F:SpaceCG.HPSocket.SSLVerifyMode.FailIfNoPeerCert">
            <summary>
            SSL_VERIFY_FAIL_IF_NO_PEER_CERT
            </summary>
        </member>
        <member name="F:SpaceCG.HPSocket.SSLVerifyMode.ClientOnce">
            <summary>
            SSL_VERIFY_CLIENT_ONCE
            </summary>
        </member>
        <member name="T:SpaceCG.HPSocket.SSLSdk">
            <summary>
            Unicode版本
            </summary>
        </member>
        <member name="T:SpaceCG.HPSocket.SSLSdk.SNIServerNameCallback">
            <summary>
            名称：SNI 服务名称回调函数
            描述：根据服务器名称选择 SSL 证书
            返回值：
            0	 -- 成功，使用默认 SSL 证书
            正数	 -- 成功，使用返回值对应的 SNI 主机证书
            负数	 -- 失败，中断 SSL 握手
            </summary>
            <param name="serverName"></param>
            <returns></returns>
        </member>
        <member name="F:SpaceCG.HPSocket.SSLSdk.HPSOCKET_SSL_DLL_PATH">
            <summary>
            HPSocket的文件路径
            </summary>
        </member>
        <member name="M:SpaceCG.HPSocket.SSLSdk.Create_HP_SSLServer(System.IntPtr)">
            <summary>
            创建 HP_SSLServer 对象
            </summary>
            <param name="pListener"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.SSLSdk.Create_HP_SSLAgent(System.IntPtr)">
            <summary>
            创建 HP_SSLAgent 对象
            </summary>
            <param name="pListener"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.SSLSdk.Create_HP_SSLClient(System.IntPtr)">
            <summary>
            创建 HP_SSLClient 对象
            </summary>
            <param name="pListener"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.SSLSdk.Create_HP_SSLPullServer(System.IntPtr)">
            <summary>
            创建 HP_SSLPullServer 对象
            </summary>
            <param name="pListener"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.SSLSdk.Create_HP_SSLPullAgent(System.IntPtr)">
            <summary>
            创建 HP_SSLPullAgent 对象
            </summary>
            <param name="pListener"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.SSLSdk.Create_HP_SSLPullClient(System.IntPtr)">
            <summary>
            创建 HP_SSLPullClient 对象
            </summary>
            <param name="pListener"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.SSLSdk.Create_HP_SSLPackServer(System.IntPtr)">
            <summary>
            创建 HP_SSLPackServer 对象
            </summary>
            <param name="pListener"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.SSLSdk.Create_HP_SSLPackAgent(System.IntPtr)">
            <summary>
            创建 HP_SSLPackAgent 对象
            </summary>
            <param name="pListener"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.SSLSdk.Create_HP_SSLPackClient(System.IntPtr)">
            <summary>
            创建 HP_SSLPackClient 对象
            </summary>
            <param name="pListener"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.SSLSdk.Destroy_HP_SSLServer(System.IntPtr)">
            <summary>
            销毁 HP_SSLServer 对象
            </summary>
            <param name="pObj"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.SSLSdk.Destroy_HP_SSLAgent(System.IntPtr)">
            <summary>
            销毁 HP_SSLAgent 对象
            </summary>
            <param name="pObj"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.SSLSdk.Destroy_HP_SSLClient(System.IntPtr)">
            <summary>
            销毁 HP_SSLClient 对象
            </summary>
            <param name="pObj"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.SSLSdk.Destroy_HP_SSLPullServer(System.IntPtr)">
            <summary>
            销毁 HP_SSLPullServer 对象
            </summary>
            <param name="pObj"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.SSLSdk.Destroy_HP_SSLPullAgent(System.IntPtr)">
            <summary>
            销毁 HP_SSLPullAgent 对象
            </summary>
            <param name="pObj"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.SSLSdk.Destroy_HP_SSLPullClient(System.IntPtr)">
            <summary>
            销毁 HP_SSLPullClient 对象
            </summary>
            <param name="pObj"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.SSLSdk.Destroy_HP_SSLPackServer(System.IntPtr)">
            <summary>
            销毁 HP_SSLPackServer 对象
            </summary>
            <param name="pObj"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.SSLSdk.Destroy_HP_SSLPackAgent(System.IntPtr)">
            <summary>
            销毁 HP_SSLPackAgent 对象
            </summary>
            <param name="pObj"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.SSLSdk.Destroy_HP_SSLPackClient(System.IntPtr)">
            <summary>
            销毁 HP_SSLPackClient 对象
            </summary>
            <param name="pObj"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.SSLSdk.HP_SSLAgent_SetupSSLContext(System.IntPtr,SpaceCG.HPSocket.SSLVerifyMode,System.String,System.String,System.String,System.String)">
            <summary>
            名称：初始化通信组件 SSL 环境参数
            描述：SSL 环境参数必须在 SSL 通信组件启动前完成初始化，否则启动失败
            </summary>
            <param name="pAgent"></param>
            <param name="iVerifyMode">SSL 验证模式（参考 EnSSLVerifyMode）</param>
            <param name="lpszPemCertFile">证书文件（客户端可选）</param>
            <param name="lpszPemKeyFile">私钥文件（客户端可选）</param>
            <param name="lpszKeyPasswod">私钥密码（没有密码则为空）</param>
            <param name="lpszCAPemCertFileOrPath"> CA 证书文件或目录（单向验证或客户端可选）</param>
            <returns>TRUE.成功 FALSE.失败，可通过 SYS_GetLastError() 获取失败原因</returns>
        </member>
        <member name="M:SpaceCG.HPSocket.SSLSdk.HP_SSLClient_SetupSSLContext(System.IntPtr,SpaceCG.HPSocket.SSLVerifyMode,System.String,System.String,System.String,System.String)">
            <summary>
            名称：初始化通信组件 SSL 环境参数
            描述：SSL 环境参数必须在 SSL 通信组件启动前完成初始化，否则启动失败
            </summary>
            <param name="pClient"></param>
            <param name="iVerifyMode">SSL 验证模式（参考 EnSSLVerifyMode）</param>
            <param name="lpszPemCertFile">证书文件（客户端可选）</param>
            <param name="lpszPemKeyFile">私钥文件（客户端可选）</param>
            <param name="lpszKeyPasswod">私钥密码（没有密码则为空）</param>
            <param name="lpszCAPemCertFileOrPath"> CA 证书文件或目录（单向验证或客户端可选）</param>
            <returns>TRUE.成功 FALSE.失败，可通过 SYS_GetLastError() 获取失败原因</returns>
        </member>
        <member name="M:SpaceCG.HPSocket.SSLSdk.HP_SSLServer_SetupSSLContext(System.IntPtr,SpaceCG.HPSocket.SSLVerifyMode,System.String,System.String,System.String,System.String,SpaceCG.HPSocket.SSLSdk.SNIServerNameCallback)">
            <summary>
            名称：初始化通信组件 SSL 环境参数
            描述：SSL 环境参数必须在 SSL 通信组件启动前完成初始化，否则启动失败
            </summary>
            <param name="pServer"></param>
            <param name="iVerifyMode">SSL 验证模式（参考 EnSSLVerifyMode）</param>
            <param name="lpszPemCertFile">证书文件（客户端可选）</param>
            <param name="lpszPemKeyFile">私钥文件（客户端可选）</param>
            <param name="lpszKeyPasswod">私钥密码（没有密码则为空）</param>
            <param name="lpszCAPemCertFileOrPath"> CA 证书文件或目录（单向验证或客户端可选）</param>
            <param name="fnServerNameCallback">SNI 回调函数指针（可选）</param>
            <returns>TRUE.成功 FALSE.失败，可通过 SYS_GetLastError() 获取失败原因</returns>
        </member>
        <member name="M:SpaceCG.HPSocket.SSLSdk.HP_SSLServer_AddSSLContext(System.IntPtr,SpaceCG.HPSocket.SSLVerifyMode,System.String,System.String,System.String,System.String)">
            <summary>
            名称：初始化通信组件 SSL 环境参数
            描述：SSL 环境参数必须在 SSL 通信组件启动前完成初始化，否则启动失败
            </summary>
            <param name="pServer"></param>
            <param name="iVerifyMode">SSL 验证模式（参考 EnSSLVerifyMode）</param>
            <param name="lpszPemCertFile">证书文件（客户端可选）</param>
            <param name="lpszPemKeyFile">私钥文件（客户端可选）</param>
            <param name="lpszKeyPasswod">私钥密码（没有密码则为空）</param>
            <param name="lpszCAPemCertFileOrPath"> CA 证书文件或目录（单向验证或客户端可选）</param>
            <returns>TRUE.成功 FALSE.失败，可通过 SYS_GetLastError() 获取失败原因</returns>
        </member>
        <member name="M:SpaceCG.HPSocket.SSLSdk.HP_SSLAgent_CleanupSSLContext(System.IntPtr)">
            <summary>
            名称：清理通信组件 SSL 运行环境
            描述：清理通信组件 SSL 运行环境，回收 SSL 相关内存
            1、通信组件析构时会自动调用本方法
            2、当要重新设置通信组件 SSL 环境参数时，需要先调用本方法清理原先的环境参数
            </summary>
            <param name="pAgent"></param>
        </member>
        <member name="M:SpaceCG.HPSocket.SSLSdk.HP_SSLClient_CleanupSSLContext(System.IntPtr)">
            <summary>
            名称：清理通信组件 SSL 运行环境
            描述：清理通信组件 SSL 运行环境，回收 SSL 相关内存
            1、通信组件析构时会自动调用本方法
            2、当要重新设置通信组件 SSL 环境参数时，需要先调用本方法清理原先的环境参数
            </summary>
            <param name="pClient"></param>
        </member>
        <member name="M:SpaceCG.HPSocket.SSLSdk.HP_SSLServer_CleanupSSLContext(System.IntPtr)">
            <summary>
            名称：清理通信组件 SSL 运行环境
            描述：清理通信组件 SSL 运行环境，回收 SSL 相关内存
            1、通信组件析构时会自动调用本方法
            2、当要重新设置通信组件 SSL 环境参数时，需要先调用本方法清理原先的环境参数
            </summary>
            <param name="pServer"></param>
        </member>
        <member name="M:SpaceCG.HPSocket.SSLSdk.HP_SSL_RemoveThreadLocalState">
            <summary>
            清理线程局部环境 SSL 资源
            描述：清理 SSL 全局运行环境，回收 SSL 相关内存
            任何一个操作 SSL 的线程，通信结束时都需要清理线程局部环境 SSL 资源
            1、主线程和 HP-Socket 工作线程在通信结束时会自动清理线程局部环境 SSL 资源。因此，一般情况下不必手工调用本方法
            2、特殊情况下，当自定义线程参与 HP-Socket 通信操作并检查到 SSL 内存泄漏时，需在每次通信结束时自定义线程调用本方法
            </summary>
        </member>
        <member name="M:SpaceCG.HPSocket.SSLSdk.HP_SSLServer_StartSSLHandShake(System.IntPtr,System.IntPtr)">
            <summary>
            启动 SSL 握手
            当通信组件设置为非自动握手时，需要调用本方法启动 SSL 握手
            </summary>
            <param name="pServer"></param>
            <param name="dwConnID"></param>
            <returns>TRUE	-- 成功，FALSE	-- 失败，可通过 SYS_GetLastError() 获取失败原因</returns>
        </member>
        <member name="M:SpaceCG.HPSocket.SSLSdk.HP_SSLServer_SetSSLAutoHandShake(System.IntPtr,System.Boolean)">
            <summary>
            设置通信组件握手方式（默认：TRUE，自动握手)
            </summary>
            <param name="pServer"></param>
            <param name="bAutoHandShake"></param>
        </member>
        <member name="M:SpaceCG.HPSocket.SSLSdk.HP_SSLServer_IsSSLAutoHandShake(System.IntPtr)">
            <summary>
            获取通信组件握手方式
            </summary>
            <param name="pServer"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.SSLSdk.HP_SSLAgent_StartSSLHandShake(System.IntPtr,System.IntPtr)">
            <summary>
            启动 SSL 握手
            当通信组件设置为非自动握手时，需要调用本方法启动 SSL 握手
            </summary>
            <param name="pAgent"></param>
            <param name="dwConnID"></param>
            <returns>TRUE	-- 成功，FALSE	-- 失败，可通过 SYS_GetLastError() 获取失败原因</returns>
        </member>
        <member name="M:SpaceCG.HPSocket.SSLSdk.HP_SSLAgent_SetSSLAutoHandShake(System.IntPtr,System.Boolean)">
            <summary>
            设置通信组件握手方式（默认：TRUE，自动握手）
            </summary>
            <param name="pAgent"></param>
            <param name="bAutoHandShake"></param>
        </member>
        <member name="M:SpaceCG.HPSocket.SSLSdk.HP_SSLAgent_IsSSLAutoHandShake(System.IntPtr)">
            <summary>
            获取通信组件握手方式
            </summary>
            <param name="pAgent"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.SSLSdk.HP_SSLClient_StartSSLHandShake(System.IntPtr)">
            <summary>
            启动 SSL 握手
            当通信组件设置为非自动握手时，需要调用本方法启动 SSL 握手
            </summary>
            <param name="pClient"></param>
            <returns>TRUE	-- 成功，FALSE	-- 失败，可通过 SYS_GetLastError() 获取失败原因</returns>
        </member>
        <member name="M:SpaceCG.HPSocket.SSLSdk.HP_SSLClient_SetSSLAutoHandShake(System.IntPtr,System.Boolean)">
            <summary>
            设置通信组件握手方式（默认：TRUE，自动握手）
            </summary>
            <param name="pClient"></param>
            <param name="bAutoHandShake"></param>
        </member>
        <member name="M:SpaceCG.HPSocket.SSLSdk.HP_SSLClient_IsSSLAutoHandShake(System.IntPtr)">
            <summary>
            获取通信组件握手方式
            </summary>
            <param name="pClient"></param>
            <returns></returns>
        </member>
        <member name="P:SpaceCG.HPSocket.SSLServer.VerifyMode">
            <summary>
            验证模式
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.SSLServer.PemCertFile">
            <summary>
            证书文件（客户端可选）
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.SSLServer.PemKeyFile">
            <summary>
            私钥文件（客户端可选）
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.SSLServer.KeyPasswod">
            <summary>
            私钥密码（没有密码则为空）
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.SSLServer.CAPemCertFileOrPath">
            <summary>
            CA 证书文件或目录（单向验证或客户端可选）
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.SSLServer.SNIServerNameCallback">
            <summary>
            名称：SNI 服务名称回调函数
            描述：根据服务器名称选择 SSL 证书
            返回值：
            0	 -- 成功，使用默认 SSL 证书
            正数	 -- 成功，使用返回值对应的 SNI 主机证书
            负数	 -- 失败，中断 SSL 握手
            </summary>
            <param name="serverName"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.SSLServer.#ctor(SpaceCG.HPSocket.SSLVerifyMode,System.String,System.String,System.String,System.String,SpaceCG.HPSocket.SSLSdk.SNIServerNameCallback)">
            <summary>
            
            </summary>
            <param name="verifyModel">验证模式</param>
            <param name="pemCertFile">证书文件（客户端可选）</param>
            <param name="pemKeyFile">私钥文件（客户端可选）</param>
            <param name="keyPasswod">私钥密码（没有密码则为空）</param>
            <param name="caPemCertFileOrPath">CA 证书文件或目录（单向验证或客户端可选）</param>
            <param name="sniServerNameCallback">SNI 回调函数指针（可选）</param>
        </member>
        <member name="M:SpaceCG.HPSocket.SSLServer.Initialize">
            <summary>
            初始化SSL环境
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.SSLServer.Uninitialize">
            <summary>
            反初始化SSL环境
            </summary>
        </member>
        <member name="M:SpaceCG.HPSocket.SSLServer.AddServerContext(SpaceCG.HPSocket.SSLVerifyMode,System.String,System.String,System.String,System.String)">
            <summary>
            名称：增加 SNI 主机证书（只用于服务端）
            描述：SSL 服务端在 SetupSSLContext() 成功后可以调用本方法增加多个 SNI 主机证书
            返回值：正数		-- 成功，并返回 SNI 主机证书对应的索引，该索引用于在 SNI 回调函数中定位 SNI 主机
            返回值：负数		-- 失败，可通过 SYS_GetLastError() 获取失败原因
            </summary>
            <param name="verifyMode">SSL 验证模式（参考 EnSSLVerifyMode）</param>
            <param name="pemCertFile">证书文件</param>
            <param name="pemKeyFile">私钥文件</param>
            <param name="keyPasswod">私钥密码（没有密码则为空）</param>
            <param name="caPemCertFileOrPath">CA 证书文件或目录（单向验证可选）</param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.SSLServer.StartSSLHandShake(System.IntPtr)">
            <summary>
            启动 SSL 握手
            当通信组件设置为非自动握手时，需要调用本方法启动 SSL 握手
            </summary>
            <param name="connId"></param>
            <returns></returns>
        </member>
        <member name="P:SpaceCG.HPSocket.SSLServer.AutoHandShake">
            <summary>
            获取或设置通信组件握手方式（默认：TRUE，自动握手)
            </summary>
        </member>
        <member name="E:SpaceCG.HPSocket.TcpAgent.OnConnect">
            <summary>
            连接事件
            </summary>
        </member>
        <member name="E:SpaceCG.HPSocket.TcpAgent.OnSend">
            <summary>
            数据发送事件
            </summary>
        </member>
        <member name="E:SpaceCG.HPSocket.TcpAgent.OnPrepareConnect">
            <summary>
            准备连接事件
            </summary>
        </member>
        <member name="E:SpaceCG.HPSocket.TcpAgent.OnReceive">
            <summary>
            数据到达事件
            </summary>
        </member>
        <member name="E:SpaceCG.HPSocket.TcpAgent.OnPointerDataReceive">
            <summary>
            数据到达事件(指针数据)
            </summary>
        </member>
        <member name="E:SpaceCG.HPSocket.TcpAgent.OnClose">
            <summary>
            连接关闭事件
            </summary>
        </member>
        <member name="E:SpaceCG.HPSocket.TcpAgent.OnShutdown">
            <summary>
            服务关闭事件
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SpaceCG.HPSocket.TcpAgent.CreateListener" -->
        <member name="M:SpaceCG.HPSocket.TcpAgent.Destroy">
            <summary>
            终止服务并释放资源
            </summary>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpAgent.Start(System.String,System.Boolean)">
            <summary>
            启动通讯组件
            启动完成后可开始连接远程服务器
            </summary>
            <param name="address">绑定地址</param>
            <param name="async">是否异步</param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpAgent.Stop">
            <summary>
            停止通讯组件
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpAgent.Connect(System.String,System.UInt16,System.IntPtr@)">
            <summary>
            连接服务器，连接成功后 IAgentListener 会接收到 OnConnect() 事件
            </summary>
            <param name="address"></param>
            <param name="port"></param>
            <param name="connId"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpAgent.Connect(System.String,System.UInt16,System.IntPtr@,System.UInt16)">
            <summary>
            连接服务器，连接成功后 IAgentListener 会接收到 OnConnect() 事件
            </summary>
            <param name="address"></param>
            <param name="port"></param>
            <param name="connId"></param>
            <param name="usLocalPort">本地端口</param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpAgent.Send(System.IntPtr,System.Byte[],System.Int32)">
            <summary>
            发送数据
            </summary>
            <param name="connId"></param>
            <param name="bytes"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpAgent.Send``1(System.IntPtr,``0)">
            <summary>
            发送数据
            </summary>
            <param name="connId"></param>
            <param name="bufferPtr"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpAgent.SendBySerializable(System.IntPtr,System.Object)">
            <summary>
            序列化对象后发送数据,序列化对象所属类必须标记[Serializable]
            </summary>
            <param name="connId"></param>
            <param name="bufferPtr"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpAgent.Send(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            发送数据
            </summary>
            <param name="connId"></param>
            <param name="bufferPtr"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpAgent.Send(System.IntPtr,System.Byte[],System.Int32,System.Int32)">
            <summary>
            发送数据
            </summary>
            <param name="connId"></param>
            <param name="bytes"></param>
            <param name="offset">针对bytes的偏移</param>
            <param name="size">发多大</param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpAgent.Send(System.IntPtr,System.IntPtr,System.Int32,System.Int32)">
            <summary>
            发送数据
            </summary>
            <param name="connId"></param>
            <param name="bufferPtr"></param>
            <param name="offset">针对bufferPtr的偏移</param>
            <param name="size">发多大</param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpAgent.SendPackets(System.IntPtr,SpaceCG.HPSocket.WSABUF[],System.Int32)">
            <summary>
            发送多组数据
            向指定连接发送多组数据
            TCP - 顺序发送所有数据包
            </summary>
            <param name="connId">连接 ID</param>
            <param name="pBuffers">发送缓冲区数组</param>
            <param name="iCount">发送缓冲区数目</param>
            <returns>TRUE.成功,FALSE.失败，可通过 SYSGetLastError() 获取 Windows 错误代码</returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpAgent.SendPackets``1(System.IntPtr,``0[])">
            <summary>
            发送多组数据
            向指定连接发送多组数据
            TCP - 顺序发送所有数据包
            </summary>
            <param name="connId">连接 ID</param>
            <param name="pBuffers">发送缓冲区数组</param>
            <param name="iCount">发送缓冲区数目</param>
            <returns>TRUE.成功,FALSE.失败，可通过 SYSGetLastError() 获取 Windows 错误代码</returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpAgent.SendSmallFile(System.IntPtr,System.String,SpaceCG.HPSocket.WSABUF@,SpaceCG.HPSocket.WSABUF@)">
            <summary>
            名称：发送小文件
            描述：向指定连接发送 4096 KB 以下的小文件
            </summary>
            <param name="connId"></param>
            <param name="filePath">文件路径</param>
            <param name="head">头部附加数据</param>
            <param name="tail">尾部附加数据</param>
            <returns>TRUE.成功,FALSE.失败，可通过 SYSGetLastError() 获取 Windows 错误代码</returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpAgent.SendSmallFile(System.IntPtr,System.String,System.Byte[],System.Byte[])">
            <summary>
            名称：发送小文件
            描述：向指定连接发送 4096 KB 以下的小文件
            </summary>
            <param name="connId"></param>
            <param name="filePath">文件路径</param>
            <param name="head">头部附加数据,可以为null</param>
            <param name="tail">尾部附加数据,可以为null</param>
            <returns>TRUE.成功,FALSE.失败，可通过 SYSGetLastError() 获取 Windows 错误代码</returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpAgent.SendSmallFile``2(System.IntPtr,System.String,``0,``1)">
            <summary>
            名称：发送小文件
            描述：向指定连接发送 4096 KB 以下的小文件
            </summary>
            <param name="connId"></param>
            <param name="filePath">文件路径</param>
            <param name="head">头部附加数据,可以为null</param>
            <param name="tail">尾部附加数据,可以为null</param>
            <returns>TRUE.成功,FALSE.失败，可通过 SYSGetLastError() 获取 Windows 错误代码</returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpAgent.Disconnect(System.IntPtr,System.Boolean)">
            <summary>
            断开某个连接
            </summary>
            <param name="connId"></param>
            <param name="force">强制</param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpAgent.DisconnectLongConnections(System.UInt32,System.Boolean)">
            <summary>
            断开超过指定时间的连接
            </summary>
            <param name="period">毫秒</param>
            <param name="force">强制</param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpAgent.DisconnectSilenceConnections(System.UInt32,System.Boolean)">
            <summary>
            断开超过指定时长的静默连接
            </summary>
            <param name="period">毫秒</param>
            <param name="force">强制</param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpAgent.PauseReceive(System.IntPtr)">
            <summary>
            暂停接收
            </summary>
            <param name="connId"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpAgent.ResumeReceive(System.IntPtr)">
            <summary>
            唤醒接收
            </summary>
            <param name="connId"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpAgent.GetReceiveState(System.IntPtr)">
            <summary>
            获取连接的接收状态
            </summary>
            <param name="connId"></param>
            <returns></returns>
        </member>
        <member name="P:SpaceCG.HPSocket.TcpAgent.ErrorCode">
            <summary>
            获取错误码
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.TcpAgent.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.TcpAgent.ErrorMessage">
            <summary>
            获取错误信息
            </summary>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpAgent.GetPendingDataLength(System.IntPtr,System.Int32@)">
            <summary>
            获取连接中未发出数据的长度
            </summary>
            <param name="connId"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="P:SpaceCG.HPSocket.TcpAgent.State">
            <summary>
            状态
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.TcpAgent.IsSecure">
            <summary>
            检测是否为安全连接（SSL/HTTPS）
            </summary>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpAgent.GetAllConnectionIDs">
            <summary>
            获取所有连接,未获取到连接返回null
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpAgent.GetLocalAddress(System.IntPtr,System.String@,System.UInt16@)">
            <summary>
            获取某个连接的本地地址信息
            </summary>
            <param name="ip"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpAgent.GetRemoteAddress(System.IntPtr,System.String@,System.UInt16@)">
            <summary>
            获取某个连接的远程地址信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpAgent.GetRemoteHost(System.IntPtr,System.String@,System.UInt16@)">
            <summary>
            获取某个连接的远程主机信息
            </summary>
            <param name="connId"></param>
            <param name="host"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpAgent.GetConnectPeriod(System.IntPtr,System.UInt32@)">
            <summary>
            获取指定连接的连接时长（毫秒）
            </summary>
            <param name="connId"></param>
            <param name="period"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpAgent.GetSilencePeriod(System.IntPtr,System.UInt32@)">
            <summary>
            获取某个连接静默时间（毫秒）
            </summary>
            <param name="connId"></param>
            <param name="period"></param>
            <returns></returns>
        </member>
        <member name="P:SpaceCG.HPSocket.TcpAgent.IsReuseAddress">
            <summary>
            获取或设置是否启用地址重用机制（默认：不启用）
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.TcpAgent.MaxConnectionCount">
            <summary>
            设置最大连接数（组件会根据设置值预分配内存，因此需要根据实际情况设置，不宜过大）
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.TcpAgent.WorkerThreadCount">
            <summary>
            读取或设置工作线程数量（通常设置为 2 * CPU + 2）
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.TcpAgent.SocketBufferSize">
            <summary>
            读取或设置通信数据缓冲区大小（根据平均通信数据包大小调整设置，通常设置为 1024 的倍数）
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.TcpAgent.FreeSocketObjLockTime">
            <summary>
            读取或设置 Socket 缓存对象锁定时间（毫秒，在锁定期间该 Socket 缓存对象不能被获取使用）
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.TcpAgent.FreeSocketObjPool">
            <summary>
            读取或设置 Socket 缓存池大小（通常设置为平均并发连接数量的 1/3 - 1/2）
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.TcpAgent.FreeBufferObjPool">
            <summary>
            读取或设置内存块缓存池大小（通常设置为 Socket 缓存池大小的 2 - 3 倍）
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.TcpAgent.FreeSocketObjHold">
            <summary>
            读取或设置 Socket 缓存池回收阀值（通常设置为 Socket 缓存池大小的 3 倍）
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.TcpAgent.FreeBufferObjHold">
            <summary>
            读取或设置内存块缓存池回收阀值（通常设置为内存块缓存池大小的 3 倍）
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.TcpAgent.KeepAliveTime">
            <summary>
            读取或设置心跳包间隔（毫秒，0 则不发送心跳包））
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.TcpAgent.KeepAliveInterval">
            <summary>
            读取或设置心跳确认包检测间隔（毫秒，0 不发送心跳包，如果超过若干次 [默认：WinXP 5 次, Win7 10 次] 检测不到心跳确认包则认为已断线）
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.TcpAgent.IsMarkSilence">
            <summary>
            读取或设置是否标记静默时间（设置为 TRUE 时 DisconnectSilenceConnections() 和 GetSilencePeriod() 才有效，默认：FALSE）
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.TcpAgent.SendPolicy">
            <summary>
            读取或设置数据发送策略
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.TcpAgent.OnSendSyncPolicy">
            <summary>
            获取或设置 OnSend 事件同步策略
            </summary>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpAgent.GetSocketErrorDesc(SpaceCG.HPSocket.SocketError)">
            <summary>
            根据错误码返回错误信息
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpAgent.SetCallback">
            <summary>
            设置回调函数
            </summary>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpAgent.SYSGetLastError">
            <summary>
            获取系统返回的错误码
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpAgent.SYSWSAGetLastError">
            <summary>
            调用系统的 ::WSAGetLastError() 方法获取通信错误代码
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpAgent.SYS_SetSocketOption(System.IntPtr,System.Int32,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            调用系统的 setsockopt()
            </summary>
            <param name="sock"></param>
            <param name="level"></param>
            <param name="name"></param>
            <param name="val"></param>
            <param name="len"></param>
            <returns></returns>
            
        </member>
        <member name="M:SpaceCG.HPSocket.TcpAgent.SYSGetSocketOption(System.IntPtr,System.Int32,System.Int32,System.IntPtr,System.Int32@)">
            <summary>
            调用系统的 getsockopt()
            </summary>
            <param name="sock"></param>
            <param name="level"></param>
            <param name="name"></param>
            <param name="val"></param>
            <param name="len"></param>
            <returns></returns>
            
        </member>
        <member name="M:SpaceCG.HPSocket.TcpAgent.SYSIoctlSocket(System.IntPtr,System.Int64,System.IntPtr)">
            <summary>
            调用系统的 ioctlsocket()
            </summary>
            <param name="sock"></param>
            <param name="cmd"></param>
            <param name="arg"></param>
            <returns></returns>
            
        </member>
        <member name="M:SpaceCG.HPSocket.TcpAgent.SYS_WSAIoctl(System.IntPtr,System.UInt32,System.IntPtr,System.UInt32,System.IntPtr,System.UInt32,System.UInt32)">
            <summary>
            调用系统的 ::WSAIoctl()
            </summary>
            <param name="sock"></param>
            <param name="dwIoControlCode"></param>
            <param name="lpvInBuffer"></param>
            <param name="cbInBuffer"></param>
            <param name="lpvOutBuffer"></param>
            <param name="cbOutBuffer"></param>
            <param name="lpcbBytesReturned"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpAgent.StructureToByte``1(``0)">
            <summary>
            由结构体转换为byte数组
            </summary>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpAgent.ByteToStructure``1(System.Byte[])">
            <summary>
            由byte数组转换为结构体
            </summary>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpAgent.ObjectToBytes(System.Object)">
            <summary>
            对象序列化成byte[]
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpAgent.BytesToObject(System.Byte[])">
            <summary>
            byte[]序列化成对象
            </summary>
            <param name="Bytes"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpAgent.BytesToStruct``1(System.Byte[])">
            <summary>
            byte[]转结构体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="E:SpaceCG.HPSocket.TcpClient.OnPrepareConnect">
            <summary>
            准备连接了事件
            </summary>
        </member>
        <member name="E:SpaceCG.HPSocket.TcpClient.OnConnect">
            <summary>
            连接事件
            </summary>
        </member>
        <member name="E:SpaceCG.HPSocket.TcpClient.OnSend">
            <summary>
            数据发送事件
            </summary>
        </member>
        <member name="E:SpaceCG.HPSocket.TcpClient.OnReceive">
            <summary>
            数据到达事件
            </summary>
        </member>
        <member name="E:SpaceCG.HPSocket.TcpClient.OnPointerDataReceive">
            <summary>
            数据到达事件(指针数据)
            </summary>
        </member>
        <member name="E:SpaceCG.HPSocket.TcpClient.OnClose">
            <summary>
            连接关闭事件
            </summary>
        </member>
        <member name="E:SpaceCG.HPSocket.TcpClient.OnHandShake">
            <summary>
            握手事件
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.TcpClient.IsConnected">
            <summary>
            获取是否属于连接状态
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SpaceCG.HPSocket.TcpClient.CreateListener" -->
        <member name="M:SpaceCG.HPSocket.TcpClient.Destroy">
            <summary>
            终止服务并释放资源
            </summary>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpClient.Connect(System.String,System.UInt16,System.Boolean)">
            <summary>
            启动通讯组件并连接到服务器
            </summary>
            <param name="address">远程地址</param>
            <param name="port">远程端口</param>
            <param name="async">是否异步</param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpClient.Connect(System.String,System.UInt16,System.String,System.Boolean)">
            <summary>
            启动通讯组件并连接到服务器
            </summary>
            <param name="address">远程地址</param>
            <param name="port">远程端口</param>
            <param name="bindAddress">本地绑定到哪个ip?,多ip下可以选择绑定到指定ip</param>
            <param name="async">是否异步</param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpClient.Connect(System.String,System.UInt16,System.String,System.UInt16,System.Boolean)">
            <summary>
            启动通讯组件并连接到服务器
            </summary>
            <param name="address">远程地址</param>
            <param name="port">远程端口</param>
            <param name="bindAddress">本地绑定到哪个ip?,多ip下可以选择绑定到指定ip</param>
            <param name="usLocalPort">本地端口</param>
            <param name="async">是否异步</param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpClient.Stop">
            <summary>
            停止通讯组件
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpClient.Send(System.Byte[],System.Int32)">
            <summary>
            发送数据
            </summary>
            <param name="bytes"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpClient.Send(System.IntPtr,System.Int32)">
            <summary>
            发送数据
            </summary>
            <param name="bufferPtr"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpClient.Send``1(``0)">
            <summary>
            发送数据
            </summary>
            <param name="bufferPtr"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpClient.SendBySerializable(System.Object)">
            <summary>
            序列化对象后发送数据,序列化对象所属类必须标记[Serializable]
            </summary>
            <param name="bufferPtr"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpClient.Send(System.Byte[],System.Int32,System.Int32)">
            <summary>
            发送数据
            </summary>
            <param name="bytes"></param>
            <param name="offset">针对bytes的偏移</param>
            <param name="size">发多大</param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpClient.Send(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            发送数据
            </summary>
            <param name="bufferPtr"></param>
            <param name="offset">针对bufferPtr的偏移</param>
            <param name="size">发多大</param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpClient.SendPackets(SpaceCG.HPSocket.WSABUF[],System.Int32)">
            <summary>
            发送多组数据
            向指定连接发送多组数据
            TCP - 顺序发送所有数据包
            </summary>
            <param name="pBuffers">发送缓冲区数组</param>
            <param name="iCount">发送缓冲区数目</param>
            <returns>TRUE.成功,FALSE.失败，可通过 SYSGetLastError() 获取 Windows 错误代码</returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpClient.SendPackets``1(``0[])">
            <summary>
            发送多组数据
            向指定连接发送多组数据
            TCP - 顺序发送所有数据包
            </summary>
            <param name="pBuffers">发送缓冲区数组</param>
            <param name="iCount">发送缓冲区数目</param>
            <returns>TRUE.成功,FALSE.失败，可通过 SYSGetLastError() 获取 Windows 错误代码</returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpClient.SendSmallFile(System.String,SpaceCG.HPSocket.WSABUF@,SpaceCG.HPSocket.WSABUF@)">
            <summary>
            名称：发送小文件
            描述：向指定连接发送 4096 KB 以下的小文件
            </summary>
            <param name="filePath">文件路径</param>
            <param name="head">头部附加数据</param>
            <param name="tail">尾部附加数据</param>
            <returns>TRUE.成功,FALSE.失败，可通过 SYSGetLastError() 获取 Windows 错误代码</returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpClient.SendSmallFile(System.String,System.Byte[],System.Byte[])">
            <summary>
            名称：发送小文件
            描述：向指定连接发送 4096 KB 以下的小文件
            </summary>
            <param name="filePath">文件路径</param>
            <param name="head">头部附加数据,可以为null</param>
            <param name="tail">尾部附加数据,可以为null</param>
            <returns>TRUE.成功,FALSE.失败，可通过 SYSGetLastError() 获取 Windows 错误代码</returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpClient.SendSmallFile``2(System.String,``0,``1)">
            <summary>
            名称：发送小文件
            描述：向指定连接发送 4096 KB 以下的小文件
            </summary>
            <param name="filePath">文件路径</param>
            <param name="head">头部附加数据,可以为null</param>
            <param name="tail">尾部附加数据,可以为null</param>
            <returns>TRUE.成功,FALSE.失败，可通过 SYSGetLastError() 获取 Windows 错误代码</returns>
        </member>
        <member name="P:SpaceCG.HPSocket.TcpClient.ErrorCode">
            <summary>
            获取错误码
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.TcpClient.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.TcpClient.ErrorMessage">
            <summary>
            获取错误信息
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.TcpClient.ReceiveState">
            <summary>
            获取或设置接收状态
            </summary>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpClient.GetPendingDataLength(System.Int32@)">
            <summary>
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpClient.GetExtra``1">
            <summary>
            获取附加数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpClient.SetExtra(System.Object)">
            <summary>
            设置附加数据
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpClient.RemoveExtra">
            <summary>
            删除附加数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpClient.GetListenAddress(System.String@,System.UInt16@)">
            <summary>
            获取监听socket的地址信息
            </summary>
            <param name="ip"></param>
            <param name="ipLength"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpClient.GetRemoteHost(System.String@,System.UInt16@)">
            <summary>
            获取连接的远程主机信息
            </summary>
            <param name="host"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="P:SpaceCG.HPSocket.TcpClient.IsStarted">
            <summary>
            是否启动
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.TcpClient.State">
            <summary>
            状态
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.TcpClient.ConnectionId">
            <summary>
            获取该组件对象的连接Id
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.TcpClient.IsSecure">
            <summary>
            检测是否为安全连接（SSL/HTTPS）
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.TcpClient.FreeBufferPoolSize">
            <summary>
            读取或设置内存块缓存池大小（通常设置为 -> PUSH 模型：5 - 10；PULL 模型：10 - 20 ）
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.TcpClient.FreeBufferPoolHold">
            <summary>
             读取或设置内存块缓存池回收阀值（通常设置为内存块缓存池大小的 3 倍）
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.TcpClient.SocketBufferSize">
            <summary>
             读取或设置通信数据缓冲区大小（根据平均通信数据包大小调整设置，通常设置为：(N * 1024) - sizeof(TBufferObj)）
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.TcpClient.KeepAliveTime">
            <summary>
             读取或设置心跳包间隔（毫秒，0 则不发送心跳包）
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.TcpClient.KeepAliveInterval">
            <summary>
             读取或设置心跳确认包检测间隔（毫秒，0 不发送心跳包，如果超过若干次 [默认：WinXP 5 次, Win7 10 次] 检测不到心跳确认包则认为已断线）
            </summary>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpClient.GetSocketErrorDesc(SpaceCG.HPSocket.SocketError)">
            <summary>
            根据错误码返回错误信息
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpClient.SetCallback">
            <summary>
            设置回调函数
            </summary>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpClient.SYSGetLastError">
            <summary>
            获取系统返回的错误码
            </summary>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpClient.SYSWSAGetLastError">
            <summary>
            调用系统的 ::WSAGetLastError() 方法获取通信错误代码
            </summary>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpClient.SYS_SetSocketOption(System.IntPtr,System.Int32,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            调用系统的 setsockopt()
            </summary>
            <param name="sock"></param>
            <param name="level"></param>
            <param name="name"></param>
            <param name="val"></param>
            <param name="len"></param>
            <returns></returns>
            
        </member>
        <member name="M:SpaceCG.HPSocket.TcpClient.SYSGetSocketOption(System.IntPtr,System.Int32,System.Int32,System.IntPtr,System.Int32@)">
            <summary>
            调用系统的 getsockopt()
            </summary>
            <param name="sock"></param>
            <param name="level"></param>
            <param name="name"></param>
            <param name="val"></param>
            <param name="len"></param>
            <returns></returns>
            
        </member>
        <member name="M:SpaceCG.HPSocket.TcpClient.SYSIoctlSocket(System.IntPtr,System.Int64,System.IntPtr)">
            <summary>
            调用系统的 ioctlsocket()
            </summary>
            <param name="sock"></param>
            <param name="cmd"></param>
            <param name="arg"></param>
            <returns></returns>
            
        </member>
        <member name="M:SpaceCG.HPSocket.TcpClient.SYS_WSAIoctl(System.IntPtr,System.UInt32,System.IntPtr,System.UInt32,System.IntPtr,System.UInt32,System.UInt32)">
            <summary>
            调用系统的 ::WSAIoctl()
            </summary>
            <param name="sock"></param>
            <param name="dwIoControlCode"></param>
            <param name="lpvInBuffer"></param>
            <param name="cbInBuffer"></param>
            <param name="lpvOutBuffer"></param>
            <param name="cbOutBuffer"></param>
            <param name="lpcbBytesReturned"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpClient.StructureToByte``1(``0)">
            <summary>
            由结构体转换为byte数组
            </summary>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpClient.ByteToStructure``1(System.Byte[])">
            <summary>
            由byte数组转换为结构体
            </summary>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpClient.ObjectToBytes(System.Object)">
            <summary>
            对象序列化成byte[]
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpClient.BytesToObject(System.Byte[])">
            <summary>
            byte[]序列化成对象
            </summary>
            <param name="Bytes"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpClient.BytesToStruct``1(System.Byte[])">
            <summary>
            byte[]转结构体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SpaceCG.HPSocket.TcpPackAgent.CreateListener" -->
        <member name="M:SpaceCG.HPSocket.TcpPackAgent.Destroy">
            <summary>
            终止服务并释放资源
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.TcpPackAgent.MaxPackSize">
            <summary>
            读取或设置数据包最大长度
            有效数据包最大长度不能超过 524287/0x7FFFF 字节，默认：262144/0x40000
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.TcpPackAgent.PackHeaderFlag">
            <summary>
            读取或设置包头标识
            有效包头标识取值范围 0 ~ 8191/0x1FFF，当包头标识为 0 时不校验包头，默认：0
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SpaceCG.HPSocket.TcpPackClient.CreateListener" -->
        <member name="M:SpaceCG.HPSocket.TcpPackClient.Destroy">
            <summary>
            终止服务并释放资源
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.TcpPackClient.MaxPackSize">
            <summary>
            读取或设置数据包最大长度
            有效数据包最大长度不能超过 524287/0x7FFFF 字节，默认：262144/0x40000
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.TcpPackClient.PackHeaderFlag">
            <summary>
            读取或设置包头标识
            有效包头标识取值范围 0 ~ 8191/0x1FFF，当包头标识为 0 时不校验包头，默认：0
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SpaceCG.HPSocket.TcpPackServer.CreateListener" -->
        <member name="M:SpaceCG.HPSocket.TcpPackServer.Destroy">
            <summary>
            终止服务并释放资源
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.TcpPackServer.MaxPackSize">
            <summary>
            读取或设置数据包最大长度
            有效数据包最大长度不能超过 4194303/0x3FFFFF 字节，默认：262144/0x40000
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.TcpPackServer.PackHeaderFlag">
            <summary>
            读取或设置包头标识
            有效包头标识取值范围  0 ~ 1023/0x3FF，当包头标识为 0 时不校验包头，默认：0
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SpaceCG.HPSocket.TcpPullAgent.CreateListener" -->
        <member name="M:SpaceCG.HPSocket.TcpPullAgent.Fetch(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            抓取数据
            用户通过该方法从 Socket 组件中抓取数据
            </summary>
            <param name="connId"></param>
            <param name="pBuffer"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpPullAgent.Peek(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            抓取数据
            用户通过该方法从 Socket 组件中抓取数据
            </summary>
            <param name="connId"></param>
            <param name="pBuffer"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpPullAgent.SetCallback">
            <summary>
            设置回调函数
            </summary>
            <param name="prepareConnect"></param>
            <param name="connect"></param>
            <param name="send"></param>
            <param name="recv"></param>
            <param name="close"></param>
            <param name="error"></param>
            <param name="agentShutdown"></param>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpPullAgent.Destroy">
            <summary>
            终止服务并释放资源
            </summary>
        </member>
        <member name="E:SpaceCG.HPSocket.TcpPullClient.OnReceive">
            <summary>
            数据到达事件
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SpaceCG.HPSocket.TcpPullClient.CreateListener" -->
        <member name="M:SpaceCG.HPSocket.TcpPullClient.Fetch(System.IntPtr,System.Int32)">
            <summary>
            抓取数据
            用户通过该方法从 Socket 组件中抓取数据
            </summary>
            <param name="connId"></param>
            <param name="pBuffer"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpPullClient.Peek(System.IntPtr,System.Int32)">
            <summary>
            抓取数据
            用户通过该方法从 Socket 组件中抓取数据
            </summary>
            <param name="connId"></param>
            <param name="pBuffer"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpPullClient.SetCallback">
            <summary>
            设置回调函数
            </summary>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpPullClient.Destroy">
            <summary>
            终止服务并释放资源
            </summary>
        </member>
        <member name="E:SpaceCG.HPSocket.TcpPullServer.OnReceive">
            <summary>
            数据到达事件
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SpaceCG.HPSocket.TcpPullServer.CreateListener" -->
        <member name="M:SpaceCG.HPSocket.TcpPullServer.Fetch(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            抓取数据
            用户通过该方法从 Socket 组件中抓取数据
            </summary>
            <param name="connId"></param>
            <param name="pBuffer"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpPullServer.Peek(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            抓取数据
            用户通过该方法从 Socket 组件中抓取数据
            </summary>
            <param name="connId"></param>
            <param name="pBuffer"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpPullServer.Destroy">
            <summary>
            终止服务并释放资源
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.TcpServer.IpAddress">
            <summary>
            服务器ip
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.TcpServer.Port">
            <summary>
            服务器端口
            </summary>
        </member>
        <member name="E:SpaceCG.HPSocket.TcpServer.OnAccept">
            <summary>
            连接到达事件
            </summary>
        </member>
        <member name="E:SpaceCG.HPSocket.TcpServer.OnSend">
            <summary>
            数据包发送事件
            </summary>
        </member>
        <member name="E:SpaceCG.HPSocket.TcpServer.OnPrepareListen">
            <summary>
            准备监听了事件
            </summary>
        </member>
        <member name="E:SpaceCG.HPSocket.TcpServer.OnReceive">
            <summary>
            数据到达事件
            </summary>
        </member>
        <member name="E:SpaceCG.HPSocket.TcpServer.OnPointerDataReceive">
            <summary>
            数据到达事件(指针数据)
            </summary>
        </member>
        <member name="E:SpaceCG.HPSocket.TcpServer.OnClose">
            <summary>
            连接关闭事件
            </summary>
        </member>
        <member name="E:SpaceCG.HPSocket.TcpServer.OnShutdown">
            <summary>
            服务器关闭事件
            </summary>
        </member>
        <member name="E:SpaceCG.HPSocket.TcpServer.OnHandShake">
            <summary>
            握手成功事件
            </summary>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpServer.#ctor">
            <summary>
            tcpserver构造
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SpaceCG.HPSocket.TcpServer.CreateListener" -->
        <member name="M:SpaceCG.HPSocket.TcpServer.Destroy">
            <summary>
            终止服务并释放资源
            </summary>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpServer.Start">
            <summary>
            启动服务
            </summary>
            <param name="address"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpServer.Stop">
            <summary>
            停止服务
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpServer.Send(System.IntPtr,System.Byte[],System.Int32)">
            <summary>
            发送数据
            </summary>
            <param name="connId"></param>
            <param name="bytes"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpServer.Send(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            发送数据
            </summary>
            <param name="connId"></param>
            <param name="bufferPtr"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpServer.Send(System.IntPtr,System.Byte[],System.Int32,System.Int32)">
            <summary>
            发送数据
            </summary>
            <param name="connId"></param>
            <param name="bytes"></param>
            <param name="offset">针对bytes的偏移</param>
            <param name="size">发多大</param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpServer.Send(System.IntPtr,System.IntPtr,System.Int32,System.Int32)">
            <summary>
            发送数据
            </summary>
            <param name="connId"></param>
            <param name="bufferPtr"></param>
            <param name="offset">针对bufferPtr的偏移</param>
            <param name="size">发多大</param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpServer.Send``1(System.IntPtr,``0)">
            <summary>
            发送数据
            </summary>
            <param name="connId"></param>
            <param name="bufferPtr"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpServer.SendBySerializable(System.IntPtr,System.Object)">
            <summary>
            序列化对象后发送数据,序列化对象所属类必须标记[Serializable]
            </summary>
            <param name="connId"></param>
            <param name="bufferPtr"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpServer.SendPackets(System.IntPtr,SpaceCG.HPSocket.WSABUF[],System.Int32)">
            <summary>
            发送多组数据
            向指定连接发送多组数据
            TCP - 顺序发送所有数据包
            </summary>
            <param name="connId">连接 ID</param>
            <param name="pBuffers">发送缓冲区数组</param>
            <param name="iCount">发送缓冲区数目</param>
            <returns>TRUE.成功,FALSE.失败，可通过 SYSGetLastError() 获取 Windows 错误代码</returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpServer.SendPackets``1(System.IntPtr,``0[])">
            <summary>
            发送多组数据
            向指定连接发送多组数据
            TCP - 顺序发送所有数据包
            </summary>
            <param name="connId">连接 ID</param>
            <param name="pBuffers">发送缓冲区数组</param>
            <param name="iCount">发送缓冲区数目</param>
            <returns>TRUE.成功,FALSE.失败，可通过 SYSGetLastError() 获取 Windows 错误代码</returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpServer.SendSmallFile(System.IntPtr,System.String,SpaceCG.HPSocket.WSABUF@,SpaceCG.HPSocket.WSABUF@)">
            <summary>
            名称：发送小文件
            描述：向指定连接发送 4096 KB 以下的小文件
            </summary>
            <param name="connId"></param>
            <param name="filePath">文件路径</param>
            <param name="head">头部附加数据</param>
            <param name="tail">尾部附加数据</param>
            <returns>TRUE.成功,FALSE.失败，可通过 SYSGetLastError() 获取 Windows 错误代码</returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpServer.SendSmallFile(System.IntPtr,System.String,System.Byte[],System.Byte[])">
            <summary>
            名称：发送小文件
            描述：向指定连接发送 4096 KB 以下的小文件
            </summary>
            <param name="connId"></param>
            <param name="filePath">文件路径</param>
            <param name="head">头部附加数据,可以为null</param>
            <param name="tail">尾部附加数据,可以为null</param>
            <returns>TRUE.成功,FALSE.失败，可通过 SYSGetLastError() 获取 Windows 错误代码</returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpServer.SendSmallFile``2(System.IntPtr,System.String,``0,``1)">
            <summary>
            名称：发送小文件
            描述：向指定连接发送 4096 KB 以下的小文件
            </summary>
            <param name="connId"></param>
            <param name="filePath">文件路径</param>
            <param name="head">头部附加数据,可以为null</param>
            <param name="tail">尾部附加数据,可以为null</param>
            <returns>TRUE.成功,FALSE.失败，可通过 SYSGetLastError() 获取 Windows 错误代码</returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpServer.Disconnect(System.IntPtr,System.Boolean)">
            <summary>
            断开与某个客户的连接
            </summary>
            <param name="connId"></param>
            <param name="bForce">是否强制断开</param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpServer.DisconnectLongConnections(System.UInt32,System.Boolean)">
            <summary>
            断开超过指定时间的连接
            </summary>
            <param name="period">毫秒</param>
            <param name="force">强制</param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpServer.PauseReceive(System.IntPtr)">
            <summary>
            暂停接收
            </summary>
            <param name="connId"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpServer.ResumeReceive(System.IntPtr)">
            <summary>
            唤醒接收
            </summary>
            <param name="connId"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpServer.GetReceiveState(System.IntPtr)">
            <summary>
            获取连接的接收状态
            </summary>
            <param name="connId"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpServer.DisconnectSilenceConnections(System.UInt32,System.Boolean)">
            <summary>
            断开超过指定时长的静默连接
            </summary>
            <param name="period">毫秒</param>
            <param name="force">强制</param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpServer.GetLocalAddress(System.IntPtr,System.String@,System.UInt16@)">
            <summary>
            获取某个连接的本地地址信息
            </summary>
            <param name="connId"></param>
            <param name="ip"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpServer.GetRemoteAddress(System.IntPtr,System.String@,System.UInt16@)">
            <summary>
            获取某个连接的远程地址信息
            </summary>
            <param name="connId"></param>
            <param name="ip"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpServer.GetPendingDataLength(System.IntPtr,System.Int32@)">
            <summary>
            获取连接中未发出数据的长度
            </summary>
            <param name="connId"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="P:SpaceCG.HPSocket.TcpServer.State">
            <summary>
            状态
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.TcpServer.ConnectionCount">
            <summary>
            连接数
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.TcpServer.IsSecure">
            <summary>
            检测是否为安全连接（SSL/HTTPS）
            </summary>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpServer.GetAllConnectionIDs">
            <summary>
            获取所有连接,未获取到连接返回null
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpServer.GetListenAddress(System.String@,System.UInt16@)">
            <summary>
            获取监听socket的地址信息
            </summary>
            <param name="ip"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpServer.GetConnectPeriod(System.IntPtr,System.UInt32@)">
            <summary>
            获取指定连接的连接时长（毫秒）
            </summary>
            <param name="connId"></param>
            <param name="period"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpServer.GetSilencePeriod(System.IntPtr,System.UInt32@)">
            <summary>
            获取某个连接静默时间（毫秒）
            </summary>
            <param name="connId"></param>
            <param name="period"></param>
            <returns></returns>
        </member>
        <member name="P:SpaceCG.HPSocket.TcpServer.MaxConnectionCount">
            <summary>
            设置最大连接数（组件会根据设置值预分配内存，因此需要根据实际情况设置，不宜过大）
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.TcpServer.WorkerThreadCount">
            <summary>
            读取或设置工作线程数量（通常设置为 2 * CPU + 2）
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.TcpServer.AcceptSocketCount">
            <summary>
            读取或设置 Accept 预投递数量（根据负载调整设置，Accept 预投递数量越大则支持的并发连接请求越多）
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.TcpServer.SocketBufferSize">
            <summary>
            读取或设置通信数据缓冲区大小（根据平均通信数据包大小调整设置，通常设置为 1024 的倍数）
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.TcpServer.SocketListenQueue">
            <summary>
            读取或设置监听 Socket 的等候队列大小（根据并发连接数量调整设置）
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.TcpServer.FreeSocketObjLockTime">
            <summary>
            读取或设置 Socket 缓存对象锁定时间（毫秒，在锁定期间该 Socket 缓存对象不能被获取使用）
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.TcpServer.FreeSocketObjPool">
            <summary>
            读取或设置 Socket 缓存池大小（通常设置为平均并发连接数量的 1/3 - 1/2）
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.TcpServer.FreeBufferObjPool">
            <summary>
            读取或设置内存块缓存池大小（通常设置为 Socket 缓存池大小的 2 - 3 倍）
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.TcpServer.FreeSocketObjHold">
            <summary>
            读取或设置内存块缓存池大小（通常设置为 Socket 缓存池大小的 2 - 3 倍）
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.TcpServer.FreeBufferObjHold">
            <summary>
            读取或设置内存块缓存池回收阀值（通常设置为内存块缓存池大小的 3 倍）
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.TcpServer.KeepAliveTime">
            <summary>
            读取或设置心跳包间隔（毫秒，0 则不发送心跳包）
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.TcpServer.KeepAliveInterval">
            <summary>
            读取或设置心跳确认包检测间隔（毫秒，0 不发送心跳包，如果超过若干次 [默认：WinXP 5 次, Win7 10 次] 检测不到心跳确认包则认为已断线）
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.TcpServer.MarkSilence">
            <summary>
            读取或设置是否标记静默时间（设置为 TRUE 时 DisconnectSilenceConnections() 和 GetSilencePeriod() 才有效，默认：FALSE）
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.TcpServer.SendPolicy">
            <summary>
            获取或设置数据发送策略
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.TcpServer.OnSendSyncPolicy">
            <summary>
            获取或设置 OnSend 事件同步策略
            </summary>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpServer.SYSGetLastError">
            <summary>
            获取系统返回的错误码
            </summary>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpServer.SYSWSAGetLastError">
            <summary>
            调用系统的 ::WSAGetLastError() 方法获取通信错误代码
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.TcpServer.ErrorCode">
            <summary>
            获取错误码
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.TcpServer.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="P:SpaceCG.HPSocket.TcpServer.ErrorMessage">
            <summary>
            获取错误信息
            </summary>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpServer.GetSocketErrorDesc(SpaceCG.HPSocket.SocketError)">
            <summary>
            根据错误码返回错误信息
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpServer.SYS_SetSocketOption(System.IntPtr,System.Int32,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            调用系统的 setsockopt()
            </summary>
            <param name="sock"></param>
            <param name="level"></param>
            <param name="name"></param>
            <param name="val"></param>
            <param name="len"></param>
            <returns></returns>
            
        </member>
        <member name="M:SpaceCG.HPSocket.TcpServer.SYSGetSocketOption(System.IntPtr,System.Int32,System.Int32,System.IntPtr,System.Int32@)">
            <summary>
            调用系统的 getsockopt()
            </summary>
            <param name="sock"></param>
            <param name="level"></param>
            <param name="name"></param>
            <param name="val"></param>
            <param name="len"></param>
            <returns></returns>
            
        </member>
        <member name="M:SpaceCG.HPSocket.TcpServer.SYSIoctlSocket(System.IntPtr,System.Int64,System.IntPtr)">
            <summary>
            调用系统的 ioctlsocket()
            </summary>
            <param name="sock"></param>
            <param name="cmd"></param>
            <param name="arg"></param>
            <returns></returns>
            
        </member>
        <member name="M:SpaceCG.HPSocket.TcpServer.SYS_WSAIoctl(System.IntPtr,System.UInt32,System.IntPtr,System.UInt32,System.IntPtr,System.UInt32,System.UInt32)">
            <summary>
            调用系统的 ::WSAIoctl()
            </summary>
            <param name="sock"></param>
            <param name="dwIoControlCode"></param>
            <param name="lpvInBuffer"></param>
            <param name="cbInBuffer"></param>
            <param name="lpvOutBuffer"></param>
            <param name="cbOutBuffer"></param>
            <param name="lpcbBytesReturned"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpServer.StructureToByte``1(``0)">
            <summary>
            由结构体转换为byte数组
            </summary>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpServer.ByteToStructure``1(System.Byte[])">
            <summary>
            由byte数组转换为结构体
            </summary>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpServer.ObjectToBytes(System.Object)">
            <summary>
            对象序列化成byte[]
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpServer.BytesToObject(System.Byte[])">
            <summary>
            byte[]序列化成对象
            </summary>
            <param name="Bytes"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.TcpServer.BytesToStruct``1(System.Byte[])">
            <summary>
            byte[]转结构体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="T:SpaceCG.HPSocket.RejectedPolicy">
            <summary>
            名称：拒绝策略
            描述：调用被拒绝后的处理策略
            </summary>
        </member>
        <member name="F:SpaceCG.HPSocket.RejectedPolicy.TRP_CALL_FAIL">
            <summary>
            立刻返回失败
            </summary>
        </member>
        <member name="F:SpaceCG.HPSocket.RejectedPolicy.TRP_WAIT_FOR">
            <summary>
            等待（直到成功、超时或线程池关闭等原因导致失败）
            </summary>
        </member>
        <member name="F:SpaceCG.HPSocket.RejectedPolicy.TRP_CALLER_RUN">
            <summary>
            调用者线程直接执行
            </summary>
        </member>
        <member name="T:SpaceCG.HPSocket.TaskBufferType">
            <summary>
            名称：任务缓冲区类型
            描述：TSockeTask 对象创建和销毁时，根据不同类型的缓冲区类型作不同的处理
            </summary>
        </member>
        <member name="F:SpaceCG.HPSocket.TaskBufferType.TBT_COPY">
            <summary>
            深拷贝
            </summary>
        </member>
        <member name="F:SpaceCG.HPSocket.TaskBufferType.TBT_REFER">
            <summary>
             浅拷贝
            </summary>
        </member>
        <member name="F:SpaceCG.HPSocket.TaskBufferType.TBT_ATTACH">
            <summary>
            连接（不负责创建，但负责销毁）
            </summary>
        </member>
        <member name="T:SpaceCG.HPSocket.TaskProc">
            <summary>
            名称：任务处理函数
            描述：任务处理入口函数
            返回值：（无）
            </summary>
            <param name="pvArg">自定义参数</param>
        </member>
        <member name="T:SpaceCG.HPSocket.SocketTaskProc">
            <summary>
            名称：Socket 任务处理函数
            描述：Socket 任务处理入口函数
            返回值：（无）
            </summary>
            <param name="pTask">pTask -- Socket 任务结构体指针</param>
        </member>
        <member name="T:SpaceCG.HPSocket.SocketTask">
            <summary>
            名称：Socket 任务结构体
            描述：封装 Socket 任务相关数据结构
            </summary>
        </member>
        <member name="F:SpaceCG.HPSocket.SocketTask.Fn">
            <summary>
            任务处理函数
            </summary>
        </member>
        <member name="F:SpaceCG.HPSocket.SocketTask.Sender">
            <summary>
            发起对象
            </summary>
        </member>
        <member name="F:SpaceCG.HPSocket.SocketTask.ConnId">
            <summary>
            连接 ID
            </summary>
        </member>
        <member name="F:SpaceCG.HPSocket.SocketTask.Buffer">
            <summary>
            数据缓冲区
            </summary>
        </member>
        <member name="F:SpaceCG.HPSocket.SocketTask.BufferSize">
            <summary>
            数据缓冲区长度
            </summary>
        </member>
        <member name="F:SpaceCG.HPSocket.SocketTask.BufferType">
            <summary>
            缓冲区类型
            </summary>
        </member>
        <member name="F:SpaceCG.HPSocket.SocketTask.WParam">
            <summary>
            自定义参数
            </summary>
        </member>
        <member name="F:SpaceCG.HPSocket.SocketTask.LParam">
            <summary>
            自定义参数
            </summary>
        </member>
        <member name="M:SpaceCG.HPSocket.ThreadPoolSdk.Create_HP_ThreadPool">
            <summary>
            创建 IHPThreadPool 对象
            </summary>
            <param name="pThreadPool"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.ThreadPoolSdk.Destroy_HP_ThreadPool(System.IntPtr)">
            <summary>
            销毁 IHPThreadPool 对象
            </summary>
            <param name="pThreadPool"></param>
        </member>
        <member name="M:SpaceCG.HPSocket.ThreadPoolSdk.Create_HP_SocketTaskObj(SpaceCG.HPSocket.SocketTaskProc,System.IntPtr,System.IntPtr,System.Byte[],System.Int32,SpaceCG.HPSocket.TaskBufferType,System.IntPtr,System.IntPtr)">
            <summary>
            名称：创建 TSocketTask 对象
            描述：创建任务对象，该对象最终需由 HP_Destroy_SocketTaskObj() 销毁
            </summary>
            <param name="fnTaskProc">任务处理函数</param>
            <param name="pSender">发起对象</param>
            <param name="dwConnID">连接 ID</param>
            <param name="pBuffer">数据缓冲区</param>
            <param name="iBuffLen">数据缓冲区长度</param>
            <param name="enBuffType">数据缓冲区类型（默认：TBT_COPY） </param>
            <param name="wParam">自定义参数</param>
            <param name="lParam">自定义参数</param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.ThreadPoolSdk.Destroy_HP_SocketTaskObj(System.IntPtr)">
            <summary>
             销毁 TSocketTask 对象
            </summary>
            <param name="pTask"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.ThreadPoolSdk.HP_ThreadPool_Start(System.IntPtr,System.UInt32,System.UInt32,SpaceCG.HPSocket.RejectedPolicy,System.UInt32)">
            <summary>
            名称：启动线程池组件
            </summary>
            <param name="pThreadPool"></param>
            <param name="dwThreadCount">线程数量，（默认：0）</param>
            <param name="dwMaxQueueSize">任务队列最大容量（默认：0，不限制）</param>
            <param name="enRejectedPolicy">任务拒绝处理策略</param>
            <param name="dwStackSize">线程堆栈空间大小（默认：0 -> 操作系统默认）</param>
            <returns>  TRUE	-- 成功 ,  FALSE	-- 失败，可通过 SYS_GetLastError() 获取系统错误代码
            </returns>
        </member>
        <member name="M:SpaceCG.HPSocket.ThreadPoolSdk.HP_ThreadPool_Stop(System.IntPtr,System.Int32)">
            <summary>
            名称：关闭线程池组件
            描述：在规定时间内关闭线程池组件，如果工作线程在最大等待时间内未能正常关闭，会尝试强制关闭，这种情况下很可能会造成系统资源泄漏
            </summary>
            <param name="pThreadPool"></param>
            <param name="dwMaxWait">最大等待时间（毫秒，默认：INFINITE，一直等待）</param>
            <returns> TRUE	-- 成功,   FALSE	-- 失败，可通过 SYS_GetLastError() 获取系统错误代码
            </returns>
        </member>
        <member name="M:SpaceCG.HPSocket.ThreadPoolSdk.HP_ThreadPool_Submit(System.IntPtr,SpaceCG.HPSocket.TaskProc,System.IntPtr,System.Int32)">
            <summary>
            名称：提交任务
            描述：向线程池提交异步任务
            </summary>
            <param name="pThreadPool"></param>
            <param name="fnTaskProc">任务处理函数</param>
            <param name="pvArg">任务参数</param>
            <param name="dwMaxWait">任务提交最大等待时间（仅对 TRP_WAIT_FOR 类型线程池生效，默认：INFINITE，一直等待）</param>
            <returns>TRUE	-- 成功,   FALSE	-- 失败，可通过 SYS_GetLastError() 获取系统错误代码， 其中，错误码 ERROR_DESTINATION_ELEMENT_FULL 表示任务队列已满 </returns>
        </member>
        <member name="M:SpaceCG.HPSocket.ThreadPoolSdk.HP_ThreadPool_Submit_Task(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            名称：提交 Socket 任务
            描述：向线程池提交异步 Socket 任务
            </summary>
            <param name="pThreadPool"></param>
            <param name="pTask">任务参数 HP_LPTSocketTask</param>
            <param name="dwMaxWait">任务提交最大等待时间（仅对 TRP_WAIT_FOR 类型线程池生效，默认：INFINITE，一直等待）</param>
            <returns>TRUE	-- 成功,   FALSE	-- 失败，可通过 SYS_GetLastError() 获取系统错误代码其中，错误码 ERROR_DESTINATION_ELEMENT_FULL 表示任务队列已满</returns>
        </member>
        <member name="M:SpaceCG.HPSocket.ThreadPoolSdk.HP_ThreadPool_AdjustThreadCount(System.IntPtr,System.Int32)">
            <summary>
            名称：调整线程池大小
            描述：增加或减少线程池的工作线程数量
            </summary>
            <param name="pThreadPool"></param>
            <param name="dwNewThreadCount">线程数量</param>
            <returns>TRUE	-- 成功,  FALSE	-- 失败，可通过 SYS_GetLastError() 获取系统错误代码</returns>
        </member>
        <member name="M:SpaceCG.HPSocket.ThreadPoolSdk.HP_ThreadPool_HasStarted(System.IntPtr)">
            <summary>
            检查线程池组件是否已启动
            </summary>
            <param name="pThreadPool"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.ThreadPoolSdk.HP_ThreadPool_GetState(System.IntPtr)">
            <summary>
            查看线程池组件当前状态
            </summary>
            <param name="pThreadPool"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.ThreadPoolSdk.HP_ThreadPool_GetQueueSize(System.IntPtr)">
            <summary>
            获取当前任务队列大小
            </summary>
            <param name="pThreadPool"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.ThreadPoolSdk.HP_ThreadPool_GetThreadCount(System.IntPtr)">
            <summary>
            获取工作线程数量
            </summary>
            <param name="pThreadPool"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.ThreadPoolSdk.HP_ThreadPool_GetMaxQueueSize(System.IntPtr)">
            <summary>
            获取任务队列最大容量
            </summary>
            <param name="pThreadPool"></param>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.HPSocket.ThreadPoolSdk.HP_ThreadPool_GetRejectedPolicy(System.IntPtr)">
            <summary>
            获取任务拒绝处理策略
            </summary>
            <param name="pThreadPool"></param>
            <returns></returns>
        </member>
        <member name="T:SpaceCG.Log4Net.Log4NetUtils">
            <summary>
            Log4Net 实用/通用 函数
            </summary>
        </member>
        <member name="M:SpaceCG.Log4Net.Log4NetUtils.ReserveFileCount(System.Int32,System.String,System.String)">
            <summary>
            保留目录中的文件数量
            <para>跟据文件创建日期排序，保留 count 个最新文件，超出 count 数量的文件删除</para>
            <para>注意：该函数是比较文件的创建日期</para>
            </summary>
            <param name="count">要保留的数量</param>
            <param name="path">文件目录，当前目录 "/" 表示，不可为空</param>
            <param name="searchPattern">只在目录中(不包括子目录)，查找匹配的文件；例如："*.jpg" 或 "temp_*.png"</param>
        </member>
        <member name="M:SpaceCG.Log4Net.Log4NetUtils.ReserveFileDays(System.Int32,System.String,System.String)">
            <summary>
            保留目录中的文件天数
            <para>跟据文件上次修时间起计算，保留 days 天的文件，超出 days 天的文件删除</para>
            <para>注意：该函数是比较文件的上次修改日期</para>
            </summary>
            <param name="days">保留天数</param>
            <param name="path">文件夹目录</param>
            <param name="searchPattern">文件匹配类型</param>
        </member>
        <member name="T:SpaceCG.Log4Net.TextBoxBaseAppender">
            <summary>
            Log4Net WPF TextBoxBase Appender
            </summary>
        </member>
        <member name="F:SpaceCG.Log4Net.TextBoxBaseAppender.MaxLines">
            <summary>
            获取或设置最大可见行数
            </summary>
        </member>
        <member name="M:SpaceCG.Log4Net.TextBoxBaseAppender.#ctor(System.Windows.Controls.Primitives.TextBoxBase)">
            <summary>
            Log4Net Appender for WPF TextBoxBase 
            </summary>
            <param name="textBox"></param>
        </member>
        <member name="M:SpaceCG.Log4Net.TextBoxBaseAppender.#ctor(System.Windows.Controls.Primitives.TextBoxBase,System.UInt32)">
            <summary>
            Log4Net Appender for WPF TextBoxBase 
            </summary>
            <param name="textBox"></param>
            <param name="maxLines">最大行数为 1024 行，默认为 512 行</param>
        </member>
        <member name="M:SpaceCG.Log4Net.TextBoxBaseAppender.Append(log4net.Core.LoggingEvent)">
            <summary>
            @override
            </summary>
            <param name="loggingEvent"></param>
        </member>
        <member name="M:SpaceCG.Log4Net.TextBoxBaseAppender.TextBoxAppendText(System.String,log4net.Core.Level)">
            <summary>
            TextBox AppendText
            </summary>
            <param name="text"></param>
            <param name="level"></param>
        </member>
        <member name="T:SpaceCG.Native.WinAPI.POINT">
            <summary>
            POINT 结构定义点的x和y坐标
            <para>POINT 结构与 POINTL 结构相同。</para>
            <para> POINT, *PPOINT, *NPPOINT, *LPPOINT </para>
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/api/windef/ns-windef-point </para>
            </summary>
        </member>
        <member name="F:SpaceCG.Native.WinAPI.POINT.x">
            <summary>
            指定点的x坐标
            </summary>
        </member>
        <member name="F:SpaceCG.Native.WinAPI.POINT.y">
            <summary>
            指定点的y坐标
            </summary>
        </member>
        <member name="M:SpaceCG.Native.WinAPI.POINT.#ctor(System.Int32,System.Int32)">
            <summary>
            POINT 结构体
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="T:SpaceCG.Native.WinAPI.SIZE">
            <summary>
            SIZE 结构定义矩形的宽度和高度
            <para>存储在此结构中的矩形尺寸可以对应于视口范围，窗口范围，文本范围，位图尺寸或某些扩展功能的长宽比过滤器。</para>
            <para> SIZE, *PSIZE, *LPSIZE </para>
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/api/windef/ns-windef-size </para>
            </summary>
        </member>
        <member name="F:SpaceCG.Native.WinAPI.SIZE.cx">
            <summary>
            指定矩形的宽度。单位取决于使用此结构的功能。
            </summary>
        </member>
        <member name="F:SpaceCG.Native.WinAPI.SIZE.cy">
            <summary>
            指定矩形的高度。单位取决于使用此结构的功能。
            </summary>
        </member>
        <member name="M:SpaceCG.Native.WinAPI.SIZE.#ctor(System.Int32,System.Int32)">
            <summary>
            SIZE 结构体
            </summary>
            <param name="cx"></param>
            <param name="cy"></param>
        </member>
        <member name="T:SpaceCG.Native.WinAPI.RECT">
            <summary>
            RECT 结构通过其左上角和右下角的坐标定义一个矩形
            <para>RECT 结构与 RECTL 结构相同</para>
            <para> RECT, *PRECT, NEAR *NPRECT, FAR *LPRECT </para>
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/api/windef/ns-windef-rect </para>
            </summary>
        </member>
        <member name="F:SpaceCG.Native.WinAPI.RECT.left">
            <summary>
            指定矩形左上角的x坐标
            </summary>
        </member>
        <member name="F:SpaceCG.Native.WinAPI.RECT.top">
            <summary>
            指定矩形左上角的y坐标
            </summary>
        </member>
        <member name="F:SpaceCG.Native.WinAPI.RECT.right">
            <summary>
            指定矩形右下角的x坐标。
            </summary>
        </member>
        <member name="F:SpaceCG.Native.WinAPI.RECT.buttom">
            <summary>
            指定矩形右下角的y坐标。
            </summary>
        </member>
        <member name="M:SpaceCG.Native.WinAPI.RECT.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            RECT 结构体
            </summary>
            <param name="left"></param>
            <param name="top"></param>
            <param name="right"></param>
            <param name="buttom"></param>
        </member>
        <member name="T:SpaceCG.Native.WinAPI.DPI_AWARENESS">
            <summary>
            标识线程，进程或窗口的每英寸点数（dpi）设置。
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/api/windef/ne-windef-dpi_awareness </para>
            </summary>
        </member>
        <member name="F:SpaceCG.Native.WinAPI.DPI_AWARENESS.DPI_AWARENESS_INVALID">
            <summary>
            DPI意识无效。这是无效的DPI感知值。
            </summary>
        </member>
        <member name="F:SpaceCG.Native.WinAPI.DPI_AWARENESS.DPI_AWARENESS_UNAWARE">
            <summary>
            DPI不知道。此过程无法适应DPI更改，并且始终假定比例因子为100％（96 DPI）。系统将在其他任何DPI设置上自动缩放它。
            </summary>
        </member>
        <member name="F:SpaceCG.Native.WinAPI.DPI_AWARENESS.DPI_AWARENESS_SYSTEM_AWARE">
            <summary>
            系统DPI感知。此过程无法适应DPI更改。它将一次查询DPI，并在该过程的整个生命周期中使用该值。
            <para>如果DPI更改，则该过程将不会调整为新的DPI值。当DPI从系统值更改时，系统会自动按比例将其放大或缩小。</para>
            </summary>
        </member>
        <member name="F:SpaceCG.Native.WinAPI.DPI_AWARENESS.DPI_AWARENESS_PER_MONITOR_AWARE">
            <summary>
            每个监视器DPI感知。创建DPI时，此过程将对其进行检查，并在DPI更改时调整比例因子。这些过程不会被系统自动缩放
            </summary>
        </member>
        <member name="T:SpaceCG.Native.WinAPI.DPI_HOSTING_BEHAVIOR">
            <summary>
            标识窗口的 DPI 托管行为。此行为允许在线程中创建的窗口托管具有不同 DPI_AWARENESS_CONTEXT 的子窗口
            <para>https://docs.microsoft.com/en-us/windows/win32/api/windef/ne-windef-dpi_hosting_behavior </para>
            </summary>
        </member>
        <member name="F:SpaceCG.Native.WinAPI.DPI_HOSTING_BEHAVIOR.DPI_HOSTING_BEHAVIOR_INVALID">
            <summary>
            DPI托管行为无效。如果先前的 SetThreadDpiHostingBehavior 调用使用了无效的参数，通常会发生这种情况。
            </summary>
        </member>
        <member name="F:SpaceCG.Native.WinAPI.DPI_HOSTING_BEHAVIOR.DPI_HOSTING_BEHAVIOR_DEFAULT">
            <summary>
            默认的 DPI 托管行为。关联的窗口行为正常，无法使用不同的 DPI_AWARENESS_CONTEXT 创建或重新父级子窗口。
            </summary>
        </member>
        <member name="F:SpaceCG.Native.WinAPI.DPI_HOSTING_BEHAVIOR.DPI_HOSTING_BEHAVIOR_MIXED">
            <summary>
            混合的 DPI 托管行为。这样可以使用不同的 DPI_AWARENESS_CONTEXT 创建和重新创建父窗口。这些子窗口将由OS独立缩放。
            </summary>
        </member>
        <member name="T:SpaceCG.Native.WinAPI.SWP_Flags">
            <summary>
            SetWindowPos 函数的标志位参数
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setwindowpos </para>
            </summary>
        </member>
        <member name="F:SpaceCG.Native.WinAPI.SWP_Flags.SWP_ASYNCWINDOWPOS">
            <summary>
            如果调用线程和拥有窗口的线程连接到不同的输入队列，则系统会将请求发布到拥有窗口的线程
            <para>这样可以防止在其他线程处理请求时调用线程阻塞其执行</para>
            </summary>
        </member>
        <member name="F:SpaceCG.Native.WinAPI.SWP_Flags.SWP_DEFERERASE">
            <summary>
            防止生成 WM_SYNCPAINT 消息
            </summary>
        </member>
        <member name="F:SpaceCG.Native.WinAPI.SWP_Flags.SWP_DRAWFRAME">
            <summary>
            在窗口周围绘制框架（在窗口的类描述中定义）
            </summary>
        </member>
        <member name="F:SpaceCG.Native.WinAPI.SWP_Flags.SWP_FRAMECHANGED">
            <summary>
            应用使用 SetWindowLong 函数设置的新框架样式；将 WM_NCCALCSIZE 消息发送到窗口，即使未更改窗口的大小。
            <para>如果未指定此标志，则仅在更改窗口大小时才发送 WM_NCCALCSIZE </para>
            </summary>
        </member>
        <member name="F:SpaceCG.Native.WinAPI.SWP_Flags.SWP_HIDEWINDOW">
            <summary>
            隐藏窗口
            </summary>
        </member>
        <member name="F:SpaceCG.Native.WinAPI.SWP_Flags.SWP_NOACTIVATE">
            <summary>
            不激活窗口。
            <para>如果未设置此标志，则激活窗口并将其移至最顶层或非顶层组的顶部（取决于 hWndInsertAfter 参数的设置）。</para>
            </summary>
        </member>
        <member name="F:SpaceCG.Native.WinAPI.SWP_Flags.SWP_NOCOPYBITS">
            <summary>
            丢弃客户区的全部内容。
            <para>如果未指定此标志，则在调整窗口大小或位置后，将保存客户区的有效内容并将其复制回客户区。</para>
            </summary>
        </member>
        <member name="F:SpaceCG.Native.WinAPI.SWP_Flags.SWP_NOMOVE">
            <summary>
            保留当前位置（忽略X和Y参数）。
            </summary>
        </member>
        <member name="F:SpaceCG.Native.WinAPI.SWP_Flags.SWP_NOOWNERZORDER">
            <summary>
            不更改所有者窗口在Z顺序中的位置。
            </summary>
        </member>
        <member name="F:SpaceCG.Native.WinAPI.SWP_Flags.SWP_NOREDRAW">
            <summary>
            不重绘更改。
            <para>如果设置了此标志，则不会发生任何重绘。这适用于工作区，非工作区（包括标题栏和滚动条）以及由于移动窗口而导致未显示的父窗口的任何部分。</para>
            <para>设置此标志后，应用程序必须显式使窗口和父窗口中需要重绘的任何部分无效或重绘。</para>
            </summary>
        </member>
        <member name="F:SpaceCG.Native.WinAPI.SWP_Flags.SWP_NOREPOSITION">
            <summary>
            与 SWP_NOOWNERZORDER 标志相同。
            </summary>
        </member>
        <member name="F:SpaceCG.Native.WinAPI.SWP_Flags.SWP_NOSENDCHANGING">
            <summary>
            阻止窗口接收 WM_WINDOWPOSCHANGING 消息
            </summary>
        </member>
        <member name="F:SpaceCG.Native.WinAPI.SWP_Flags.SWP_NOSIZE">
            <summary>
            保留当前大小（忽略cx和cy参数）
            </summary>
        </member>
        <member name="F:SpaceCG.Native.WinAPI.SWP_Flags.SWP_NOZORDER">
            <summary>
            保留当前的Z顺序（忽略 hWndInsertAfter 参数）
            </summary>
        </member>
        <member name="F:SpaceCG.Native.WinAPI.SWP_Flags.SWP_SHOWWINDOW">
            <summary>
            显示窗口
            </summary>
        </member>
        <member name="T:SpaceCG.Native.WinAPI.FLASHWINFO">
            <summary>
            FLASHWINFO 结构体
            <para>FLASHWINFO, *PFLASHWINFO</para>
            <para>包含窗口的闪烁状态以及系统应刷新窗口的次数。</para>
            <para>示例：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/ns-winuser-flashwinfo </para>
            </summary>
        </member>
        <member name="F:SpaceCG.Native.WinAPI.FLASHWINFO.cbSize">
            <summary>
            结构的大小，以字节为单位。
            <para>等于 (uint)Marshal.SizeOf(typeof(FLASHWINFO)); </para>
            </summary>
        </member>
        <member name="F:SpaceCG.Native.WinAPI.FLASHWINFO.hWnd">
            <summary>
            要刷新的窗口的句柄。该窗口可以打开或最小化。
            </summary>
        </member>
        <member name="F:SpaceCG.Native.WinAPI.FLASHWINFO.dwFlags">
            <summary>
            闪光灯状态
            </summary>
        </member>
        <member name="F:SpaceCG.Native.WinAPI.FLASHWINFO.uCount">
            <summary>
            刷新窗口的次数。
            </summary>
        </member>
        <member name="F:SpaceCG.Native.WinAPI.FLASHWINFO.dwTimeout">
            <summary>
            刷新窗口的速率，以毫秒为单位。如果 dwTimeout 为零，则该函数使用默认的光标闪烁速率。
            </summary>
        </member>
        <member name="M:SpaceCG.Native.WinAPI.FLASHWINFO.#ctor(System.IntPtr)">
            <summary>
            FLASHWINFO 结构体
            </summary>
            <param name="hwnd">要刷新的窗口的句柄。该窗口可以打开或最小化。</param>
        </member>
        <member name="T:SpaceCG.Native.WinAPI.FLASHW_Flags">
            <summary>
            FLASHWINFO dwFlags
            </summary>
        </member>
        <member name="F:SpaceCG.Native.WinAPI.FLASHW_Flags.FLASHW_ALL">
            <summary>
            同时闪烁窗口标题和任务栏按钮。这等效于设置 FLASHW_CAPTION | FLASHW_TRAY 标志。
            </summary>
        </member>
        <member name="F:SpaceCG.Native.WinAPI.FLASHW_Flags.FLASHW_CAPTION">
            <summary>
            刷新窗口标题。
            </summary>
        </member>
        <member name="F:SpaceCG.Native.WinAPI.FLASHW_Flags.FLASHW_STOP">
            <summary>
            停止闪烁。系统将窗口还原到其原始状态。
            </summary>
        </member>
        <member name="F:SpaceCG.Native.WinAPI.FLASHW_Flags.FLASHW_TIMER">
            <summary>
            连续闪烁，直到设置了FLASHW_STOP标志。
            </summary>
        </member>
        <member name="F:SpaceCG.Native.WinAPI.FLASHW_Flags.FLASHW_TIMERNOFG">
            <summary>
            持续闪烁直到窗口到达前台。
            </summary>
        </member>
        <member name="F:SpaceCG.Native.WinAPI.FLASHW_Flags.FLASHW_TRAY">
            <summary>
            刷新任务栏按钮。
            </summary>
        </member>
        <member name="T:SpaceCG.Native.WinAPI.CURSORINFO">
            <summary>
            包含全局光标信息。
            <para>CURSORINFO, * PCURSORINFO, * LPCURSORINFO</para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/ns-winuser-cursorinfo </para>
            </summary>
        </member>
        <member name="F:SpaceCG.Native.WinAPI.CURSORINFO.cbSize">
            <summary>
            结构的大小，以字节为单位。
            <para>等于 Marshal.SizeOf(typeof(CURSORINFO)); </para>
            </summary>
        </member>
        <member name="F:SpaceCG.Native.WinAPI.CURSORINFO.flags">
            <summary>
            光标状态。
            <para>0  光标被隐藏。</para>
            <para>CURSOR_SHOWING    0x00000001  光标正在显示。</para>
            <para>CURSOR_SUPPRESSED 0x00000002  Windows 8：光标被抑制。该标志指示系统未在绘制光标，因为用户是通过触摸或笔而不是鼠标来提供输入的。</para>
            </summary>
        </member>
        <member name="F:SpaceCG.Native.WinAPI.CURSORINFO.hCursor">
            <summary>
            光标的句柄。
            </summary>
        </member>
        <member name="F:SpaceCG.Native.WinAPI.CURSORINFO.ptScreenPos">
            <summary>
            接收光标的屏幕坐标的结构。
            </summary>
        </member>
        <member name="M:SpaceCG.Native.WinAPI.CURSORINFO.#ctor(System.IntPtr)">
            <summary>
            CURSORINFO 结构体
            </summary>
            <param name="cursor"></param>
        </member>
        <member name="T:SpaceCG.Native.WinAPI.WinUser">
            <summary>
            WinUser.h
            <para>Marshal.GetLastWin32Error()</para>
            <para>LPCTSTR，LPWSTR, PTSTR, LPTSTR，L表示long指针，P表示这是一个指针，T表示_T宏,这个宏用来表示你的字符是否使用UNICODE, 如果你的程序定义了UNICODE或者其他相关的宏，那么这个字符或者字符串将被作为UNICODE字符串，否则就是标准的ANSI字符串。C表示是一个常量,const。STR表示这个变量是一个字符串。</para>
            <para>参考： https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/ </para>
            </summary>
        </member>
        <member name="F:SpaceCG.Native.WinAPI.WinUser.DLL_Name">
            <summary>
            dll file
            </summary>
        </member>
        <member name="F:SpaceCG.Native.WinAPI.WinUser.HWND_TOP">
            <summary>
            将窗口置于Z顺序的顶部。
            </summary>
        </member>
        <member name="F:SpaceCG.Native.WinAPI.WinUser.HWND_BOTTOM">
            <summary>
            将窗口置于Z顺序的底部。
            如果hWnd参数标识了最顶部的窗口，则该窗口将失去其最顶部的状态，并放置在所有其他窗口的底部。
            </summary>
        </member>
        <member name="F:SpaceCG.Native.WinAPI.WinUser.HWND_TOPMOST">
            <summary>
            将窗口置于所有非最上面的窗口上方；即使禁用窗口，窗口也将保持其最高位置。
            </summary>
        </member>
        <member name="F:SpaceCG.Native.WinAPI.WinUser.HWND_NOTOPMOST">
            <summary>
            将窗口放置在所有非最上面的窗口上方（即，所有最上面的窗口的后面）。如果窗口已经是非最上面的窗口，则此标志无效。
            </summary>
        </member>
        <member name="M:SpaceCG.Native.WinAPI.WinUser.SetWindowPos(System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,SpaceCG.Native.WinAPI.SWP_Flags)">
            <summary>
            更改子窗口，弹出窗口或顶级窗口的大小，位置和Z顺序；这些窗口是根据其在屏幕上的外观排序的；最顶部的窗口获得最高排名，并且是Z顺序中的第一个窗口。
            <para>如果使用 SetWindowLong 更改了某些窗口数据，则必须调用 SetWindowPos 才能使更改生效。对 uFlags 使用以下组合：SWP_NOMOVE | SWP_NOSIZE | SWP_NOZORDER | SWP_FRAMECHANGED。</para>
            <para>示例：SetWindowPos(new WindowInteropHelper(this).Handle., (IntPtr)HWND_TOPMOST, 0, 0, 0, 0, SWP_Flags.SWP_NOMOVE | SWP_Flags.SWP_NOSIZE); //将窗口 Z 序设置为最顶</para>
            <para>示例：SetWindowPos(hWnd, (IntPtr)HWND_TOPMOST, 10, 10, 800, 600, SWP_Flags.SWP_NOZORDER ); //设置窗口大小及位置，忽略 Z 序</para>
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setwindowpos </para>
            </summary>
            <param name="hWnd">A handle to the window.</param>
            <param name="hWndInsertAfter">在Z顺序中位于定位的窗口之前的窗口的句柄。</param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="cx"></param>
            <param name="cy"></param>
            <param name="wFlags">窗口大小和位置标志</param>
            <returns>如果函数成功，则返回值为非零。如果函数失败，则返回值为零。要获取扩展的错误信息，请调用GetLastError。</returns>
        </member>
        <member name="M:SpaceCG.Native.WinAPI.WinUser.SetForegroundWindow(System.IntPtr)">
            <summary>
            将创建指定窗口的线程带入前台并激活该窗口。
            <para>键盘输入直接指向窗口，并且为用户更改了各种视觉提示。系统向创建前景窗口的线程分配的优先级比向其他线程分配的优先级高。</para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-setforegroundwindow </para>
            </summary>
            <param name="hWnd"></param>
            <returns>如果将窗口带到前台，则返回值为非零。如果未将窗口带到前台，则返回值为零</returns>
        </member>
        <member name="M:SpaceCG.Native.WinAPI.WinUser.GetForegroundWindow">
            <summary>
            检索前景窗口（用户当前正在使用的窗口）的句柄。系统向创建前景窗口的线程分配的优先级比向其他线程分配的优先级高。
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-getforegroundwindow</para>
            </summary>
            <returns>返回值是前景窗口的句柄。在某些情况下，例如某个窗口失去激活状态，前景窗口可以为NULL。</returns>
        </member>
        <member name="M:SpaceCG.Native.WinAPI.WinUser.MoveWindow(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            更改指定窗口的位置和尺寸。对于顶级窗口，位置和尺寸是相对于屏幕的左上角的。对于子窗口，它们相对于父窗口客户区的左上角。
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-movewindow </para>
            </summary>
            <param name="hWnd"></param>
            <param name="X"></param>
            <param name="Y"></param>
            <param name="nWidth"></param>
            <param name="nHeight"></param>
            <param name="bRepaint">指示是否要重新绘制窗口。
            <para>如果此参数为TRUE，则窗口会收到一条消息。如果参数为FALSE，则不会进行任何重绘。这适用于客户区域，非客户区域（包括标题栏和滚动栏）以及由于移动子窗口而暴露的父窗口的任何部分。</para></param>
            <returns>如果函数成功，则返回值为非零。</returns>
        </member>
        <member name="M:SpaceCG.Native.WinAPI.WinUser.GetDesktopWindow">
            <summary>
            检索桌面窗口的句柄。桌面窗口覆盖整个屏幕。桌面窗口是在其上绘制其他窗口的区域。
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-getdesktopwindow </para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpaceCG.Native.WinAPI.WinUser.GetWindowRect(System.IntPtr,SpaceCG.Native.WinAPI.RECT@)">
            <summary>
            检索指定窗口的边界矩形的尺寸。尺寸以相对于屏幕左上角的屏幕坐标给出。
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-getwindowrect </para>
            </summary>
            <param name="hWnd">窗口句柄</param>
            <param name="lpRect">指向一个 RECT 结构的指针，该结构接收窗口的左上角和右下角的屏幕坐标</param>
            <returns>如果函数成功，返回值为非零：如果函数失败，返回值为零</returns>
        </member>
        <member name="M:SpaceCG.Native.WinAPI.WinUser.FindWindowA(System.String,System.String)">
            <summary>
            检索顶级窗口的句柄，该窗口的类名和窗口名与指定的字符串匹配。此功能不搜索子窗口。此功能不执行区分大小写的搜索。
            <para>要从指定的子窗口开始搜索子窗口，请使用 FindWindowEx 函数。</para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-findwindowa </para>
            </summary>
            
            <param name="lpClassName">[LPCSTR]
            如果 lpClassName 指向一个字符串，则它指定窗口类名称。类名可以是在 RegisterClass 或 RegisterClassEx 中注册的任何名称，也可以是任何预定义的控件类名称。
            <para>如果 lpClassName 为NULL，它将找到标题与 lpWindowName 参数匹配的任何窗口</para>
            </param>
            
            <param name="lpWindowName">[LPCSTR]窗口名称（窗口标题）。如果此参数为 NULL，则所有窗口名称均匹配。</param>
            <returns>如果函数成功，返回值为具有指定类名和窗口名的窗口句柄；如果函数失败，返回值为NULL。要获取扩展的错误信息，请调用GetLastError。</returns>
        </member>
        <member name="M:SpaceCG.Native.WinAPI.WinUser.GetClassNameA(System.IntPtr,System.Text.StringBuilder,System.Int32)">
            <summary>
            检索指定窗口所属的类的名称。
            <para>GetClassNameA(LPSTR), GetClassNameW(LPWSTR)，只是参考 lpClassName 字符类型不同</para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-getclassname </para>
            </summary>
            <param name="hWnd">窗口的句柄及间接给出的窗口所属的类</param>
            <param name="lpClassName">[LPSTR]类名字符串。
            <para>注意：这里 lpClassName 需要设置容量大小，否则会出现意外的错误；例如：StringBuilder sb = new StringBuilder(255); </para></param>
            <param name="nMaxCount">lpClassName 缓冲区的长度，以字符为单位。缓冲区必须足够大以包含终止的空字符。否则，类名字符串将被截断为 nMaxCount-1 字符。</param>
            <returns>如果函数成功，则返回值是复制到缓冲区的字符数，不包括终止的空字符。如果函数失败，则返回值为零。要获取扩展的错误信息，请调用 GetLastError 函数。</returns>
        </member>
        <member name="M:SpaceCG.Native.WinAPI.WinUser.GetWindowTextA(System.IntPtr,System.Text.StringBuilder,System.Int32)">
            <summary>
            将指定窗口标题栏的文本（如果有的话）复制到缓冲区中。如果指定的窗口是控件，则复制控件的文本。但是 GetWindowText 无法在另一个应用程序中检索控件的文本。
            <para>GetWindowTextA(LPSTR), GetWindowTextW(LPWSTR) </para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-getwindowtexta </para>
            </summary>
            <param name="hWnd">包含文本的窗口或控件的句柄</param>
            <param name="lpString">[LPSTR]将接收文本的缓冲区。如果字符串与缓冲区一样长或更长，则字符串将被截断并以空字符终止。
            <para>注意：这里 lpString 最好是设置容量大小，例如：StringBuilder sb = new StringBuilder(255); </para></param>
            <param name="nMaxCount">要复制到缓冲区的最大字符数，包括空字符。如果文本超过此限制，则会被截断。</param>
            <returns>如果函数成功，则返回值是所复制字符串的长度（以字符为单位），不包括终止的空字符。
            <para>如果窗口没有标题栏或文本，如果标题栏为空，或者窗口或控件句柄无效，则返回值为零。要获取扩展的错误信息，请调用GetLastError。</para>
            </returns>
        </member>
        <member name="M:SpaceCG.Native.WinAPI.WinUser.CloseWindow(System.IntPtr)">
            <summary>
            最小化（但不破坏）指定的窗口。
            <para>要销毁窗口，应用程序必须使用 DestroyWindow 函数。</para>
            <para>参考：https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-closewindow </para>
            </summary>
            <param name="hWnd"></param>
            <returns>如果函数成功，则返回值为非零。如果函数失败，则返回值为零。要获取扩展的错误信息，请调用GetLastError。</returns>
        </member>
        <member name="M:SpaceCG.Native.WinAPI.WinUser.DestroyWindow(System.IntPtr)">
            <summary>
            销毁指定的窗口。
            <para>如果指定的窗口是父窗口或所有者窗口，则DestroyWindow在销毁父窗口或所有者窗口时会自动销毁关联的子窗口或所有者窗口。该函数首先销毁子窗口或所有者窗口，然后销毁父窗口或所有者窗口。</para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-destroywindow </para>
            </summary>
            <param name="hWnd"></param>
            <returns>如果函数成功，则返回值为非零。如果函数失败，则返回值为零。要获取扩展的错误信息，请调用GetLastError。</returns>
        </member>
        <member name="M:SpaceCG.Native.WinAPI.WinUser.FlashWindow(System.IntPtr,System.Boolean)">
            <summary>
            闪烁指定的窗口一次。它不会更改窗口的活动状态。
            <para>若要将窗口刷新指定的次数，请使用 FlashWindowEx 函数。</para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-flashwindow </para>
            </summary>
            <param name="hWnd">要刷新的窗口的句柄。窗口可以打开或最小化。</param>
            <param name="bInvert">如果此参数为 TRUE，则窗口从一种状态闪烁到另一种状态。如果为 FALSE，则窗口将返回其原始状态（活动或不活动）。
            <para>当最小化应用程序且此参数为 TRUE 时，任务栏窗口按钮将闪烁活动/不活动。如果为 FALSE，则任务栏窗口按钮将不活动地闪烁，这意味着它不会更改颜色。它会闪烁，就像正在重绘一样，但不会向用户提供视觉上的反转提示。</para>
            </param>
            <returns>返回值指定在调用FlashWindow函数之前窗口的状态 。如果在调用之前将窗口标题绘制为活动窗口，则返回值为非零。否则，返回值为零。</returns>
        </member>
        <member name="M:SpaceCG.Native.WinAPI.WinUser.FlashWindowEx(SpaceCG.Native.WinAPI.FLASHWINFO@)">
            <summary>
            闪烁指定的窗口。它不会更改窗口的活动状态。
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-flashwindowex </para>
            </summary>
            <param name="pfwi">[PFLASHWINFO]指向 FLASHWINFO 结构的指针</param>
            <returns>返回值指定在调用 FlashWindowEx 函数之前窗口的状态 。如果在调用之前将窗口标题绘制为活动窗口，则返回值为非零。否则，返回值为零。</returns>
        </member>
        <member name="M:SpaceCG.Native.WinAPI.WinUser.GetCapture">
            <summary>
            检索已捕获鼠标的窗口的句柄（如果有）。一次只能捕获一个窗口。无论光标是否在其边界内，此窗口都会接收鼠标输入。
            <para>一个NULL的返回值意味着当前线程未捕获鼠标。但是，很可能另一个线程或进程捕获了鼠标。要获取另一个线程上的捕获窗口的句柄，请使用 GetGUIThreadInfo 函数。</para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-getcapture </para>
            </summary>
            <returns>返回值是与当前线程关联的捕获窗口的句柄。如果线程中没有窗口捕获到鼠标，则返回值为 NULL。</returns>
        </member>
        <member name="M:SpaceCG.Native.WinAPI.WinUser.GetCursor">
            <summary>
            检索当前光标的句柄。
            <para>要获取有关全局游标的信息，即使它不是当前线程所有，也可以使用 GetCursorInfo </para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-getcursor </para>
            </summary>
            <returns>返回值(HCURSOR)是当前游标的句柄。如果没有游标，则返回值为NULL。</returns>
        </member>
        <member name="M:SpaceCG.Native.WinAPI.WinUser.GetCursorInfo(SpaceCG.Native.WinAPI.CURSORINFO@)">
            <summary>
            检索有关全局游标的信息。
            <para>CURSORINFO pci = new CURSORINFO(){ cbSize = Marshal.SizeOf(typeof(CURSORINFO)) };</para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-getcursorinfo </para>
            </summary>
            <param name="pci">[PCURSORINFO]指向接收信息的CURSORINFO结构的指针。请注意，在调用此函数之前，必须将cbSize成员设置为sizeof(CURSORINFO)。</param>
            <returns>如果函数成功，则返回值为非零。如果函数失败，则返回值为零。要获取扩展的错误信息，请调用GetLastError。</returns>
        </member>
        <member name="M:SpaceCG.Native.WinAPI.WinUser.GetCursorPos(SpaceCG.Native.WinAPI.POINT@)">
            <summary>
            检索鼠标光标在屏幕坐标中的位置。
            <para>光标位置始终在屏幕坐标中指定，并且不受包含光标的窗口的映射模式的影响。调用过程必须对窗口站具有 WINSTA_READATTRIBUTES 访问权限。</para>
            <para>参考：https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-getcursorpos </para>
            </summary>
            <param name="lpPoint">[LPPOINT]指向POINT结构的指针，该结构接收光标的屏幕坐标。</param>
            <returns>如果成功返回非零，否则返回零。要获取扩展的错误信息，请调用GetLastError。</returns>
        </member>
        <member name="T:SpaceCG.SpaceCGUtils">
            <summary>
            SpaceCG 实用/通用 函数
            </summary>
        </member>
        <member name="M:SpaceCG.SpaceCGUtils.RemoveAnonymousEvents(System.Object,System.String)">
            <summary>
            移除对象的匿名事件（Lambda 表达式 或 匿名方法来创建 的 匿名函数）
            </summary>
            <param name="instanceObj">对象实例</param>
            <param name="eventName">对象事件名称</param>
        </member>
        <member name="T:Sdk">
            <summary>
            ANSI版本
            </summary>
        </member>
        <member name="F:Sdk.HPSOCKET_DLL_PATH">
            <summary>
            HPSocket的文件路径
            </summary>
        </member>
        <member name="M:Sdk.Create_HP_TcpServer(System.IntPtr)">
            <summary>
            创建 TcpServer 对象
            </summary>
            <param name="pListener"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.Create_HP_TcpClient(System.IntPtr)">
            <summary>
            创建 TcpClient 对象
            </summary>
            <param name="pListener"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.Create_HP_TcpAgent(System.IntPtr)">
            <summary>
            创建 TcpAgent 对象
            </summary>
            <param name="pListener"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.Create_HP_TcpPullServer(System.IntPtr)">
            <summary>
            创建 TcpPullServer 对象
            </summary>
            <param name="pListener"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.Create_HP_TcpPullClient(System.IntPtr)">
            <summary>
            创建 TcpPullClient 对象
            </summary>
            <param name="pListener"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.Create_HP_TcpPullAgent(System.IntPtr)">
            <summary>
            创建 TcpPullAgent 对象
            </summary>
            <param name="pListener"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.Create_HP_TcpPackServer(System.IntPtr)">
            <summary>
            创建 HP_TcpPackServer 对象
            </summary>
            <param name="pListener"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.Create_HP_TcpPackAgent(System.IntPtr)">
            <summary>
            创建 HP_TcpPackAgent 对象
            </summary>
            <param name="pListener"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.Create_HP_TcpPackClient(System.IntPtr)">
            <summary>
            创建 HP_TcpPackAgent 对象
            </summary>
            <param name="pListener"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.Create_HP_UdpServer(System.IntPtr)">
            <summary>
            创建 UdpServer 对象
            </summary>
            <param name="pListener"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.Create_HP_UdpClient(System.IntPtr)">
            <summary>
            创建 UdpClient 对象
            </summary>
            <param name="pListener"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.Create_HP_UdpCast(System.IntPtr)">
            <summary>
            创建 HP_UdpCast 对象
            </summary>
            <param name="pListener"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.Destroy_HP_TcpServer(System.IntPtr)">
            <summary>
            销毁 TcpServer 对象
            </summary>
            <param name="pServer"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.Destroy_HP_TcpClient(System.IntPtr)">
            <summary>
            销毁 TcpClient 对象
            </summary>
            <param name="pClient"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.Destroy_HP_TcpAgent(System.IntPtr)">
            <summary>
            销毁 TcpAgent 对象
            </summary>
            <param name="pAgent"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.Destroy_HP_TcpPullServer(System.IntPtr)">
            <summary>
            销毁 TcpPullServer 对象
            </summary>
            <param name="pClient"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.Destroy_HP_TcpPullClient(System.IntPtr)">
            <summary>
            销毁 TcpPullClient 对象
            </summary>
            <param name="pClient"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.Destroy_HP_TcpPullAgent(System.IntPtr)">
            <summary>
            销毁 TcpPullAgent 对象
            </summary>
            <param name="pAgent"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.Destroy_HP_TcpPackServer(System.IntPtr)">
            <summary>
            销毁 HP_TcpPackServer 对象
            </summary>
            <param name="pServer"></param>
        </member>
        <member name="M:Sdk.Destroy_HP_TcpPackAgent(System.IntPtr)">
            <summary>
            销毁 HP_TcpPackAgent 对象
            </summary>
            <param name="pAgent"></param>
        </member>
        <member name="M:Sdk.Destroy_HP_TcpPackClient(System.IntPtr)">
            <summary>
            销毁 HP_TcpPackClient 对象
            </summary>
            <param name="pClient"></param>
        </member>
        <member name="M:Sdk.Destroy_HP_UdpServer(System.IntPtr)">
            <summary>
            销毁 UdpServer 对象
            </summary>
            <param name="pServer"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.Destroy_HP_UdpClient(System.IntPtr)">
            <summary>
            销毁 UdpClient 对象
            </summary>
            <param name="pClient"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.Destroy_HP_UdpCast(System.IntPtr)">
            <summary>
            销毁 HP_UdpCast 对象
            </summary>
            <param name="pCast"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.Create_HP_TcpServerListener">
            <summary>
            创建 TcpServerListener 对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdk.Create_HP_TcpClientListener">
            <summary>
            创建 TcpClientListener 对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdk.Create_HP_TcpAgentListener">
            <summary>
            创建 TcpAgentListener 对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdk.Create_HP_TcpPullServerListener">
            <summary>
            创建 TcpPullServerListener 对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdk.Create_HP_TcpPullClientListener">
            <summary>
            创建 TcpPullClientListener 对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdk.Create_HP_TcpPullAgentListener">
            <summary>
            创建 TcpPullAgentListener 对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdk.Create_HP_TcpPackServerListener">
            <summary>
            创建 TcpPackServerListener 对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdk.Create_HP_TcpPackClientListener">
            <summary>
            创建 TcpPackClientListener 对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdk.Create_HP_TcpPackAgentListener">
            <summary>
            创建 TcpPackAgentListener 对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdk.Create_HP_UdpServerListener">
            <summary>
            创建 UdpServerListener 对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdk.Create_HP_UdpClientListener">
            <summary>
            创建 UdpClientListener 对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdk.Create_HP_UdpCastListener">
            <summary>
            创建 HP_UdpCastListener 对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdk.Destroy_HP_TcpServerListener(System.IntPtr)">
            <summary>
            销毁 TcpServerListener 对象
            </summary>
            <param name="pListener"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.Destroy_HP_TcpClientListener(System.IntPtr)">
            <summary>
            销毁 TcpClientListener 对象
            </summary>
            <param name="pListener"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.Destroy_HP_TcpAgentListener(System.IntPtr)">
            <summary>
            销毁 TcpAgentListener 对象
            </summary>
            <param name="pListener"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.Destroy_HP_TcpPullServerListener(System.IntPtr)">
            <summary>
            销毁 TcpPullServerListener 对象
            </summary>
            <param name="pListener"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.Destroy_HP_TcpPullClientListener(System.IntPtr)">
            <summary>
            销毁 TcpPullClientListener 对象
            </summary>
            <param name="pListener"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.Destroy_HP_TcpPullAgentListener(System.IntPtr)">
            <summary>
            销毁 TcpPullAgentListener 对象
            </summary>
            <param name="pListener"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.Destroy_HP_TcpPackServerListener(System.IntPtr)">
            <summary>
            销毁 TcpPackServerListener 对象
            </summary>
            <param name="pListener"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.Destroy_HP_TcpPackClientListener(System.IntPtr)">
            <summary>
            销毁 TcpPackClientListener 对象
            </summary>
            <param name="pListener"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.Destroy_HP_TcpPackAgentListener(System.IntPtr)">
            <summary>
            销毁 TcpPackAgentListener 对象
            </summary>
            <param name="pListener"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.Destroy_HP_UdpServerListener(System.IntPtr)">
            <summary>
            销毁 UdpServerListener 对象
            </summary>
            <param name="pListener"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.Destroy_HP_UdpClientListener(System.IntPtr)">
            <summary>
            销毁 UdpClientListener 对象
            </summary>
            <param name="pListener"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.Destroy_HP_UdpCastListener(System.IntPtr)">
            <summary>
            销毁 HP_UdpCastListener 对象
            </summary>
            <param name="pListener"></param>
        </member>
        <member name="M:Sdk.HP_Server_Start(System.IntPtr,System.String,System.UInt16)">
            <summary>
            名称：启动通信组件
            描述：启动服务端通信组件，启动完成后可开始接收客户端连接并收发数据
            </summary>
            <param name="pServer"></param>
            <param name="pszBindAddress">监听地址</param>
            <param name="usPort">监听端口</param>
            <returns>失败，可通过 GetLastError() 获取错误代码</returns>
        </member>
        <member name="M:Sdk.HP_Server_Stop(System.IntPtr)">
            <summary>
            关闭服务端通信组件，关闭完成后断开所有客户端连接并释放所有资源
            </summary>
            <param name="pServer"></param>
            <returns>失败，可通过 GetLastError() 获取错误代码</returns>
        </member>
        <member name="M:Sdk.HP_Server_Send(System.IntPtr,System.IntPtr,System.Byte[],System.Int32)">
            <summary>
            用户通过该方法向指定客户端发送数据
            </summary>
            <param name="pServer"></param>
            <param name="connId">连接 ID</param>
            <param name="pBuffer">发送数据长度</param>
            <param name="length">发送数据长度</param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_Server_Send(System.IntPtr,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            用户通过该方法向指定客户端发送数据
            </summary>
            <param name="pServer"></param>
            <param name="connId">连接 ID</param>
            <param name="pBuffer">发送数据长度</param>
            <param name="length">发送数据长度</param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_Server_SendPart(System.IntPtr,System.IntPtr,System.Byte[],System.Int32,System.Int32)">
            <summary>
            用户通过该方法向指定客户端发送数据
            </summary>
            <param name="pServer"></param>
            <param name="connId"></param>
            <param name="pBuffer"></param>
            <param name="length"></param>
            <param name="iOffset">针对pBuffer的偏移</param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_Server_SendPart(System.IntPtr,System.IntPtr,System.IntPtr,System.Int32,System.Int32)">
            <summary>
            用户通过该方法向指定客户端发送数据
            </summary>
            <param name="pServer"></param>
            <param name="connId"></param>
            <param name="pBuffer"></param>
            <param name="length"></param>
            <param name="iOffset">针对pBuffer的偏移</param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_Server_SendPackets(System.IntPtr,System.IntPtr,SpaceCG.HPSocket.WSABUF[],System.Int32)">
            <summary>
            发送多组数据
            向指定连接发送多组数据
            TCP - 顺序发送所有数据包 
            UDP - 把所有数据包组合成一个数据包发送（数据包的总长度不能大于设置的 UDP 包最大长度） 
            </summary>
            <param name="pServer"></param>
            <param name="connId">连接 ID</param>
            <param name="pBuffers">发送缓冲区数组</param>
            <param name="iCount">发送缓冲区数目</param>
            <returns>TRUE.成功,FALSE.失败，可通过 Windows API 函数 ::GetLastError() 获取 Windows 错误代码</returns>
        </member>
        <member name="M:Sdk.HP_Server_PauseReceive(System.IntPtr,System.IntPtr,System.Boolean)">
            <summary>
            名称：暂停/恢复接收
            描述：暂停/恢复某个连接的数据接收工作
            </summary>
            <param name="pServer"></param>
            <param name="dwConnID">连接 ID</param>
            <param name="bPause">TRUE - 暂停, FALSE - 恢复</param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_Server_Disconnect(System.IntPtr,System.IntPtr,System.Boolean)">
            <summary>
            断开与某个客户端的连接
            </summary>
            <param name="pServer"></param>
            <param name="connId">连接 ID</param>
            <param name="bForce">是否强制断开连接</param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_Server_DisconnectLongConnections(System.IntPtr,System.UInt32,System.Boolean)">
            <summary>
            断开超过指定时长的连接
            </summary>
            <param name="pServer"></param>
            <param name="dwPeriod">时长（毫秒）</param>
            <param name="bForce">是否强制断开连接</param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_Server_DisconnectSilenceConnections(System.IntPtr,System.UInt32,System.Boolean)">
            <summary>
            断开超过指定时长的静默连接
            </summary>
            <param name="pServer"></param>
            <param name="dwPeriod">时长（毫秒）</param>
            <param name="bForce">是否强制断开连接</param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_Server_SetSendPolicy(System.IntPtr,SpaceCG.HPSocket.SendPolicy)">
            <summary>
            设置数据发送策略
            </summary>
            <param name="pServer"></param>
            <param name="enSendPolicy"></param>
        </member>
        <member name="M:Sdk.HP_Server_GetSendPolicy(System.IntPtr)">
            <summary>
            获取数据发送策略
            </summary>
            <param name="pServer"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_Server_SetConnectionExtra(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            设置连接的附加数据
            是否为连接绑定附加数据或者绑定什么样的数据，均由应用程序只身决定
            </summary>
            <param name="pServer"></param>
            <param name="connId">连接 ID</param>
            <param name="pExtra"></param>
            <returns>若返回 false 失败则为（无效的连接 ID）</returns>
        </member>
        <member name="M:Sdk.HP_Server_GetConnectionExtra(System.IntPtr,System.IntPtr,System.IntPtr@)">
            <summary>
            获取连接的附加数据
            是否为连接绑定附加数据或者绑定什么样的数据，均由应用程序只身决定
            </summary>
            <param name="pServer"></param>
            <param name="connId">连接 ID</param>
            <param name="pExtra">数据指针</param>
            <returns>若返回 false 失败则为（无效的连接 ID）</returns>
        </member>
        <member name="M:Sdk.HP_Server_IsSecure(System.IntPtr)">
            <summary>
            检测是否为安全连接（SSL/HTTPS）
            </summary>
            <param name="pServer"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_Server_HasStarted(System.IntPtr)">
            <summary>
            检查通信组件是否已启动
            </summary>
            <param name="pServer"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_Server_GetState(System.IntPtr)">
            <summary>
            查看通信组件当前状态
            </summary>
            <param name="pServer"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_Server_GetLastError(System.IntPtr)">
            <summary>
            获取最近一次失败操作的错误代码
            </summary>
            <param name="pServer"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_Server_GetLastErrorDesc(System.IntPtr)">
            <summary>
            获取最近一次失败操作的错误描述
            </summary>
            <param name="pServer"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_Server_GetPendingDataLength(System.IntPtr,System.IntPtr,System.Int32@)">
            <summary>
            获取连接中未发出数据的长度
            </summary>
            <param name="pServer"></param>
            <param name="connId"></param>
            <param name="piPending"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_Server_IsPauseReceive(System.IntPtr,System.IntPtr,System.Int32@)">
            <summary>
            获取连接的数据接收状态
            </summary>
            <param name="pServer"></param>
            <param name="dwConnID"></param>
            <param name="pbPaused"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_Server_IsConnected(System.IntPtr,System.IntPtr)">
            <summary>
            检测是否有效连接
            </summary>
            <param name="pServer"></param>
            <param name="dwConnID"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_Server_GetConnectionCount(System.IntPtr)">
            <summary>
            获取客户端连接数
            </summary>
            <param name="pServer"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_Server_GetAllConnectionIDs(System.IntPtr,System.IntPtr[],System.UInt32@)">
            <summary>
            获取所有连接的 CONNID
            </summary>
            <param name="pServer"></param>
            <param name="pIDs"></param>
            <param name="pdwCount"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_Server_GetConnectPeriod(System.IntPtr,System.IntPtr,System.UInt32@)">
            <summary>
            获取某个客户端连接时长（毫秒）
            </summary>
            <param name="pServer"></param>
            <param name="connId"></param>
            <param name="pdwPeriod"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_Server_GetSilencePeriod(System.IntPtr,System.IntPtr,System.UInt32@)">
            <summary>
            获取某个连接静默时间（毫秒）
            </summary>
            <param name="pServer"></param>
            <param name="connId"></param>
            <param name="pdwPeriod"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_Server_GetListenAddress(System.IntPtr,System.Text.StringBuilder,System.Int32@,System.UInt16@)">
            <summary>
            获取监听 Socket 的地址信息
            </summary>
            <param name="pServer"></param>
            <param name="lpszAddress"></param>
            <param name="piAddressLen"></param>
            <param name="pusPort"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_Server_GetLocalAddress(System.IntPtr,System.IntPtr,System.Text.StringBuilder,System.Int32@,System.UInt16@)">
            <summary>
            获取某个连接的本地地址信息
            </summary>
            <param name="pServer"></param>
            <param name="connId"></param>
            <param name="lpszAddress"></param>
            <param name="piAddressLen">传入传出值,大小最好在222.222.222.222的长度以上</param>
            <param name="pusPort"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_Server_GetRemoteAddress(System.IntPtr,System.IntPtr,System.Text.StringBuilder,System.Int32@,System.UInt16@)">
            <summary>
            获取某个连接的远程地址信息
            </summary>
            <param name="pServer"></param>
            <param name="connId"></param>
            <param name="lpszAddress"></param>
            <param name="piAddressLen">传入传出值,大小最好在222.222.222.222的长度以上</param>
            <param name="pusPort"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_Server_SetOnSendSyncPolicy(System.IntPtr,SpaceCG.HPSocket.OnSendSyncPolicy)">
            <summary>
            设置 OnSend 事件同步策略（默认：OSSP_NONE，不同步）
            </summary>
            <param name="pServer"></param>
            <param name="syncPolicy"></param>
        </member>
        <member name="M:Sdk.HP_Server_GetOnSendSyncPolicy(System.IntPtr)">
            <summary>
            获取 OnSend 事件同步策略
            </summary>
            <param name="pServer"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_Server_SetFreeSocketObjLockTime(System.IntPtr,System.UInt32)">
            <summary>
            设置 Socket 缓存对象锁定时间（毫秒，在锁定期间该 Socket 缓存对象不能被获取使用）
            </summary>
            <param name="pServer"></param>
            <param name="dwFreeSocketObjLockTime"></param>
        </member>
        <member name="M:Sdk.HP_Server_SetFreeSocketObjPool(System.IntPtr,System.UInt32)">
            <summary>
            设置 Socket 缓存池大小（通常设置为平均并发连接数量的 1/3 - 1/2）
            </summary>
            <param name="pServer"></param>
            <param name="dwFreeSocketObjPool"></param>
        </member>
        <member name="M:Sdk.HP_Server_SetFreeBufferObjPool(System.IntPtr,System.UInt32)">
            <summary>
            设置内存块缓存池大小（通常设置为 Socket 缓存池大小的 2 - 3 倍）
            </summary>
            <param name="pServer"></param>
            <param name="dwFreeBufferObjPool"></param>
        </member>
        <member name="M:Sdk.HP_Server_SetFreeSocketObjHold(System.IntPtr,System.UInt32)">
            <summary>
            设置 Socket 缓存池回收阀值（通常设置为 Socket 缓存池大小的 3 倍）
            </summary>
            <param name="pServer"></param>
            <param name="dwFreeSocketObjHold"></param>
        </member>
        <member name="M:Sdk.HP_Server_SetFreeBufferObjHold(System.IntPtr,System.UInt32)">
            <summary>
            设置内存块缓存池回收阀值（通常设置为内存块缓存池大小的 3 倍）
            </summary>
            <param name="pServer"></param>
            <param name="dwFreeBufferObjHold"></param>
        </member>
        <member name="M:Sdk.HP_Server_SetMaxConnectionCount(System.IntPtr,System.UInt32)">
            <summary>
            设置最大连接数（组件会根据设置值预分配内存，因此需要根据实际情况设置，不宜过大）
            </summary>
            <param name="pServer"></param>
            <param name="dwMaxConnectionCount"></param>
        </member>
        <member name="M:Sdk.HP_Server_SetWorkerThreadCount(System.IntPtr,System.UInt32)">
            <summary>
            设置工作线程数量（通常设置为 2 * CPU + 2）
            </summary>
            <param name="pServer"></param>
            <param name="dwWorkerThreadCount"></param>
        </member>
        <member name="M:Sdk.HP_Server_SetMarkSilence(System.IntPtr,System.Boolean)">
            <summary>
            设置是否标记静默时间（设置为 TRUE 时 DisconnectSilenceConnections() 和 GetSilencePeriod() 才有效，默认：FALSE）
            </summary>
            <param name="pServer"></param>
            <param name="bMarkSilence"></param>
        </member>
        <member name="M:Sdk.HP_Server_GetFreeSocketObjLockTime(System.IntPtr)">
            <summary>
            获取 Socket 缓存对象锁定时间
            </summary>
            <param name="pServer"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_Server_GetFreeSocketObjPool(System.IntPtr)">
            <summary>
            获取 Socket 缓存池大小
            </summary>
            <param name="pServer"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_Server_GetFreeBufferObjPool(System.IntPtr)">
            <summary>
            获取内存块缓存池大小
            </summary>
            <param name="pServer"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_Server_GetFreeSocketObjHold(System.IntPtr)">
            <summary>
            获取 Socket 缓存池回收阀值
            </summary>
            <param name="pServer"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_Server_GetFreeBufferObjHold(System.IntPtr)">
            <summary>
            获取内存块缓存池回收阀值
            </summary>
            <param name="pServer"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_Server_GetMaxConnectionCount(System.IntPtr)">
            <summary>
            获取最大连接数
            </summary>
            <param name="pServer"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_Server_GetWorkerThreadCount(System.IntPtr)">
            <summary>
            获取工作线程数量
            </summary>
            <param name="pServer"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_Server_IsMarkSilence(System.IntPtr)">
            <summary>
            检测是否标记静默时间
            </summary>
            <param name="pServer"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_TcpServer_SendSmallFile(System.IntPtr,System.IntPtr,System.String,SpaceCG.HPSocket.WSABUF@,SpaceCG.HPSocket.WSABUF@)">
            <summary>
             名称：发送小文件
             描述：向指定连接发送 4096 KB 以下的小文件
            </summary>
            <param name="pServer"></param>
            <param name="connId">连接 ID</param>
            <param name="lpszFileName">文件路径</param>
            <param name="pHead">头部附加数据</param>
            <param name="pTail">尾部附加数据</param>
            <returns>TRUE.成功 FALSE	-- 失败，可通过 Windows API 函数 ::GetLastError() 获取 Windows 错误代码</returns>
        </member>
        <member name="M:Sdk.HP_TcpServer_SetAcceptSocketCount(System.IntPtr,System.UInt32)">
            <summary>
            设置 Accept 预投递数量（根据负载调整设置，Accept 预投递数量越大则支持的并发连接请求越多）
            </summary>
            <param name="pServer"></param>
            <param name="dwAcceptSocketCount"></param>
        </member>
        <member name="M:Sdk.HP_TcpServer_SetSocketBufferSize(System.IntPtr,System.UInt32)">
            <summary>
            设置通信数据缓冲区大小（根据平均通信数据包大小调整设置，通常设置为 1024 的倍数）
            </summary>
            <param name="pServer"></param>
            <param name="dwSocketBufferSize"></param>
        </member>
        <member name="M:Sdk.HP_TcpServer_SetSocketListenQueue(System.IntPtr,System.UInt32)">
            <summary>
            设置监听 Socket 的等候队列大小（根据并发连接数量调整设置）
            </summary>
            <param name="pServer"></param>
            <param name="dwSocketListenQueue"></param>
        </member>
        <member name="M:Sdk.HP_TcpServer_SetKeepAliveTime(System.IntPtr,System.UInt32)">
            <summary>
            设置心跳包间隔（毫秒，0 则不发送心跳包）
            </summary>
            <param name="pServer"></param>
            <param name="dwKeepAliveTime"></param>
        </member>
        <member name="M:Sdk.HP_TcpServer_SetKeepAliveInterval(System.IntPtr,System.UInt32)">
            <summary>
            设置心跳确认包检测间隔（毫秒，0 不发送心跳包，如果超过若干次 [默认：WinXP 5 次, Win7 10 次] 检测不到心跳确认包则认为已断线）
            </summary>
            <param name="pServer"></param>
            <param name="dwKeepAliveInterval"></param>
        </member>
        <member name="M:Sdk.HP_TcpServer_GetAcceptSocketCount(System.IntPtr)">
            <summary>
            获取 Accept 预投递数量
            </summary>
            <param name="pServer"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_TcpServer_GetSocketBufferSize(System.IntPtr)">
            <summary>
            获取通信数据缓冲区大小
            </summary>
            <param name="pServer"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_TcpServer_GetSocketListenQueue(System.IntPtr)">
            <summary>
            获取监听 Socket 的等候队列大小
            </summary>
            <param name="pServer"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_TcpServer_GetKeepAliveTime(System.IntPtr)">
            <summary>
            获取心跳检查次数
            </summary>
            <param name="pServer"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_TcpServer_GetKeepAliveInterval(System.IntPtr)">
            <summary>
            获取心跳检查间隔
            </summary>
            <param name="pServer"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_UdpServer_SetMaxDatagramSize(System.IntPtr,System.UInt32)">
            <summary>
            设置数据报文最大长度（建议在局域网环境下不超过 1472 字节，在广域网环境下不超过 548 字节）
            </summary>
            <param name="pServer"></param>
            <param name="dwMaxDatagramSize"></param>
        </member>
        <member name="M:Sdk.HP_UdpServer_GetMaxDatagramSize(System.IntPtr)">
            <summary>
            获取数据报文最大长度
            </summary>
            <param name="pServer"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_UdpServer_SetPostReceiveCount(System.IntPtr,System.UInt32)">
            <summary>
            设置 Receive 预投递数量（根据负载调整设置，Receive 预投递数量越大则丢包概率越小） 
            </summary>
            <param name="pServer"></param>
            <param name="dwPostReceiveCount"></param>
        </member>
        <member name="M:Sdk.HP_UdpServer_GetPostReceiveCount(System.IntPtr)">
            <summary>
            获取 Receive 预投递数量
            </summary>
            <param name="pServer"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_UdpServer_SetDetectAttempts(System.IntPtr,System.UInt32)">
            <summary>
            设置监测包尝试次数（0 则不发送监测跳包，如果超过最大尝试次数则认为已断线）
            </summary>
            <param name="pServer"></param>
            <param name="dwMaxDatagramSize"></param>
        </member>
        <member name="M:Sdk.HP_UdpServer_SetDetectInterval(System.IntPtr,System.UInt32)">
            <summary>
            设置监测包发送间隔（秒，0 不发送监测包）
            </summary>
            <param name="pServer"></param>
            <param name="dwMaxDatagramSize"></param>
        </member>
        <member name="M:Sdk.HP_UdpServer_GetDetectAttempts(System.IntPtr)">
            <summary>
            获取心跳检查次数
            </summary>
            <param name="pServer"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_UdpServer_GetDetectInterval(System.IntPtr)">
            <summary>
            获取心跳检查间隔
            </summary>
            <param name="pServer"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_Client_Start(System.IntPtr,System.String,System.UInt16,System.Boolean)">
            <summary>
            启动客户端通信组件并连接服务端，启动完成后可开始收发数据
            </summary>
            <param name="pClient"></param>
            <param name="pszRemoteAddress">服务端地址</param>
            <param name="usPort">服务端端口</param>
            <param name="bAsyncConnect">是否采用异步 Connect</param>
            <returns>失败，可通过 HP_Client_GetLastError() 获取错误代码</returns>
        </member>
        <member name="M:Sdk.HP_Client_StartWithBindAddress(System.IntPtr,System.String,System.UInt16,System.Boolean,System.String)">
            <summary>
            启动通信组件（并指定绑定地址）, 启动客户端通信组件并连接服务端，启动完成后可开始收发数据
            </summary>
            <param name="pClient"></param>
            <param name="lpszRemoteAddress">服务端地址</param>
            <param name="usPort">服务端端口</param>
            <param name="bAsyncConnect">是否采用异步 Connect</param>
            <param name="lpszBindAddress">绑定地址（默认：nullptr，TcpClient/UdpClient -> 不执行绑定操作，UdpCast 绑定 -> 0.0.0.0）</param>
            <returns>失败，可通过 HP_Client_GetLastError() 获取错误代码</returns>
        </member>
        <member name="M:Sdk.HP_Client_StartWithBindAddressAndLocalPort(System.IntPtr,System.String,System.UInt16,System.Boolean,System.String,System.UInt16)">
            <summary>
            名称：启动通信组件（并指定绑定地址）
            描述：启动客户端通信组件并连接服务端，启动完成后可开始收发数据
            </summary>
            <param name="pClient"></param>
            <param name="lpszRemoteAddress">服务端地址</param>
            <param name="usPort">服务端端口</param>
            <param name="bAsyncConnect">是否采用异步 Connect</param>
            <param name="lpszBindAddress">绑定地址（默认：nullptr，TcpClient/UdpClient -> 不执行绑定操作，UdpCast 绑定 -> 0.0.0.0）</param>
            <param name="usLocalPort">本地端口（默认：0）</param>
            <returns>失败，可通过 HP_Client_GetLastError() 获取错误代码</returns>
        </member>
        <member name="M:Sdk.HP_Client_Stop(System.IntPtr)">
            <summary>
            关闭客户端通信组件，关闭完成后断开与服务端的连接并释放所有资源
            </summary>
            <param name="pClient"></param>
            <returns>失败，可通过 HP_Client_GetLastError() 获取错误代码</returns>
        </member>
        <member name="M:Sdk.HP_Client_Send(System.IntPtr,System.Byte[],System.Int32)">
            <summary>
            用户通过该方法向服务端发送数据
            </summary>
            <param name="pClient"></param>
            <param name="connId">连接 ID（保留参数，目前该参数并未使用）</param>
            <param name="pBuffer">发送数据缓冲区</param>
            <param name="length">发送数据长度</param>
            <returns>失败，可通过 HP_Client_GetLastError() 获取错误代码</returns>
        </member>
        <member name="M:Sdk.HP_Client_Send(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            用户通过该方法向服务端发送数据
            </summary>
            <param name="pClient"></param>
            <param name="connId">连接 ID（保留参数，目前该参数并未使用）</param>
            <param name="pBuffer">发送数据缓冲区</param>
            <param name="length">发送数据长度</param>
            <returns>失败，可通过 HP_Client_GetLastError() 获取错误代码</returns>
        </member>
        <member name="M:Sdk.HP_Client_SendPart(System.IntPtr,System.Byte[],System.Int32,System.Int32)">
            <summary>
            用户通过该方法向服务端发送数据
            </summary>
            <param name="pClient"></param>
            <param name="pBuffer"></param>
            <param name="length"></param>
            <param name="iOffset">针对pBuffer的偏移</param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_Client_SendPart(System.IntPtr,System.IntPtr,System.Int32,System.Int32)">
            <summary>
            用户通过该方法向服务端发送数据
            </summary>
            <param name="pClient"></param>
            <param name="pBuffer"></param>
            <param name="length"></param>
            <param name="iOffset">针对pBuffer的偏移</param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_Client_SendPackets(System.IntPtr,SpaceCG.HPSocket.WSABUF[],System.Int32)">
            <summary>
            发送多组数据
            向服务端发送多组数据
            TCP - 顺序发送所有数据包 
            UDP - 把所有数据包组合成一个数据包发送（数据包的总长度不能大于设置的 UDP 包最大长度） 
            </summary>
            <param name="pClient"></param>
            <param name="pBuffers">发送缓冲区数组</param>
            <param name="iCount">发送缓冲区数目</param>
            <returns>TRUE.成功,FALSE.失败，可通过 Windows API 函数 ::GetLastError() 获取 Windows 错误代码</returns>
        </member>
        <member name="M:Sdk.HP_Client_PauseReceive(System.IntPtr,System.Int32)">
            <summary>
            名称：暂停/恢复接收
            描述：暂停/恢复某个连接的数据接收工作
            </summary>
            <param name="pClient">TRUE - 暂停, FALSE - 恢复</param>
            <param name="bPause">TRUE - 暂停, FALSE - 恢复</param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_Client_SetExtra(System.IntPtr,System.IntPtr)">
            <summary>
            设置连接的附加数据
            </summary>
            <param name="pClient"></param>
            <param name="pExtra"></param>
        </member>
        <member name="M:Sdk.HP_Client_GetExtra(System.IntPtr)">
            <summary>
            获取连接的附加数据
            </summary>
            <param name="pClient"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_Client_IsSecure(System.IntPtr)">
            <summary>
            检测是否为安全连接（SSL/HTTPS）
            </summary>
            <param name="pClient"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_Client_HasStarted(System.IntPtr)">
            <summary>
            检查通信组件是否已启动
            </summary>
            <param name="pClient"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_Client_GetState(System.IntPtr)">
            <summary>
            查看通信组件当前状态
            </summary>
            <param name="pClient"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_Client_GetLastError(System.IntPtr)">
            <summary>
            获取最近一次失败操作的错误代码
            </summary>
            <param name="pClient"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_Client_GetLastErrorDesc(System.IntPtr)">
            <summary>
            获取最近一次失败操作的错误描述
            </summary>
            <param name="pClient"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_Client_GetConnectionID(System.IntPtr)">
            <summary>
            获取该组件对象的连接 ID
            </summary>
            <param name="pClient"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_Client_GetLocalAddress(System.IntPtr,System.Text.StringBuilder,System.Int32@,System.UInt16@)">
            <summary>
            获取 Client Socket 的地址信息
            </summary>
            <param name="pClient"></param>
            <param name="lpszAddress"></param>
            <param name="piAddressLen"></param>
            <param name="pusPort"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_Client_GetRemoteHost(System.IntPtr,System.Text.StringBuilder,System.Int32@,System.UInt16@)">
            <summary>
            获取连接的远程主机信息
            </summary>
            <param name="pClient"></param>
            <param name="lpszHost"></param>
            <param name="piHostLen"></param>
            <param name="pusPort"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_Client_GetPendingDataLength(System.IntPtr,System.Int32@)">
            <summary>
            获取连接中未发出数据的长度
            </summary>
            <param name="pClient"></param>
            <param name="piPending"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_Client_IsPauseReceive(System.IntPtr,System.Int32@)">
            <summary>
            获取连接的数据接收状态
            </summary>
            <param name="pClient"></param>
            <param name="pbPaused"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_Client_IsConnected(System.IntPtr)">
            <summary>
            检测是否有效连接
            </summary>
            <param name="pClient"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_Client_SetFreeBufferPoolSize(System.IntPtr,System.UInt32)">
            <summary>
            设置内存块缓存池大小（通常设置为 -> PUSH 模型：5 - 10；PULL 模型：10 - 20 ）
            </summary>
            <param name="pClient"></param>
            <param name="dwFreeBufferPoolSize"></param>
        </member>
        <member name="M:Sdk.HP_Client_SetFreeBufferPoolHold(System.IntPtr,System.UInt32)">
            <summary>
            设置内存块缓存池回收阀值（通常设置为内存块缓存池大小的 3 倍）
            </summary>
            <param name="pClient"></param>
            <param name="dwFreeBufferPoolHold"></param>
        </member>
        <member name="M:Sdk.HP_Client_GetFreeBufferPoolSize(System.IntPtr)">
            <summary>
            获取内存块缓存池大小
            </summary>
            <param name="pClient"></param>
        </member>
        <member name="M:Sdk.HP_Client_GetFreeBufferPoolHold(System.IntPtr)">
            <summary>
            获取内存块缓存池回收阀值
            </summary>
            <param name="pClient"></param>
        </member>
        <member name="M:Sdk.HP_TcpClient_SendSmallFile(System.IntPtr,System.String,SpaceCG.HPSocket.WSABUF@,SpaceCG.HPSocket.WSABUF@)">
            <summary>
             名称：发送小文件
             描述：向指定连接发送 4096 KB 以下的小文件
            </summary>
            <param name="pServer"></param>
            <param name="lpszFileName">文件路径</param>
            <param name="pHead">头部附加数据</param>
            <param name="pTail">尾部附加数据</param>
            <returns>TRUE.成功 FALSE	-- 失败，可通过 Windows API 函数 ::GetLastError() 获取 Windows 错误代码</returns>
        </member>
        <member name="M:Sdk.HP_TcpClient_SetSocketBufferSize(System.IntPtr,System.UInt32)">
            <summary>
            设置通信数据缓冲区大小（根据平均通信数据包大小调整设置，通常设置为：(N * 1024) - sizeof(TBufferObj)）
            </summary>
            <param name="pClient"></param>
            <param name="dwSocketBufferSize"></param>
        </member>
        <member name="M:Sdk.HP_TcpClient_SetKeepAliveTime(System.IntPtr,System.UInt32)">
            <summary>
            设置心跳包间隔（毫秒，0 则不发送心跳包）
            </summary>
            <param name="pClient"></param>
            <param name="dwKeepAliveTime"></param>
        </member>
        <member name="M:Sdk.HP_TcpClient_SetKeepAliveInterval(System.IntPtr,System.UInt32)">
            <summary>
            设置心跳确认包检测间隔（毫秒，0 不发送心跳包，如果超过若干次 [默认：WinXP 5 次, Win7 10 次] 检测不到心跳确认包则认为已断线）
            </summary>
            <param name="pClient"></param>
            <param name="dwKeepAliveInterval"></param>
        </member>
        <member name="M:Sdk.HP_TcpClient_GetSocketBufferSize(System.IntPtr)">
            <summary>
            获取通信数据缓冲区大小
            </summary>
            <param name="pClient"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_TcpClient_GetKeepAliveTime(System.IntPtr)">
            <summary>
            获取心跳检查次数
            </summary>
            <param name="pClient"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_TcpClient_GetKeepAliveInterval(System.IntPtr)">
            <summary>
            获取心跳检查间隔
            </summary>
            <param name="pClient"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_UdpClient_SetMaxDatagramSize(System.IntPtr,System.UInt32)">
            <summary>
            设置数据报文最大长度（建议在局域网环境下不超过 1472 字节，在广域网环境下不超过 548 字节）
            </summary>
            <param name="pClient"></param>
            <param name="dwMaxDatagramSize"></param>
        </member>
        <member name="M:Sdk.HP_UdpClient_GetMaxDatagramSize(System.IntPtr)">
            <summary>
            获取数据报文最大长度
            </summary>
            <param name="pClient"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_UdpClient_SetDetectAttempts(System.IntPtr,System.UInt32)">
            <summary>
            设置监测包尝试次数（0 则不发送监测跳包，如果超过最大尝试次数则认为已断线
            </summary>
            <param name="pClient"></param>
            <param name="dwDetectAttempts"></param>
        </member>
        <member name="M:Sdk.HP_UdpClient_SetDetectInterval(System.IntPtr,System.UInt32)">
            <summary>
            设置监测包发送间隔（秒，0 不发送监测包）
            </summary>
            <param name="pClient"></param>
            <param name="dwDetectInterval"></param>
        </member>
        <member name="M:Sdk.HP_UdpClient_GetDetectAttempts(System.IntPtr)">
            <summary>
            获取心跳检查次数
            </summary>
            <param name="pClient"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_UdpClient_GetDetectInterval(System.IntPtr)">
            <summary>
            获取心跳检查间隔
            </summary>
            <param name="pClient"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_UdpCast_SetMaxDatagramSize(System.IntPtr,System.UInt32)">
            <summary>
            设置数据报文最大长度（建议在局域网环境下不超过 1472 字节，在广域网环境下不超过 548 字节
            </summary>
            <param name="pCast"></param>
            <param name="dwMaxDatagramSize"></param>
        </member>
        <member name="M:Sdk.HP_UdpCast_GetMaxDatagramSize(System.IntPtr)">
            <summary>
            获取数据报文最大长度
            </summary>
            <param name="pCast"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_UdpCast_GetRemoteAddress(System.IntPtr,System.Text.StringBuilder,System.Int32@,System.UInt16@)">
            <summary>
            获取当前数据报的远程地址信息（通常在 OnReceive 事件中调用）
            </summary>
            <param name="pCast"></param>
            <param name="lpszAddress"></param>
            <param name="piAddressLen"></param>
            <param name="pusPort"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_UdpCast_SetReuseAddress(System.IntPtr,System.Boolean)">
            <summary>
            设置是否启用地址重用机制（默认：不启用）
            </summary>
            <param name="pCast"></param>
            <param name="bReuseAddress"></param>
        </member>
        <member name="M:Sdk.HP_UdpCast_IsReuseAddress(System.IntPtr)">
            <summary>
            检测是否启用地址重用机制
            </summary>
            <param name="pCast"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_UdpCast_SetCastMode(System.IntPtr,SpaceCG.HPSocket.CastMode)">
            <summary>
            设置传播模式（组播或广播）
            </summary>
            <param name="pCast"></param>
            <param name="enCastMode"></param>
        </member>
        <member name="M:Sdk.HP_UdpCast_GetCastMode(System.IntPtr)">
            <summary>
            获取传播模式
            </summary>
            <param name="pCast"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_UdpCast_SetMultiCastTtl(System.IntPtr,System.Int32)">
            <summary>
            设置组播报文的 TTL（0 - 255）
            </summary>
            <param name="pCast"></param>
            <param name="iMCTtl"></param>
        </member>
        <member name="M:Sdk.HP_UdpCast_GetMultiCastTtl(System.IntPtr)">
            <summary>
            获取组播报文的 TTL
            </summary>
            <param name="pCast"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_UdpCast_SetMultiCastLoop(System.IntPtr,System.Boolean)">
            <summary>
            设置是否启用组播环路（TRUE or FALSE）
            </summary>
            <param name="pCast"></param>
            <param name="bMCLoop"></param>
        </member>
        <member name="M:Sdk.HP_UdpCast_IsMultiCastLoop(System.IntPtr)">
            <summary>
            检测是否启用组播环路
            </summary>
            <param name="pCast"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_Agent_Start(System.IntPtr,System.String,System.Boolean)">
            <summary>
            启动通信组件
            启动通信代理组件，启动完成后可开始连接远程服务器
            </summary>
            <param name="pAgent"></param>
            <param name="pszBindAddress">监听地址</param>
            <param name="bAsyncConnect">是否采用异步 Connect</param>
            <returns>失败，可通过 GetLastError() 获取错误代码</returns>
        </member>
        <member name="M:Sdk.HP_Agent_Stop(System.IntPtr)">
            <summary>
            关闭通信组件
            关闭通信组件，关闭完成后断开所有连接并释放所有资源
            </summary>
            <param name="pAgent"></param>
            <returns>-- 失败，可通过 GetLastError() 获取错误代码</returns>
        </member>
        <member name="M:Sdk.HP_Agent_Connect(System.IntPtr,System.String,System.UInt16,System.IntPtr@)">
            <summary>
            连接服务器
            连接服务器，连接成功后 IAgentListener 会接收到 OnConnect() 事件
            </summary>
            <param name="pAgent"></param>
            <param name="pszBindAddress">服务端地址</param>
            <param name="usPort">服务端端口</param>
            <param name="pconnId">传出连接 ID</param>
            <returns>失败，可通过 SYS_GetLastError() 获取 Windows 错误代码</returns>
        </member>
        <member name="M:Sdk.HP_Agent_ConnectWithExtra(System.IntPtr,System.String,System.UInt16,System.IntPtr@,System.IntPtr)">
            <summary>
            名称：连接服务器 
            描述：连接服务器，连接成功后 IAgentListener 会接收到 OnConnect() / OnHandShake() 事件
            </summary>
            <param name="pAgent"></param>
            <param name="lpszRemoteAddress">服务端地址</param>
            <param name="usPort">服务端端口</param>
            <param name="pdwConnID">传出连接</param>
            <param name="pExtra">连接附加数据（默认：nullptr）</param>
            <returns>失败，可通过函数 SYS_GetLastError() 获取 Windows 错误代码</returns>
        </member>
        <member name="M:Sdk.HP_Agent_ConnectWithLocalPort(System.IntPtr,System.String,System.UInt16,System.IntPtr@,System.UInt16)">
            <summary>
            名称：连接服务器
            描述：连接服务器，连接成功后 IAgentListener 会接收到 OnConnect() / OnHandShake() 事件
            </summary>
            <param name="pAgent"></param>
            <param name="lpszRemoteAddress">服务端地址</param>
            <param name="usPort">服务端端口</param>
            <param name="pdwConnID">连接 ID（默认：nullptr，不获取连接 ID）</param>
            <param name="usLocalPort">本地端口（默认：0）</param>
            <returns>失败，可通过函数 SYS_GetLastError() 获取 Windows 错误代码</returns>
        </member>
        <member name="M:Sdk.HP_Agent_ConnectWithLocalAddress(System.IntPtr,System.String,System.UInt16,System.IntPtr@,System.String)">
            <summary>
            名称：连接服务器
            描述：连接服务器，连接成功后 IAgentListener 会接收到 OnConnect() / OnHandShake() 事件
            </summary>
            <param name="pAgent"></param>
            <param name="lpszRemoteAddress">服务端地址</param>
            <param name="usPort">服务端端口</param>
            <param name="pdwConnID">连接 ID（默认：nullptr，不获取连接 ID）</param>
            <param name="lpszLocalAddress">本地地址（默认：nullptr，使用 Start() 方法中绑定的地址）</param>
            <returns>失败，可通过函数 SYS_GetLastError() 获取 Windows 错误代码</returns>
        </member>
        <member name="M:Sdk.HP_Agent_ConnectWithExtraAndLocalPort(System.IntPtr,System.String,System.UInt16,System.IntPtr@,System.IntPtr,System.UInt16)">
            <summary>
            名称：连接服务器
            描述：连接服务器，连接成功后 IAgentListener 会接收到 OnConnect() / OnHandShake() 事件
            </summary>
            <param name="pAgent"></param>
            <param name="lpszRemoteAddress">服务端地址</param>
            <param name="usPort">服务端端口</param>
            <param name="pdwConnID">连接 ID（默认：nullptr，不获取连接 ID）</param>
            <param name="pExtra">连接附加数据（默认：nullptr）</param>
            <param name="usLocalPort">本地端口（默认：0）</param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_Agent_ConnectWithExtraAndLocalAddressPort(System.IntPtr,System.String,System.UInt16,System.IntPtr@,System.IntPtr,System.UInt16,System.String)">
            <summary>
            名称：连接服务器
            描述：连接服务器，连接成功后 IAgentListener 会接收到 OnConnect() / OnHandShake() 事件
            </summary>
            <param name="pAgent"></param>
            <param name="lpszRemoteAddress">服务端地址</param>
            <param name="usPort">服务端端口</param>
            <param name="pdwConnID">连接 ID（默认：nullptr，不获取连接 ID）</param>
            <param name="pExtra">连接附加数据（默认：nullptr）</param>
            <param name="usLocalPort">本地端口（默认：0）</param>
            <param name="lpszLocalAddress">本地地址（默认：nullptr，使用 Start() 方法中绑定的地址）</param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_Agent_Send(System.IntPtr,System.IntPtr,System.Byte[],System.Int32)">
            <summary>
            发送数据
            用户通过该方法向指定连接发送数据
            </summary>
            <param name="pAgent"></param>
            <param name="connId">连接 ID</param>
            <param name="pBuffer">发送数据缓冲区</param>
            <param name="length">发送数据长度</param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_Agent_Send(System.IntPtr,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            发送数据
            用户通过该方法向指定连接发送数据
            </summary>
            <param name="pAgent"></param>
            <param name="connId">连接 ID</param>
            <param name="pBuffer">发送数据缓冲区</param>
            <param name="length">发送数据长度</param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_Agent_SendPart(System.IntPtr,System.IntPtr,System.Byte[],System.Int32,System.Int32)">
            <summary>
            发送数据
            用户通过该方法向指定连接发送数据
            </summary>
            <param name="pAgent"></param>
            <param name="connId"></param>
            <param name="pBuffer"></param>
            <param name="length"></param>
            <param name="iOffset">针对pBuffer的偏移</param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_Agent_SendPart(System.IntPtr,System.IntPtr,System.IntPtr,System.Int32,System.Int32)">
            <summary>
            发送数据
            用户通过该方法向指定连接发送数据
            </summary>
            <param name="pAgent"></param>
            <param name="connId"></param>
            <param name="pBuffer"></param>
            <param name="length"></param>
            <param name="iOffset">针对pBuffer的偏移</param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_Agent_SendPackets(System.IntPtr,System.IntPtr,SpaceCG.HPSocket.WSABUF[],System.Int32)">
            <summary>
            发送多组数据
            向指定连接发送多组数据
            TCP - 顺序发送所有数据包 
            UDP - 把所有数据包组合成一个数据包发送（数据包的总长度不能大于设置的 UDP 包最大长度） 
            </summary>
            <param name="pAgent"></param>
            <param name="connId">连接 ID</param>
            <param name="pBuffers">发送缓冲区数组</param>
            <param name="iCount">发送缓冲区数目</param>
            <returns>TRUE.成功,FALSE	.失败，可通过 Windows API 函数 ::GetLastError() 获取 Windows 错误代码</returns>
        </member>
        <member name="M:Sdk.HP_Agent_PauseReceive(System.IntPtr,System.IntPtr,System.Boolean)">
            <summary>
            名称：暂停/恢复接收 
            描述：暂停/恢复某个连接的数据接收工作
            </summary>
            <param name="pAgent"></param>
            <param name="dwConnID"></param>
            <param name="bPause">TRUE - 暂停, FALSE - 恢复</param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_Agent_Disconnect(System.IntPtr,System.IntPtr,System.Boolean)">
            <summary>
            断开某个连接
            </summary>
            <param name="pAgent"></param>
            <param name="connId">连接 ID</param>
            <param name="bForce">是否强制断开连接</param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_Agent_DisconnectLongConnections(System.IntPtr,System.UInt32,System.Boolean)">
            <summary>
            断开超过指定时长的连接
            </summary>
            <param name="pAgent"></param>
            <param name="dwPeriod">时长（毫秒）</param>
            <param name="bForce">是否强制断开连接</param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_Agent_DisconnectSilenceConnections(System.IntPtr,System.UInt32,System.Boolean)">
            <summary>
            断开超过指定时长的静默连接
            </summary>
            <param name="pServer"></param>
            <param name="dwPeriod">时长（毫秒）</param>
            <param name="bForce">是否强制断开连接</param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_TcpAgent_SendSmallFile(System.IntPtr,System.IntPtr,System.String,SpaceCG.HPSocket.WSABUF@,SpaceCG.HPSocket.WSABUF@)">
            <summary>
             名称：发送小文件
             描述：向指定连接发送 4096 KB 以下的小文件
            </summary>
            <param name="pServer"></param>
            <param name="connId">连接 ID</param>
            <param name="lpszFileName">文件路径</param>
            <param name="pHead">头部附加数据</param>
            <param name="pTail">尾部附加数据</param>
            <returns>TRUE.成功 FALSE	-- 失败，可通过 Windows API 函数 ::GetLastError() 获取 Windows 错误代码</returns>
        </member>
        <member name="M:Sdk.HP_Agent_SetSendPolicy(System.IntPtr,SpaceCG.HPSocket.SendPolicy)">
            <summary>
            设置数据发送策略
            </summary>
            <param name="pAgent"></param>
            <param name="enSendPolicy"></param>
        </member>
        <member name="M:Sdk.HP_Agent_GetSendPolicy(System.IntPtr)">
            <summary>
            获取数据发送策略
            </summary>
            <param name="pAgent"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_Agent_GetOnSendSyncPolicy(System.IntPtr)">
            <summary>
            获取 OnSend 事件同步策略
            </summary>
            <param name="pServer"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_Agent_SetOnSendSyncPolicy(System.IntPtr,SpaceCG.HPSocket.OnSendSyncPolicy)">
            <summary>
            设置 OnSend 事件同步策略（默认：OSSP_NONE，不同步
            </summary>
            <param name="pServer"></param>
            <param name="syncPolicy"></param>
        </member>
        <member name="M:Sdk.HP_Agent_SetConnectionExtra(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            设置连接的附加数据
            是否为连接绑定附加数据或者绑定什么样的数据，均由应用程序只身决定
            </summary>
            <param name="pAgent"></param>
            <param name="connId">连接 ID</param>
            <param name="pExtra">数据</param>
            <returns>FALSE    -- 失败（无效的连接 ID）</returns>
        </member>
        <member name="M:Sdk.HP_Agent_GetConnectionExtra(System.IntPtr,System.IntPtr,System.IntPtr@)">
            <summary>
            获取连接的附加数据
            是否为连接绑定附加数据或者绑定什么样的数据，均由应用程序只身决定
            </summary>
            <param name="pAgent"></param>
            <param name="connId"></param>
            <param name="pExtra"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_Agent_IsSecure(System.IntPtr)">
            <summary>
            检测是否为安全连接（SSL/HTTPS）
            </summary>
            <param name="pAgent"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_Agent_HasStarted(System.IntPtr)">
            <summary>
            检查通信组件是否已启动
            </summary>
            <param name="pAgent"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_Agent_GetState(System.IntPtr)">
            <summary>
            查看通信组件当前状态
            </summary>
            <param name="pAgent"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_Agent_GetConnectionCount(System.IntPtr)">
            <summary>
            获取连接数
            </summary>
            <param name="pAgent"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_Agent_GetAllConnectionIDs(System.IntPtr,System.IntPtr[],System.UInt32@)">
            <summary>
            获取所有连接的 CONNID
            </summary>
            <param name="pServer"></param>
            <param name="pIDs"></param>
            <param name="pdwCount"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_Agent_GetConnectPeriod(System.IntPtr,System.IntPtr,System.UInt32@)">
            <summary>
            获取某个连接时长（毫秒）
            </summary>
            <param name="pAgent"></param>
            <param name="connId"></param>
            <param name="pdwPeriod"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_Agent_GetSilencePeriod(System.IntPtr,System.IntPtr,System.UInt32@)">
            <summary>
            获取某个连接静默时间（毫秒）
            </summary>
            <param name="pServer"></param>
            <param name="connId"></param>
            <param name="pdwPeriod"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_Agent_GetLocalAddress(System.IntPtr,System.IntPtr,System.Text.StringBuilder,System.Int32@,System.UInt16@)">
            <summary>
            获取某个连接的本地地址信息
            </summary>
            <param name="pAgent"></param>
            <param name="connId"></param>
            <param name="lpszAddress"></param>
            <param name="piAddressLen"></param>
            <param name="pusPort"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_Agent_GetRemoteAddress(System.IntPtr,System.IntPtr,System.Text.StringBuilder,System.Int32@,System.UInt16@)">
            <summary>
            获取某个连接的远程地址信息
            </summary>
            <param name="pAgent"></param>
            <param name="connId"></param>
            <param name="lpszAddress"></param>
            <param name="piAddressLen"></param>
            <param name="pusPort"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_Agent_GetRemoteHost(System.IntPtr,System.IntPtr,System.Text.StringBuilder,System.Int32@,System.UInt16@)">
            <summary>
            获取某个连接的远程主机信息
            </summary>
            <param name="pAgent"></param>
            <param name="dwConnID"></param>
            <param name="lpszAddress"></param>
            <param name="piHostLen"></param>
            <param name="pusPort"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_Agent_GetLastError(System.IntPtr)">
            <summary>
            获取最近一次失败操作的错误代码
            </summary>
            <param name="pAgent"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_Agent_GetLastErrorDesc(System.IntPtr)">
            <summary>
            获取最近一次失败操作的错误描述
            </summary>
            <param name="pAgent"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_Agent_GetPendingDataLength(System.IntPtr,System.IntPtr,System.Int32@)">
            <summary>
            获取连接中未发出数据的长度
            </summary>
            <param name="pAgent"></param>
            <param name="connId"></param>
            <param name="piPending"></param>
        </member>
        <member name="M:Sdk.HP_Agent_IsPauseReceive(System.IntPtr,System.IntPtr,System.Int32@)">
            <summary>
            获取连接的数据接收状态
            </summary>
            <param name="pAgent"></param>
            <param name="dwConnID"></param>
            <param name="pbPaused"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_Agent_IsConnected(System.IntPtr,System.IntPtr)">
            <summary>
            检测是否有效连接
            </summary>
            <param name="pAgent"></param>
            <param name="dwConnID"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_Agent_SetFreeSocketObjLockTime(System.IntPtr,System.UInt32)">
            <summary>
            设置 Socket 缓存对象锁定时间（毫秒，在锁定期间该 Socket 缓存对象不能被获取使用）
            </summary>
            <param name="pAgent"></param>
            <param name="dwFreeSocketObjLockTime"></param>
        </member>
        <member name="M:Sdk.HP_Agent_SetFreeSocketObjPool(System.IntPtr,System.UInt32)">
            <summary>
            设置 Socket 缓存池大小（通常设置为平均并发连接数量的 1/3 - 1/2）
            </summary>
            <param name="pAgent"></param>
            <param name="dwFreeSocketObjPool"></param>
        </member>
        <member name="M:Sdk.HP_Agent_SetFreeBufferObjPool(System.IntPtr,System.UInt32)">
            <summary>
            设置内存块缓存池大小（通常设置为 Socket 缓存池大小的 2 - 3 倍）
            </summary>
            <param name="pAgent"></param>
            <param name="dwFreeBufferObjPool"></param>
        </member>
        <member name="M:Sdk.HP_Agent_SetFreeSocketObjHold(System.IntPtr,System.UInt32)">
            <summary>
            设置 Socket 缓存池回收阀值（通常设置为 Socket 缓存池大小的 3 倍）
            </summary>
            <param name="pAgent"></param>
            <param name="dwFreeSocketObjHold"></param>
        </member>
        <member name="M:Sdk.HP_Agent_SetFreeBufferObjHold(System.IntPtr,System.UInt32)">
            <summary>
            设置内存块缓存池回收阀值（通常设置为内存块缓存池大小的 3 倍）
            </summary>
            <param name="pAgent"></param>
            <param name="dwFreeBufferObjHold"></param>
        </member>
        <member name="M:Sdk.HP_Agent_SetMaxConnectionCount(System.IntPtr,System.UInt32)">
            <summary>
            设置最大连接数（组件会根据设置值预分配内存，因此需要根据实际情况设置，不宜过大）
            </summary>
            <param name="pAgent"></param>
            <param name="dwMaxConnectionCount"></param>
        </member>
        <member name="M:Sdk.HP_Agent_SetWorkerThreadCount(System.IntPtr,System.UInt32)">
            <summary>
            设置工作线程数量（通常设置为 2 * CPU + 2）
            </summary>
            <param name="pAgent"></param>
            <param name="dwWorkerThreadCount"></param>
        </member>
        <member name="M:Sdk.HP_Agent_SetMarkSilence(System.IntPtr,System.Boolean)">
            <summary>
            设置是否标记静默时间（设置为 TRUE 时 DisconnectSilenceConnections() 和 GetSilencePeriod() 才有效，默认：FALSE）
            </summary>
            <param name="pServer"></param>
            <param name="bMarkSilence"></param>
        </member>
        <member name="M:Sdk.HP_Agent_GetFreeSocketObjLockTime(System.IntPtr)">
            <summary>
            获取 Socket 缓存对象锁定时间
            </summary>
            <param name="pAgent"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_Agent_GetFreeSocketObjPool(System.IntPtr)">
            <summary>
            获取 Socket 缓存池大小
            </summary>
            <param name="pAgent"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_Agent_GetFreeBufferObjPool(System.IntPtr)">
            <summary>
            获取内存块缓存池大小
            </summary>
            <param name="pAgent"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_Agent_GetFreeSocketObjHold(System.IntPtr)">
            <summary>
            获取 Socket 缓存池回收阀值
            </summary>
            <param name="pAgent"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_Agent_GetFreeBufferObjHold(System.IntPtr)">
            <summary>
            获取内存块缓存池回收阀值
            </summary>
            <param name="pAgent"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_Agent_GetMaxConnectionCount(System.IntPtr)">
            <summary>
            获取最大连接数
            </summary>
            <param name="pAgent"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_Agent_GetWorkerThreadCount(System.IntPtr)">
            <summary>
            获取工作线程数量
            </summary>
            <param name="pAgent"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_Agent_IsMarkSilence(System.IntPtr)">
            <summary>
            检测是否标记静默时间
            </summary>
            <param name="pServer"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_TcpAgent_SetReuseAddress(System.IntPtr,System.Boolean)">
            <summary>
            置是否启用地址重用机制（默认：不启用）
            </summary>
            <param name="pAgent"></param>
            <param name="bReuseAddress"></param>
        </member>
        <member name="M:Sdk.HP_TcpAgent_IsReuseAddress(System.IntPtr)">
            <summary>
            检测是否启用地址重用机制
            </summary>
            <param name="pAgent"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_TcpAgent_SetSocketBufferSize(System.IntPtr,System.UInt32)">
            <summary>
            设置通信数据缓冲区大小（根据平均通信数据包大小调整设置，通常设置为 1024 的倍数）
            </summary>
            <param name="pAgent"></param>
            <param name="dwSocketBufferSize"></param>
        </member>
        <member name="M:Sdk.HP_TcpAgent_SetKeepAliveTime(System.IntPtr,System.UInt32)">
            <summary>
            设置心跳包间隔（毫秒，0 则不发送心跳包）
            </summary>
            <param name="pAgent"></param>
            <param name="dwKeepAliveTime"></param>
        </member>
        <member name="M:Sdk.HP_TcpAgent_SetKeepAliveInterval(System.IntPtr,System.UInt32)">
            <summary>
            设置心跳确认包检测间隔（毫秒，0 不发送心跳包，如果超过若干次 [默认：WinXP 5 次, Win7 10 次] 检测不到心跳确认包则认为已断线）
            </summary>
            <param name="pAgent"></param>
            <param name="dwKeepAliveInterval"></param>
        </member>
        <member name="M:Sdk.HP_TcpAgent_GetSocketBufferSize(System.IntPtr)">
            <summary>
            获取通信数据缓冲区大小
            </summary>
            <param name="pAgent"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_TcpAgent_GetKeepAliveTime(System.IntPtr)">
            <summary>
            获取心跳检查次数
            </summary>
            <param name="pAgent"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_TcpAgent_GetKeepAliveInterval(System.IntPtr)">
            <summary>
            获取心跳检查间隔
            </summary>
            <param name="pAgent"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_TcpPullServer_Fetch(System.IntPtr,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            抓取数据
            用户通过该方法从 Socket 组件中抓取数据
            </summary>
            <param name="pServer"></param>
            <param name="connId">连接 ID</param>
            <param name="pBuffer">数据抓取缓冲区</param>
            <param name="length">抓取数据长度</param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_TcpPullServer_Peek(System.IntPtr,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            窥探数据（不会移除缓冲区数据） 
            描述：用户通过该方法从 Socket 组件中窥探数据
            </summary>
            <param name="pServer"></param>
            <param name="connId">连接 ID</param>
            <param name="pBuffer">窥探缓冲区</param>
            <param name="length">窥探数据长度</param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_TcpPullClient_Fetch(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            抓取数据
            用户通过该方法从 Socket 组件中抓取数据
            </summary>
            <param name="pClient"></param>
            <param name="connId">连接 ID</param>
            <param name="pBuffer">数据抓取缓冲区</param>
            <param name="length">抓取数据长度</param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_TcpPullClient_Peek(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            名称：窥探数据（不会移除缓冲区数据）
            描述：用户通过该方法从 Socket 组件中窥探数据
            </summary>
            <param name="pClient"></param>
            <param name="connId">连接 ID</param>
            <param name="pBuffer">数据抓取缓冲区</param>
            <param name="length">抓取数据长度</param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_TcpPullAgent_Fetch(System.IntPtr,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            抓取数据
            用户通过该方法从 Socket 组件中抓取数据
            </summary>
            <param name="pAgent"></param>
            <param name="connId">连接 ID</param>
            <param name="pBuffer">数据抓取缓冲区</param>
            <param name="length">抓取数据长度</param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_TcpPullAgent_Peek(System.IntPtr,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            名称：窥探数据（不会移除缓冲区数据） 
            描述：用户通过该方法从 Socket 组件中窥探数据
            </summary>
            <param name="pAgent"></param>
            <param name="connId">连接 ID</param>
            <param name="pBuffer">数据抓取缓冲区</param>
            <param name="length">抓取数据长度</param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_TcpPackServer_SetMaxPackSize(System.IntPtr,System.UInt32)">
            <summary>
            设置数据包最大长度（有效数据包最大长度不能超过 4194303/0x3FFFFF  字节，默认：262144/0x40000）
            </summary>
            <param name="pServer"></param>
            <param name="dwMaxPackSize">有效数据包最大长度不能超过 4194303/0x3FFFFF 字节，默认：262144/0x40000</param>
        </member>
        <member name="M:Sdk.HP_TcpPackServer_SetPackHeaderFlag(System.IntPtr,System.UInt16)">
            <summary>
            设置包头标识（有效包头标识取值范围 0 ~ 1023/0x3FF，当包头标识为 0 时不校验包头，默认：0）
            </summary>
            <param name="pServer"></param>
            <param name="usPackHeaderFlag">有效包头标识取值范围 0 ~ 1023/0x3FF，当包头标识为 0 时不校验包头，默认：0</param>
        </member>
        <member name="M:Sdk.HP_TcpPackServer_GetMaxPackSize(System.IntPtr)">
            <summary>
            获取数据包最大长度
            </summary>
            <param name="pServer"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_TcpPackServer_GetPackHeaderFlag(System.IntPtr)">
            <summary>
            获取包头标识
            </summary>
            <param name="pServer"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_TcpPackAgent_SetMaxPackSize(System.IntPtr,System.UInt32)">
            <summary>
            设置数据包最大长度（有效数据包最大长度不能超过 524287/0x7FFFF 字节，默认：262144/0x40000）
            </summary>
            <param name="pServer"></param>
            <param name="dwMaxPackSize">有效数据包最大长度不能超过 524287/0x7FFFF 字节，默认：262144/0x40000</param>
        </member>
        <member name="M:Sdk.HP_TcpPackAgent_SetPackHeaderFlag(System.IntPtr,System.UInt16)">
            <summary>
            设置包头标识（有效包头标识取值范围 0 ~ 8191/0x1FFF，当包头标识为 0 时不校验包头，默认：0）
            </summary>
            <param name="pServer"></param>
            <param name="usPackHeaderFlag">有效包头标识取值范围 0 ~ 8191/0x1FFF，当包头标识为 0 时不校验包头，默认：0</param>
        </member>
        <member name="M:Sdk.HP_TcpPackAgent_GetMaxPackSize(System.IntPtr)">
            <summary>
            获取数据包最大长度
            </summary>
            <param name="pServer"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_TcpPackAgent_GetPackHeaderFlag(System.IntPtr)">
            <summary>
            获取包头标识
            </summary>
            <param name="pServer"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_TcpPackClient_SetMaxPackSize(System.IntPtr,System.UInt32)">
            <summary>
            设置数据包最大长度（有效数据包最大长度不能超过 524287/0x7FFFF 字节，默认：262144/0x40000）
            </summary>
            <param name="pServer"></param>
            <param name="dwMaxPackSize">有效数据包最大长度不能超过 524287/0x7FFFF 字节，默认：262144/0x40000</param>
        </member>
        <member name="M:Sdk.HP_TcpPackClient_SetPackHeaderFlag(System.IntPtr,System.UInt16)">
            <summary>
            设置包头标识（有效包头标识取值范围 0 ~ 8191/0x1FFF，当包头标识为 0 时不校验包头，默认：0）
            </summary>
            <param name="pServer"></param>
            <param name="usPackHeaderFlag">有效包头标识取值范围 0 ~ 8191/0x1FFF，当包头标识为 0 时不校验包头，默认：0</param>
        </member>
        <member name="M:Sdk.HP_TcpPackClient_GetMaxPackSize(System.IntPtr)">
            <summary>
            获取数据包最大长度
            </summary>
            <param name="pServer"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_TcpPackClient_GetPackHeaderFlag(System.IntPtr)">
            <summary>
            获取包头标识
            </summary>
            <param name="pServer"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_GetHPSocketVersion">
            <summary>
            获取 HPSocket 版本号（4 个字节分别为：主版本号，子版本号，修正版本号，构建编号）
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdk.GetHPSocketVersion">
            <summary>
            获取版本号
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_GetSocketErrorDesc(SpaceCG.HPSocket.SocketError)">
            <summary>
            获取错误描述文本
            </summary>
            <param name="enCode"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.SYS_GetLastError">
            <summary>
            调用系统的 ::GetLastError() 方法获取系统错误代码
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdk.SYS_WSAGetLastError">
            <summary>
            调用系统的 ::WSAGetLastError() 方法获取通信错误代码
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdk.SYS_SetSocketOption(System.IntPtr,System.Int32,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            调用系统的 setsockopt()
            </summary>
            <param name="sock"></param>
            <param name="level"></param>
            <param name="name"></param>
            <param name="val"></param>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.SYS_GetSocketOption(System.IntPtr,System.Int32,System.Int32,System.IntPtr,System.Int32@)">
            <summary>
            调用系统的 getsockopt()
            </summary>
            <param name="sock"></param>
            <param name="level"></param>
            <param name="name"></param>
            <param name="val"></param>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.SYS_IoctlSocket(System.IntPtr,System.Int64,System.IntPtr)">
            <summary>
            调用系统的 ioctlsocket()
            </summary>
            <param name="sock"></param>
            <param name="cmd"></param>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.SYS_WSAIoctl(System.IntPtr,System.UInt32,System.IntPtr,System.UInt32,System.IntPtr,System.UInt32,System.UInt32)">
            <summary>
            调用系统的 ::WSAIoctl()
            </summary>
            <param name="sock"></param>
            <param name="dwIoControlCode"></param>
            <param name="lpvInBuffer"></param>
            <param name="cbInBuffer"></param>
            <param name="lpvOutBuffer"></param>
            <param name="cbOutBuffer"></param>
            <param name="lpcbBytesReturned"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.SYS_SSO_NoDelay(System.IntPtr,System.Boolean)">
            <summary>
            设置 socket 选项：IPPROTO_TCP -> TCP_NODELAY
            </summary>
            <param name="sock"></param>
            <param name="bNoDelay"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.SYS_SSO_DontLinger(System.IntPtr,System.Boolean)">
            <summary>
            设置 socket 选项：SOL_SOCKET -> SO_DONTLINGER
            </summary>
            <param name="sock"></param>
            <param name="bDont"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.SYS_SSO_Linger(System.IntPtr,System.UInt16,System.UInt16)">
            <summary>
            设置 socket 选项：SOL_SOCKET -> SO_LINGER
            </summary>
            <param name="sock"></param>
            <param name="l_onoff"></param>
            <param name="l_linger"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.SYS_SSO_RecvBuffSize(System.IntPtr,System.Int32)">
            <summary>
            设置 socket 选项：SOL_SOCKET -> SO_RCVBUF
            </summary>
            <param name="sock"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.SYS_SSO_SendBuffSize(System.IntPtr,System.Int32)">
            <summary>
            设置 socket 选项：SOL_SOCKET -> SO_SNDBUF
            </summary>
            <param name="sock"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.SYS_SSO_ReuseAddress(System.IntPtr,System.Boolean)">
            <summary>
            设置 socket 选项：SOL_SOCKET -> SO_REUSEADDR
            </summary>
            <param name="sock"></param>
            <param name="bReuse"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.SYS_GetSocketLocalAddress(System.IntPtr,System.Text.StringBuilder,System.Int32@,System.UInt16@)">
            <summary>
            获取 SOCKET 本地地址信息
            </summary>
            <param name="pSocket"></param>
            <param name="lpszAddress"></param>
            <param name="piAddressLen">传入传出值,大小最好在222.222.222.222的长度以上</param>
            <param name="pusPort"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.SYS_GetSocketRemoteAddress(System.IntPtr,System.Text.StringBuilder,System.Int32@,System.UInt16@)">
            <summary>
            获取 SOCKET 远程地址信息
            </summary>
            <param name="pSocket"></param>
            <param name="lpszAddress"></param>
            <param name="piAddressLen">传入传出值,大小最好在222.222.222.222的长度以上</param>
            <param name="pusPort"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.SYS_EnumHostIPAddresses(System.String,SpaceCG.HPSocket.IPAddrType,System.IntPtr@,System.Int32@)">
            <summary>
            枚举主机 IP 地址
            不要用,未测试
            不要用,未测试
            不要用,未测试
            </summary>
            <param name="lpszHost"></param>
            <param name="enType"></param>
            <param name="lpppIPAddr"></param>
            <param name="piIPAddrCount"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.SYS_FreeHostIPAddresses(System.IntPtr)">
            <summary>
            释放 HP_LPTIPAddr
            </summary>
            <param name="lppIPAddr"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.SYS_IsIPAddress(System.String,SpaceCG.HPSocket.IPAddrType@)">
            <summary>
            检查字符串是否符合 IP 地址格式
            </summary>
            <param name="lpszAddress"></param>
            <param name="penType"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.SYS_GetIPAddress(System.String,System.Text.StringBuilder,System.Int32@,SpaceCG.HPSocket.IPAddrType@)">
            <summary>
            通过主机名获取 IP 地址
            </summary>
            <param name="lpszHost"></param>
            <param name="lpszIP"></param>
            <param name="piIPLenth"></param>
            <param name="penType"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.SYS_NToH64(System.UInt64)">
            <summary>
            64 位网络字节序转主机字节序
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.SYS_HToN64(System.UInt64)">
            <summary>
            64 位主机字节序转网络字节序
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.SYS_Malloc(System.Int32)">
            <summary>
            分配内存
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.SYS_Realloc(System.IntPtr,System.Int32)">
            <summary>
            重新分配内存
            </summary>
            <param name="p"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.SYS_Free(System.IntPtr)">
            <summary>
            释放内存
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:Sdk.Create_HP_UdpArqServer(System.IntPtr)">
            <summary>
            创建 HP_UdpArqServer 对象
            </summary>
            <param name="pListener"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.Create_HP_UdpArqClient(System.IntPtr)">
            <summary>
            创建 HP_UdpArqClient 对象
            </summary>
            <param name="pListener"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.Destroy_HP_UdpArqServer(System.IntPtr)">
            <summary>
            销毁 HP_UdpArqServer 对象
            </summary>
            <param name="pServer"></param>
        </member>
        <member name="M:Sdk.Destroy_HP_UdpArqClient(System.IntPtr)">
            <summary>
            销毁 HP_UdpArqClient 对象
            </summary>
            <param name="pClient"></param>
        </member>
        <member name="M:Sdk.Create_HP_UdpArqServerListener">
            <summary>
            创建 HP_UdpArqServerListener 对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdk.Create_HP_UdpArqClientListener">
            <summary>
            创建 HP_UdpArqClientListener 对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sdk.Destroy_HP_UdpArqServerListener(System.IntPtr)">
            <summary>
            销毁 HP_UdpArqServerListener 对象
            </summary>
            <param name="pListener"></param>
        </member>
        <member name="M:Sdk.Destroy_HP_UdpArqClientListener(System.IntPtr)">
            <summary>
            销毁 HP_UdpArqClientListener 对象
            </summary>
            <param name="pListener"></param>
        </member>
        <member name="M:Sdk.HP_UdpArqServer_SetNoDelay(System.IntPtr,System.Boolean)">
            <summary>
            设置是否开启 nodelay 模式（默认：FALSE，不开启）
            </summary>
            <param name="pServer"></param>
            <param name="bNoDelay"></param>
        </member>
        <member name="M:Sdk.HP_UdpArqServer_SetTurnoffCongestCtrl(System.IntPtr,System.Boolean)">
            <summary>
            设置是否关闭拥塞控制（默认：FALSE，不关闭）
            </summary>
            <param name="pServer"></param>
            <param name="bTurnOff"></param>
        </member>
        <member name="M:Sdk.HP_UdpArqServer_SetFlushInterval(System.IntPtr,System.UInt32)">
            <summary>
            设置数据刷新间隔（毫秒，默认：20）
            </summary>
            <param name="pServer"></param>
            <param name="dwFlushInterval"></param>
        </member>
        <member name="M:Sdk.HP_UdpArqServer_SetResendByAcks(System.IntPtr,System.UInt32)">
            <summary>
            设置快速重传 ACK 跨越次数（默认：0，关闭快速重传）
            </summary>
            <param name="pServer"></param>
            <param name="dwResendByAcks"></param>
        </member>
        <member name="M:Sdk.HP_UdpArqServer_SetSendWndSize(System.IntPtr,System.UInt32)">
            <summary>
            设置发送窗口大小（数据包数量，默认：128）
            </summary>
            <param name="pServer"></param>
            <param name="dwSendWndSize"></param>
        </member>
        <member name="M:Sdk.HP_UdpArqServer_SetRecvWndSize(System.IntPtr,System.UInt32)">
            <summary>
            设置接收窗口大小（数据包数量，默认：512）
            </summary>
            <param name="pServer"></param>
            <param name="dwRecvWndSize"></param>
        </member>
        <member name="M:Sdk.HP_UdpArqServer_SetMinRto(System.IntPtr,System.UInt32)">
            <summary>
            设置最小重传超时时间（毫秒，默认：30）
            </summary>
            <param name="pServer"></param>
            <param name="dwMinRto"></param>
        </member>
        <member name="M:Sdk.HP_UdpArqServer_SetMaxTransUnit(System.IntPtr,System.UInt32)">
            <summary>
            设置最大传输单元（默认：0，与 SetMaxDatagramSize() 一致）
            </summary>
            <param name="pServer"></param>
            <param name="dwMaxTransUnit"></param>
        </member>
        <member name="M:Sdk.HP_UdpArqServer_SetMaxMessageSize(System.IntPtr,System.UInt32)">
            <summary>
            设置最大数据包大小（默认：4096）
            </summary>
            <param name="pServer"></param>
            <param name="dwMaxMessageSize"></param>
        </member>
        <member name="M:Sdk.HP_UdpArqServer_SetHandShakeTimeout(System.IntPtr,System.UInt32)">
            <summary>
            设置握手超时时间（毫秒，默认：5000）
            </summary>
            <param name="pServer"></param>
            <param name="dwHandShakeTimeout"></param>
        </member>
        <member name="M:Sdk.HP_UdpArqServer_IsNoDelay(System.IntPtr)">
            <summary>
            检测是否开启 nodelay 模式 
            </summary>
            <param name="pServer"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_UdpArqServer_IsTurnoffCongestCtrl(System.IntPtr)">
            <summary>
            检测是否关闭拥塞控制
            </summary>
            <param name="pServer"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_UdpArqServer_GetFlushInterval(System.IntPtr)">
            <summary>
            获取数据刷新间隔
            </summary>
            <param name="pServer"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_UdpArqServer_GetResendByAcks(System.IntPtr)">
            <summary>
            获取快速重传 ACK 跨越次数
            </summary>
            <param name="pServer"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_UdpArqServer_GetSendWndSize(System.IntPtr)">
            <summary>
            获取发送窗口大小
            </summary>
            <param name="pServer"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_UdpArqServer_GetRecvWndSize(System.IntPtr)">
            <summary>
            获取接收窗口大小
            </summary>
            <param name="pServer"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_UdpArqServer_GetMinRto(System.IntPtr)">
            <summary>
            获取最小重传超时时间
            </summary>
            <param name="pServer"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_UdpArqServer_GetMaxTransUnit(System.IntPtr)">
            <summary>
            获取最大传输单元
            </summary>
            <param name="pServer"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_UdpArqServer_GetMaxMessageSize(System.IntPtr)">
            <summary>
            获取最大数据包大小
            </summary>
            <param name="pServer"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_UdpArqServer_GetHandShakeTimeout(System.IntPtr)">
            <summary>
            获取握手超时时间
            </summary>
            <param name="pServer"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_UdpArqServer_GetWaitingSendMessageCount(System.IntPtr,System.IntPtr,System.Int32@)">
            <summary>
            获取等待发送包数量
            </summary>
            <param name="pServer"></param>
            <param name="dwConnId"></param>
            <param name="piCount"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_UdpArqClient_SetNoDelay(System.IntPtr,System.Boolean)">
            <summary>
            设置是否开启 nodelay 模式（默认：FALSE，不开启）
            </summary>
            <param name="pClient"></param>
            <param name="bNoDelay"></param>
        </member>
        <member name="M:Sdk.HP_UdpArqClient_SetTurnoffCongestCtrl(System.IntPtr,System.Boolean)">
            <summary>
            设置是否关闭拥塞控制（默认：FALSE，不关闭）
            </summary>
            <param name="pClient"></param>
            <param name="bTurnOff"></param>
        </member>
        <member name="M:Sdk.HP_UdpArqClient_SetFlushInterval(System.IntPtr,System.UInt32)">
            <summary>
            设置数据刷新间隔（毫秒，默认：20）
            </summary>
            <param name="pClient"></param>
            <param name="dwFlushInterval"></param>
        </member>
        <member name="M:Sdk.HP_UdpArqClient_SetResendByAcks(System.IntPtr,System.UInt32)">
            <summary>
            设置快速重传 ACK 跨越次数（默认：0，关闭快速重传）
            </summary>
            <param name="pClient"></param>
            <param name="dwResendByAcks"></param>
        </member>
        <member name="M:Sdk.HP_UdpArqClient_SetSendWndSize(System.IntPtr,System.UInt32)">
            <summary>
            设置发送窗口大小（数据包数量，默认：128）
            </summary>
            <param name="pClient"></param>
            <param name="dwSendWndSize"></param>
        </member>
        <member name="M:Sdk.HP_UdpArqClient_SetRecvWndSize(System.IntPtr,System.UInt32)">
            <summary>
            设置接收窗口大小（数据包数量，默认：512）
            </summary>
            <param name="pClient"></param>
            <param name="dwRecvWndSize"></param>
        </member>
        <member name="M:Sdk.HP_UdpArqClient_SetMinRto(System.IntPtr,System.UInt32)">
            <summary>
            设置最小重传超时时间（毫秒，默认：30）
            </summary>
            <param name="pClient"></param>
            <param name="dwMinRto"></param>
        </member>
        <member name="M:Sdk.HP_UdpArqClient_SetMaxTransUnit(System.IntPtr,System.UInt32)">
            <summary>
            设置最大传输单元（默认：0，与 SetMaxDatagramSize() 一致）
            </summary>
            <param name="pClient"></param>
            <param name="dwMaxTransUnit"></param>
        </member>
        <member name="M:Sdk.HP_UdpArqClient_SetMaxMessageSize(System.IntPtr,System.UInt32)">
            <summary>
            设置最大数据包大小（默认：4096）
            </summary>
            <param name="pClient"></param>
            <param name="dwMaxMessageSize"></param>
        </member>
        <member name="M:Sdk.HP_UdpArqClient_SetHandShakeTimeout(System.IntPtr,System.UInt32)">
            <summary>
            设置握手超时时间（毫秒，默认：5000）
            </summary>
            <param name="pClient"></param>
            <param name="dwHandShakeTimeout"></param>
        </member>
        <member name="M:Sdk.HP_UdpArqClient_IsNoDelay(System.IntPtr)">
            <summary>
            检测是否开启 nodelay 模式
            </summary>
            <param name="pClient"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_UdpArqClient_IsTurnoffCongestCtrl(System.IntPtr)">
            <summary>
            检测是否关闭拥塞控制
            </summary>
            <param name="pClient"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_UdpArqClient_GetFlushInterval(System.IntPtr)">
            <summary>
            获取数据刷新间隔
            </summary>
            <param name="pClient"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_UdpArqClient_GetResendByAcks(System.IntPtr)">
            <summary>
            获取快速重传 ACK 跨越次数
            </summary>
            <param name="pClient"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_UdpArqClient_GetSendWndSize(System.IntPtr)">
            <summary>
            获取发送窗口大小
            </summary>
            <param name="pClient"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_UdpArqClient_GetRecvWndSize(System.IntPtr)">
            <summary>
            获取接收窗口大小
            </summary>
            <param name="pClient"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_UdpArqClient_GetMinRto(System.IntPtr)">
            <summary>
            获取最小重传超时时间
            </summary>
            <param name="pClient"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_UdpArqClient_GetMaxTransUnit(System.IntPtr)">
            <summary>
            获取最大传输单元
            </summary>
            <param name="pClient"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_UdpArqClient_GetMaxMessageSize(System.IntPtr)">
            <summary>
            获取最大数据包大小
            </summary>
            <param name="pClient"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_UdpArqClient_GetHandShakeTimeout(System.IntPtr)">
            <summary>
            获取握手超时时间
            </summary>
            <param name="pClient"></param>
            <returns></returns>
        </member>
        <member name="M:Sdk.HP_UdpArqClient_GetWaitingSendMessageCount(System.IntPtr,System.Int32@)">
            <summary>
            获取等待发送包数量
            </summary>
            <param name="pClient"></param>
            <param name="piCount"></param>
            <returns></returns>
        </member>
    </members>
</doc>
